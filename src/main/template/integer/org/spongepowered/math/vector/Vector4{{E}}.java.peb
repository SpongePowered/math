package org.spongepowered.math.vector;

import java.io.Serializable;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;

@Immutable
public final class Vector4{{ E }} implements Vector{{ E }}, Comparable<Vector4{{ E }}>, Serializable {

    private static final long serialVersionUID = 1;
    public static final Vector4{{ E }} ZERO = new Vector4{{ E }}(0, 0, 0, 0);
    public static final Vector4{{ E }} UNIT_X = new Vector4{{ E }}(1, 0, 0, 0);
    public static final Vector4{{ E }} UNIT_Y = new Vector4{{ E }}(0, 1, 0, 0);
    public static final Vector4{{ E }} UNIT_Z = new Vector4{{ E }}(0, 0, 1, 0);
    public static final Vector4{{ E }} UNIT_W = new Vector4{{ E }}(0, 0, 0, 1);
    public static final Vector4{{ E }} ONE = new Vector4{{ E }}(1, 1, 1, 1);
    private final {{ e }} x;
    private final {{ e }} y;
    private final {{ e }} z;
    private final {{ e }} w;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    public Vector4{{ E }}(final Vector2{{ E }} v) {
        this(v, 0, 0);
    }

    public Vector4{{ E }}(final Vector2{{ E }} v, final {{ EOverload }} z, final {{ EOverload }} w) {
        this(v, {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }}(final Vector2{{ E }} v, final {{ e }} z, final {{ e }} w) {
        this(v.x(), v.y(), z, w);
    }

    public Vector4{{ E }}(final Vector3{{ E }} v) {
        this(v, 0);
    }

    public Vector4{{ E }}(final Vector3{{ E }} v, final {{ EOverload }} w) {
        this(v, {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }}(final Vector3{{ E }} v, final {{ e }} w) {
        this(v.x(), v.y(), v.z(), w);
    }

    public Vector4{{ E }}(final VectorN{{ E }} v) {
        this(v.get(0), v.get(1), v.size() > 2 ? v.get(2) : 0, v.size() > 3 ? v.get(3) : 0);
    }

    public Vector4{{ E }}(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        this({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }}(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }

    public {{ e }} x() {
        return this.x;
    }

    public Vector4{{ E }} withX(final {{ e }} x) {
        return from(x, this.y, this.z, this.w);
    }

    public Vector4{{ E }} withX(final {{ EOverload }} x) {
        return withX({{ EFloorFunc }}(x));
    }

    public {{ e }} y() {
        return this.y;
    }

    public Vector4{{ E }} withY(final {{ e }} y) {
        return from(this.x, y, this.z, this.w);
    }

    public Vector4{{ E }} withY(final {{ EOverload }} y) {
        return withY({{ EFloorFunc }}(y));
    }

    public {{ e }} z() {
        return this.z;
    }

    public Vector4{{ E }} withZ(final {{ e }} z) {
        return from(this.x, this.y, z, this.w);
    }

    public Vector4{{ E }} withZ(final {{ EOverload }} z) {
        return withZ({{ EFloorFunc }}(z));
    }

    public {{ e }} w() {
        return this.w;
    }

    public Vector4{{ E }} withW(final {{ e }} w) {
        return from(this.x, this.y, this.z, w);
    }

    public Vector4{{ E }} withW(final {{ EOverload }} w) {
        return withW({{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} add(final Vector4{{ E }} v) {
        return this.add(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} add(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.add({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} add(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(this.x + x, this.y + y, this.z + z, this.w + w);
    }

    public Vector4{{ E }} sub(final Vector4{{ E }} v) {
        return this.sub(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} sub(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.sub({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} sub(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(this.x - x, this.y - y, this.z - z, this.w - w);
    }

    public Vector4{{ E }} mul(final {{ EOverload }} a) {
        return this.mul({{ EFloorFunc }}(a));
    }

    @Override
    public Vector4{{ E }} mul(final {{ e }} a) {
        return this.mul(a, a, a, a);
    }

    public Vector4{{ E }} mul(final Vector4{{ E }} v) {
        return this.mul(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} mul(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.mul({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} mul(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(this.x * x, this.y * y, this.z * z, this.w * w);
    }

    public Vector4{{ E }} div(final {{ EOverload }} a) {
        return this.div({{ EFloorFunc }}(a));
    }

    @Override
    public Vector4{{ E }} div(final {{ e }} a) {
        return this.div(a, a, a, a);
    }

    public Vector4{{ E }} div(final Vector4{{ E }} v) {
        return this.div(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} div(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.div({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} div(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(this.x / x, this.y / y, this.z / z, this.w / w);
    }

    public {{ e }} dot(final Vector4{{ E }} v) {
        return this.dot(v.x, v.y, v.z, v.w);
    }

    public {{ e }} dot(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.dot({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public {{ e }} dot(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return this.x * x + this.y * y + this.z * z + this.w * w;
    }

    public Vector4{{ E }} project(final Vector4{{ E }} v) {
        return this.project(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} project(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.project({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} project(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        final {{ e }} lengthSquared = x * x + y * y + z * z + w * w;
        if (lengthSquared == 0) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final {{ EDecEqui }} a = ({{ EDecEqui }}) this.dot(x, y, z, w) / lengthSquared;
        return new Vector4{{ E }}(a * x, a * y, a * z, a * w);
    }

    public Vector4{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow({{ EFloorFunc }}(pow));
    }

    @Override
    public Vector4{{ E }} pow(final {{ e }} power) {
        return new Vector4{{ E }}(Math.pow(this.x, power), Math.pow(this.y, power), Math.pow(this.z, power), Math.pow(this.w, power));
    }

    @Override
    public Vector4{{ E }} abs() {
        return new Vector4{{ E }}(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z), Math.abs(this.w));
    }

    @Override
    public Vector4{{ E }} negate() {
        return new Vector4{{ E }}(-this.x, -this.y, -this.z, -this.w);
    }

    public Vector4{{ E }} min(final Vector4{{ E }} v) {
        return this.min(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} min(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.min({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} min(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(Math.min(this.x, x), Math.min(this.y, y), Math.min(this.z, z), Math.min(this.w, w));
    }

    public Vector4{{ E }} max(final Vector4{{ E }} v) {
        return this.max(v.x, v.y, v.z, v.w);
    }

    public Vector4{{ E }} max(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.max({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public Vector4{{ E }} max(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(Math.max(this.x, x), Math.max(this.y, y), Math.max(this.z, z), Math.max(this.w, w));
    }

    public {{ e }} distanceSquared(final Vector4{{ E }} v) {
        return this.distanceSquared(v.x, v.y, v.z, v.w);
    }

    public {{ e }} distanceSquared(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.distanceSquared({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public {{ e }} distanceSquared(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        final {{ e }} dx = this.x - x;
        final {{ e }} dy = this.y - y;
        final {{ e }} dz = this.z - z;
        final {{ e }} dw = this.w - w;
        return dx * dx + dy * dy + dz * dz + dw * dw;
    }

    public {{ EDecEqui }} distance(final Vector4{{ E }} v) {
        return this.distance(v.x, v.y, v.z, v.w);
    }

    public {{ EDecEqui }} distance(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.distance({{ EFloorFunc }}(x), {{ EFloorFunc }}(y), {{ EFloorFunc }}(z), {{ EFloorFunc }}(w));
    }

    public {{ EDecEqui }} distance(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return ({{ EDecEqui }}) Math.sqrt(this.distanceSquared(x, y, z, w));
    }

    @Override
    public {{ e }} lengthSquared() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }

    @Override
    public {{ EDecEqui }} length() {
        return ({{ EDecEqui }}) Math.sqrt(this.lengthSquared());
    }

    /**
     * Return the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int minAxis() {
        {{ e }} value = this.x;
        int axis = 0;
        if (this.y < value) {
            value = this.y;
            axis = 1;
        }
        if (this.z < value) {
            value = this.z;
            axis = 2;
        }
        if (this.w < value) {
            axis = 3;
        }
        return axis;
    }

    /**
     * Return the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int maxAxis() {
        {{ e }} value = this.x;
        int axis = 0;
        if (this.y > value) {
            value = this.y;
            axis = 1;
        }
        if (this.z > value) {
            value = this.z;
            axis = 2;
        }
        if (this.w > value) {
            axis = 3;
        }
        return axis;
    }

    public Vector2{{ E }} toVector2() {
        return new Vector2{{ E }}(this);
    }

    public Vector3{{ E }} toVector3() {
        return new Vector3{{ E }}(this);
    }

    public VectorN{{ E }} toVectorN() {
        return new VectorN{{ E }}(this);
    }

    @Override
    public {{ e }}[] toArray() {
        return new {{ e }}[]{this.x, this.y, this.z, this.w};
    }

    @Override
    public Vector4i toInt() {
        return new Vector4i(this.x, this.y, this.z, this.w);
    }

    @Override
    public Vector4l toLong() {
        return new Vector4l(this.x, this.y, this.z, this.w);
    }

    @Override
    public Vector4f toFloat() {
        return new Vector4f(this.x, this.y, this.z, this.w);
    }

    @Override
    public Vector4d toDouble() {
        return new Vector4d((double) this.x, (double) this.y, (double) this.z, (double) this.w);
    }


    @Override
    public int compareTo(final Vector4{{ E }} v) {
        return {{ ET }}.compare(this.lengthSquared(), v.lengthSquared());
    }

    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Vector4{{ E }})) {
            return false;
        }
        final Vector4{{ E }} that = (Vector4{{ E }}) other;
        if (that.x != this.x) {
            return false;
        }
        if (that.y != this.y) {
            return false;
        }
        if (that.z != this.z) {
            return false;
        }
        if (that.w != this.w) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            int result = (this.x != +0.0f ? {{ ET }}.hashCode(this.x) : 0);
            result = 31 * result + (this.y != +0.0f ? {{ ET }}.hashCode(this.y) : 0);
            result = 31 * result + (this.z != +0.0f ? {{ ET }}.hashCode(this.z) : 0);
            this.hashCode = 31 * result + (this.w != +0.0f ? {{ ET }}.hashCode(this.w) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    @Override
    public String toString() {
        return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
    }

    public static Vector4{{ E }} from(final {{ e }} n) {
         return n == 0 ? Vector4{{ E }}.ZERO : new Vector4{{ E }}(n, n, n, n);
    }

    public static Vector4{{ E }} from(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
         return x == 0 && y == 0 && z == 0 && w == 0 ? Vector4{{ E }}.ZERO : new Vector4{{ E }}(x, y, z, w);
    }

}
