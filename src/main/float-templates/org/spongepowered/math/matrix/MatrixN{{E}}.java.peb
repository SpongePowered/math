package org.spongepowered.math.matrix;

import java.io.Serializable;
import java.util.Arrays;

import org.spongepowered.math.GenericMath;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class MatrixN{{ E }} implements Matrix{{ E }}, Serializable, Cloneable {

    private static final long serialVersionUID = 1;
    public static final MatrixN{{ E }} IDENTITY_2 = new ImmutableIdentityMatrixN(2);
    public static final MatrixN{{ E }} IDENTITY_3 = new ImmutableIdentityMatrixN(3);
    public static final MatrixN{{ E }} IDENTITY_4 = new ImmutableIdentityMatrixN(4);
    private final {{ e }}[][] mat;

    public MatrixN{{ E }}(final int size) {
        if (size < 2) {
            throw new IllegalArgumentException("Minimum matrix size is 2");
        }
        this.mat = new {{ e }}[size][size];
        this.setIdentity();
    }

    public MatrixN{{ E }}(final Matrix2{{ E }} m) {
        this.mat = new {{ e }}[][]{
            {m.get(0, 0), m.get(0, 1)},
            {m.get(1, 0), m.get(1, 1)}
        };
    }

    public MatrixN{{ E }}(final Matrix3{{ E }} m) {
        this.mat = new {{ e }}[][]{
            {m.get(0, 0), m.get(0, 1), m.get(0, 2)},
            {m.get(1, 0), m.get(1, 1), m.get(1, 2)},
            {m.get(2, 0), m.get(2, 1), m.get(2, 2)}
        };
    }

    public MatrixN{{ E }}(final Matrix4{{ E }} m) {
        this.mat = new {{ e }}[][]{
                {m.get(0, 0), m.get(0, 1), m.get(0, 2), m.get(0, 3)},
                {m.get(1, 0), m.get(1, 1), m.get(1, 2), m.get(1, 3)},
                {m.get(2, 0), m.get(2, 1), m.get(2, 2), m.get(2, 3)},
                {m.get(3, 0), m.get(3, 1), m.get(3, 2), m.get(3, 3)}
        };
    }

    public MatrixN{{ E }}(final {{ e }}... m) {
        if (m.length < 4) {
            throw new IllegalArgumentException("Minimum matrix size is 2");
        }
        final int size = (int) Math.ceil(Math.sqrt(m.length));
        this.mat = new {{ e }}[size][size];
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                final int index = col + row * size;
                if (index < m.length) {
                    this.mat[row][col] = m[index];
                } else {
                    this.mat[row][col] = 0;
                }
            }
        }
    }

    public MatrixN{{ E }}(MatrixN{{ E }} m) {
        mat = deepClone(m.mat);
    }

    public int size() {
        return mat.length;
    }

    @Override
    public {{ e }} get(final int row, final int col) {
        return mat[row][col];
    }

    @Override
    public VectorN{{ E }} row(final int row) {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int col = 0; col < size; col++) {
            d.set(col, this.get(row, col));
        }
        return d;
    }

    @Override
    public VectorN{{ E }} column(final int col) {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            d.set(row, this.get(row, col));
        }
        return d;
    }

    public void set(final int row, final int col, final {{ EOverload }} val) {
        this.set(row, col, ({{ e }}) val);
    }

    public void set(final int row, final int col, final {{ e }} val) {
        this.mat[row][col] = val;
    }

    public final void setIdentity() {
        final int size = this.size();
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                if (row == col) {
                    this.mat[row][col] = 1;
                } else {
                    this.mat[row][col] = 0;
                }
            }
        }
    }

    public void setZero() {
        final int size = this.size();
        for (int row = 0; row < size; row++) {
            Arrays.fill(mat[row], 0);
        }
    }

    public MatrixN{{ E }} resize(int size) {
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int rowCol = this.size(); rowCol < size; rowCol++) {
            d.set(rowCol, rowCol, 0);
        }
        size = Math.min(size, this.size());
        for (int row = 0; row < size; row++) {
            System.arraycopy(this.mat[row], 0, d.mat[row], 0, size);
        }
        return d;
    }

    public MatrixN{{ E }} add(final MatrixN{{ E }} m) {
        final int size = this.size();
        if (size != m.size()) {
            throw new IllegalArgumentException("Matrix sizes must be the same");
        }
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = this.mat[row][col] + m.mat[row][col];
            }
        }
        return d;
    }

    public MatrixN{{ E }} sub(final MatrixN{{ E }} m) {
        final int size = this.size();
        if (size != m.size()) {
            throw new IllegalArgumentException("Matrix sizes must be the same");
        }
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = this.mat[row][col] - m.mat[row][col];
            }
        }
        return d;
    }

    public MatrixN{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    @Override
    public MatrixN{{ E }} mul(final {{ e }} a) {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = this.mat[row][col] * a;
            }
        }
        return d;
    }

    public MatrixN{{ E }} mul(final MatrixN{{ E }} m) {
        final int size = this.size();
        if (size != m.size()) {
            throw new IllegalArgumentException("Matrix sizes must be the same");
        }
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                {{ e }} dot = 0;
                for (int i = 0; i < size; i++) {
                    dot += this.mat[row][i] * m.mat[i][col];
                }
                d.mat[row][col] = dot;
            }
        }
        return d;
    }

    public MatrixN{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    @Override
    public MatrixN{{ E }} div(final {{ e }} a) {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = this.mat[row][col] / a;
            }
        }
        return d;
    }

    public MatrixN{{ E }} div(final MatrixN{{ E }} m) {
        return this.mul(m.invert());
    }

    public MatrixN{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow(({{ e }}) pow);
    }

    @Override
    public MatrixN{{ E }} pow(final {{ e }} pow) {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = ({{ e }}) Math.pow(this.mat[row][col], pow);
            }
        }
        return d;
    }

    public MatrixN{{ E }} translate(final VectorN{{ E }} v) {
        return this.translate(v.toArray());
    }

    public MatrixN{{ E }} translate(final {{ e }}... v) {
        return MatrixN{{ E }}.createTranslation(v).mul(this);
    }

    public MatrixN{{ E }} scale(final VectorN{{ E }} v) {
        return this.scale(v.toArray());
    }

    public MatrixN{{ E }} scale(final {{ e }}... v) {
        return MatrixN{{ E }}.createScaling(v).mul(this);
    }

    public MatrixN{{ E }} rotate(final Complex{{ E }} rot) {
        return MatrixN{{ E }}.createRotation(this.size(), rot).mul(this);
    }

    public MatrixN{{ E }} rotate(final Quaternion{{ E }} rot) {
        return MatrixN{{ E }}.createRotation(this.size(), rot).mul(this);
    }

    public VectorN{{ E }} transform(final VectorN{{ E }} v) {
        return this.transform(v.toArray());
    }

    public VectorN{{ E }} transform(final {{ e }}... vec) {
        final int size = this.size();
        if (size != vec.length) {
            throw new IllegalArgumentException("Matrix and vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            {{ e }} dot = 0;
            for (int col = 0; col < size; col++) {
                dot += this.mat[row][col] * vec[col];
            }
            d.set(row, dot);
        }
        return d;
    }

    @Override
    public MatrixN{{ E }} floor() {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = GenericMath.floor(this.mat[row][col]);
            }
        }
        return d;
    }

    @Override
    public MatrixN{{ E }} ceil() {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = ({{ e }}) Math.ceil(this.mat[row][col]);
            }
        }
        return d;
    }

    @Override
    public MatrixN{{ E }} round() {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = Math.round(this.mat[row][col]);
            }
        }
        return d;
    }

    @Override
    public MatrixN{{ E }} abs() {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = Math.abs(this.mat[row][col]);
            }
        }
        return d;
    }

    @Override
    public MatrixN{{ E }} negate() {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = -this.mat[row][col];
            }
        }
        return d;
    }

    @Override
    public MatrixN{{ E }} transpose() {
        final int size = this.size();
        final MatrixN{{ E }} d = new MatrixN{{ E }}(size);
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                d.mat[row][col] = this.mat[col][row];
            }
        }
        return d;
    }

    @Override
    public {{ e }} trace() {
        final int size = this.size();
        {{ e }} trace = 0;
        for (int rowCol = 0; rowCol < size; rowCol++) {
            trace += this.mat[rowCol][rowCol];
        }
        return trace;
    }

    @Override
    public {{ e }} determinant() {
        final int size = this.size();
        final {{ e }}[][] m = MatrixN{{ E }}.deepClone(this.mat);
        {{ e }} det;
        for (int i = 0; i < size - 1; i++) {
            for (int col = i + 1; col < size; col++) {
                det = m[i][i] < {{ Eeps }} ? 0 : m[i][col] / m[i][i];
                for (int row = i; row < size; row++) {
                    m[row][col] -= det * m[row][i];
                }
            }
        }
        det = 1;
        for (int i = 0; i < size; i++) {
            det *= m[i][i];
        }
        return det;
    }

    @Override
    public MatrixN{{ E }} invert() {
        if (Math.abs(determinant()) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot inverse a matrix with a zero determinant");
        }
        final int size = this.size();
        final AugmentedMatrixN augMat = new AugmentedMatrixN(this);
        final int augmentedSize = augMat.getAugmentedSize();
        for (int i = 0; i < size; i++) {
            for (int row = 0; row < size; row++) {
                if (i != row) {
                    final {{ e }} ratio = augMat.get(row, i) / augMat.get(i, i);
                    for (int col = 0; col < augmentedSize; col++) {
                        augMat.set(row, col, augMat.get(row, col) - ratio * augMat.get(i, col));
                    }
                }
            }
        }
        for (int row = 0; row < size; row++) {
            final {{ e }} div = augMat.get(row, row);
            for (int col = 0; col < augmentedSize; col++) {
                augMat.set(row, col, augMat.get(row, col) / div);
            }
        }
        return augMat.getAugmentation();
    }

    public Matrix2{{ E }} toMatrix2() {
        return new Matrix2{{ E }}(this);
    }

    public Matrix3{{ E }} toMatrix3() {
        return new Matrix3{{ E }}(this);
    }

    public Matrix4{{ E }} toMatrix4() {
        return new Matrix4{{ E }}(this);
    }

    public {{ e }}[] toArray() {
        return toArray(false);
    }

    @Override
    public MatrixNf toFloat() {
        final int size = this.size();
        final float[] m = new float[size * size];
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                m[col + row * size] = (float) get(row, col);
            }
        }
        return new MatrixNf(m);
    }

    @Override
    public MatrixNd toDouble() {
        final int size = this.size();
        final double[] m = new double[size * size];
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                m[col + row * size] = (double) get(row, col);
            }
        }
        return new MatrixNd(m);
    }

    @Override
    public {{ e }}[] toArray(boolean columnMajor) {
        final int size = this.size();
        final {{ e }}[] array = new {{ e }}[size * size];
        if (columnMajor) {
            for (int col = 0; col < size; col++) {
                for (int row = 0; row < size; row++) {
                    array[row + col * size] = this.mat[row][col];
                }
            }
        } else {
            for (int row = 0; row < size; row++) {
                System.arraycopy(mat[row], 0, array, row * size, size);
            }
        }
        return array;
    }

    @Override
    public String toString() {
        final int size = this.size();
        final StringBuilder builder = new StringBuilder();
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                builder.append(this.mat[row][col]);
                if (col < size - 1) {
                    builder.append(' ');
                }
            }
            if (row < size - 1) {
                builder.append('\n');
            }
        }
        return builder.toString();
    }

    @Override
    public boolean equals(final Object other) {
        if (other == this) {
            return true;
        }
        if (!(other instanceof MatrixN{{ E }})) {
            return false;
        }
        return Arrays.deepEquals(mat, ((MatrixN{{ E }}) other).mat);
    }

    @Override
    public int hashCode() {
        return 79 * 5 + Arrays.deepHashCode(mat);
    }

    @Override
    public MatrixN{{ E }} clone() {
        return new MatrixN{{ E }}(this);
    }

    public static MatrixN{{ E }} createScaling(VectorN{{ E }} v) {
        return MatrixN{{ E }}.createScaling(v.toArray());
    }

    public static MatrixN{{ E }} createScaling(final {{ e }}... vec) {
        final int size = vec.length;
        final MatrixN{{ E }} m = new MatrixN{{ E }}(size);
        for (int rowCol = 0; rowCol < size; rowCol++) {
            m.set(rowCol, rowCol, vec[rowCol]);
        }
        return m;
    }

    public static MatrixN{{ E }} createTranslation(final VectorN{{ E }} v) {
        return MatrixN{{ E }}.createTranslation(v.toArray());
    }

    public static MatrixN{{ E }} createTranslation(final {{ e }}... vec) {
        final int size = vec.length;
        final MatrixN{{ E }} m = new MatrixN{{ E }}(size + 1);
        for (int row = 0; row < size; row++) {
            m.set(row, size, vec[row]);
        }
        return m;
    }

    public static MatrixN{{ E }} createRotation(final int size, Complex{{ E }} rot) {
        if (size < 2) {
            throw new IllegalArgumentException("Minimum matrix size is 2");
        }
        final MatrixN{{ E }} m = new MatrixN{{ E }}(size);
        rot = rot.normalize();
        m.set(0, 0, rot.x());
        m.set(0, 1, -rot.y());
        m.set(1, 0, rot.y());
        m.set(1, 1, rot.x());
        return m;
    }

    public static MatrixN{{ E }} createRotation(final int size, Quaternion{{ E }} rot) {
        if (size < 3) {
            throw new IllegalArgumentException("Minimum matrix size is 3");
        }
        final MatrixN{{ E }} m = new MatrixN{{ E }}(size);
        rot = rot.normalize();
        m.set(0, 0, 1 - 2 * rot.y() * rot.y() - 2 * rot.z() * rot.z());
        m.set(0, 1, 2 * rot.x() * rot.y() - 2 * rot.w() * rot.z());
        m.set(0, 2, 2 * rot.x() * rot.z() + 2 * rot.w() * rot.y());
        m.set(1, 0, 2 * rot.x() * rot.y() + 2 * rot.w() * rot.z());
        m.set(1, 1, 1 - 2 * rot.x() * rot.x() - 2 * rot.z() * rot.z());
        m.set(1, 2, 2 * rot.y() * rot.z() - 2 * rot.w() * rot.x());
        m.set(2, 0, 2 * rot.x() * rot.z() - 2 * rot.w() * rot.y());
        m.set(2, 1, 2 * rot.y() * rot.z() + 2 * rot.x() * rot.w());
        m.set(2, 2, 1 - 2 * rot.x() * rot.x() - 2 * rot.y() * rot.y());
        return m;
    }

    /**
     * Creates a "look at" matrix for the given eye point.
     *
     * @param size The size of the matrix, minimum of 4
     * @param eye The position of the camera
     * @param at The point that the camera is looking at
     * @param up The "up" vector
     * @return A rotational transform that corresponds to a camera looking at the given point
     */
    public static MatrixN{{ E }} createLookAt(final int size, final Vector3{{ E }} eye, final Vector3{{ E }} at, Vector3{{ E }} up) {
        if (size < 4) {
            throw new IllegalArgumentException("Minimum matrix size is 4");
        }
        final Vector3{{ E }} f = at.sub(eye).normalize();
        up = up.normalize();
        final Vector3{{ E }} s = f.cross(up).normalize();
        final Vector3{{ E }} u = s.cross(f).normalize();
        final MatrixN{{ E }} mat = new MatrixN{{ E }}(size);
        mat.set(0, 0, s.x());
        mat.set(0, 1, s.y());
        mat.set(0, 2, s.z());
        mat.set(1, 0, u.x());
        mat.set(1, 1, u.y());
        mat.set(1, 2, u.z());
        mat.set(2, 0, -f.x());
        mat.set(2, 1, -f.y());
        mat.set(2, 2, -f.z());
        return mat.translate(eye.mul(-1).toVectorN());
    }

    /**
     * Creates a perspective projection matrix with the given (x) FOV, aspect, near and far planes
     *
     * @param size The size of the matrix, minimum of 4
     * @param fov The field of view in the x direction
     * @param aspect The aspect ratio, usually width/height
     * @param near The near plane, cannot be 0
     * @param far the far plane, zFar cannot equal zNear
     * @return A perspective projection matrix built from the given values
     */
    public static MatrixN{{ E }} createPerspective(
        final int size,
        final {{ EOverload }} fov,
        final {{ EOverload }} aspect,
        final {{ EOverload }} near,
        final {{ EOverload }} far
    ) {
        return MatrixN{{ E }}.createPerspective(size, ({{ e }}) fov, ({{ e }}) aspect, ({{ e }}) near, ({{ e }}) far);
    }

    /**
     * Creates a perspective projection matrix with the given (x) FOV, aspect, near and far planes
     *
     * @param size The size of the matrix, minimum of 4
     * @param fov The field of view in the x direction
     * @param aspect The aspect ratio, usually width/height
     * @param near The near plane, cannot be 0
     * @param far the far plane, zFar cannot equal zNear
     * @return A perspective projection matrix built from the given values
     */
    public static MatrixN{{ E }} createPerspective(final int size, final {{ e }} fov, final {{ e }} aspect, final {{ e }} near, final {{ e }} far) {
        if (size < 4) {
            throw new IllegalArgumentException("Minimum matrix size is 4");
        }
        final MatrixN{{ E }} perspective = new MatrixN{{ E }}(size);
        final {{ e }} scale = 1 / TrigMath.tan(fov * ({{ e }}) TrigMath.HALF_DEG_TO_RAD);
        perspective.set(0, 0, scale / aspect);
        perspective.set(1, 1, scale);
        perspective.set(2, 2, (far + near) / (near - far));
        perspective.set(2, 3, 2 * far * near / (near - far));
        perspective.set(3, 2, -1);
        perspective.set(3, 3, 0);
        return perspective;
    }

    /**
     * Creates an orthographic viewing frustum built from the provided values
     *
     * @param size The size of the matrix, minimum of 4
     * @param right the right most plane of the viewing frustum
     * @param left the left most plane of the viewing frustum
     * @param top the top plane of the viewing frustum
     * @param bottom the bottom plane of the viewing frustum
     * @param near the near plane of the viewing frustum
     * @param far the far plane of the viewing frustum
     * @return A viewing frustum built from the provided values
     */
    public static MatrixN{{ E }} createOrthographic(
        final int size,
        final {{ EOverload }} right,
        final {{ EOverload }} left,
        final {{ EOverload }} top,
        final {{ EOverload }} bottom,
        final {{ EOverload }} near,
        final {{ EOverload }} far
    ) {
        return MatrixN{{ E }}.createOrthographic(
            size,
            ({{ e }}) right,
            ({{ e }}) left,
            ({{ e }}) top,
            ({{ e }}) bottom,
            ({{ e }}) near,
            ({{ e }})
            far
        );
    }

    /**
     * Creates an orthographic viewing frustum built from the provided values
     *
     * @param size The size of the matrix, minimum of 4
     * @param right the right most plane of the viewing frustum
     * @param left the left most plane of the viewing frustum
     * @param top the top plane of the viewing frustum
     * @param bottom the bottom plane of the viewing frustum
     * @param near the near plane of the viewing frustum
     * @param far the far plane of the viewing frustum
     * @return A viewing frustum built from the provided values
     */
    public static MatrixN{{ E }} createOrthographic(
        final int size,
        final {{ e }} right,
        final {{ e }} left,
        final {{ e }} top,
        final {{ e }} bottom,
        final {{ e }} near,
        final {{ e }} far
    ) {
        if (size < 4) {
            throw new IllegalArgumentException("Minimum matrix size is 4");
        }
        final MatrixN{{ E }} orthographic = new MatrixN{{ E }}(size);
        orthographic.set(0, 0, 2 / (right - left));
        orthographic.set(1, 1, 2 / (top - bottom));
        orthographic.set(2, 2, -2 / (far - near));
        orthographic.set(0, 3, -(right + left) / (right - left));
        orthographic.set(1, 3, -(top + bottom) / (top - bottom));
        orthographic.set(2, 3, -(far + near) / (far - near));
        return orthographic;
    }

    private static {{ e }}[][] deepClone(final {{ e }}[][] array) {
        final int size = array.length;
        final {{ e }}[][] clone = array.clone();
        for (int i = 0; i < size; i++) {
            clone[i] = array[i].clone();
        }
        return clone;
    }

    private static class ImmutableIdentityMatrixN extends MatrixN{{ E }} {

        private static final long serialVersionUID = 1L;

        public ImmutableIdentityMatrixN(final int size) {
            super(size);
        }

        @Override
        public void set(final int row, final int col, final {{ e }} val) {
            throw new UnsupportedOperationException("You may not alter this matrix");
        }

        @Override
        public void setZero() {
            throw new UnsupportedOperationException("You may not alter this matrix");
        }

    }

    private static class AugmentedMatrixN {

        private final MatrixN{{ E }} mat;
        private final MatrixN{{ E }} aug;
        private final int size;

        private AugmentedMatrixN(final MatrixN{{ E }} mat) {
            this.mat = mat.clone();
            this.size = mat.size();
            this.aug = new MatrixN{{ E }}(this.size);
        }

        private MatrixN{{ E }} getAugmentation() {
            return this.aug;
        }

        private int getAugmentedSize() {
            return this.size * 2;
        }

        private {{ e }} get(final int row, final int col) {
            if (col < this.size) {
                return this.mat.get(row, col);
            } else {
                return this.aug.get(row, col - this.size);
            }
        }

        private void set(final int row, final int col, {{ e }} val) {
            if (col < this.size) {
                this.mat.set(row, col, val);
            } else {
                this.aug.set(row, col - this.size, val);
            }
        }

    }

}
