package org.spongepowered.math.matrix;

import java.io.Serializable;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};

@Immutable
public final class Matrix3{{ E }} implements Matrix{{ E }}, Serializable {

    private static final long serialVersionUID = 1;
    public static final Matrix3{{ E }} ZERO = new Matrix3{{ E }}(
        0, 0, 0,
        0, 0, 0,
        0, 0, 0
    );
    public static final Matrix3{{ E }} IDENTITY = new Matrix3{{ E }}();
    private final {{ e }} m00, m01, m02;
    private final {{ e }} m10, m11, m12;
    private final {{ e }} m20, m21, m22;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    public Matrix3{{ E }}() {
        this(
            1, 0, 0,
            0, 1, 0,
            0, 0, 1
        );
    }

    public Matrix3{{ E }}(final Matrix2{{ E }} m) {
        this(
            m.get(0, 0), m.get(0, 1), 0,
            m.get(1, 0), m.get(1, 1), 0,
            0, 0, 0
        );
    }

    public Matrix3{{ E }}(final Matrix4{{ E }} m) {
        this(
            m.get(0, 0), m.get(0, 1), m.get(0, 2),
            m.get(1, 0), m.get(1, 1), m.get(1, 2),
            m.get(2, 0), m.get(2, 1), m.get(2, 2)
        );
    }

    public Matrix3{{ E }}(final MatrixN{{ E }} m) {
        this.m00 = m.get(0, 0);
        this.m01 = m.get(0, 1);
        this.m10 = m.get(1, 0);
        this.m11 = m.get(1, 1);
        if (m.size() > 2) {
            this.m02 = m.get(0, 2);
            this.m12 = m.get(1, 2);
            this.m20 = m.get(2, 0);
            this.m21 = m.get(2, 1);
            this.m22 = m.get(2, 2);
        } else {
            this.m02 = 0;
            this.m12 = 0;
            this.m20 = 0;
            this.m21 = 0;
            this.m22 = 0;
        }
    }

    public Matrix3{{ E }}(
        final {{ EOverload }} m00, final {{ EOverload }} m01, final {{ EOverload }} m02,
        final {{ EOverload }} m10, final {{ EOverload }} m11, final {{ EOverload }} m12,
        final {{ EOverload }} m20, final {{ EOverload }} m21, final {{ EOverload }} m22
    ) {
        this(
            ({{ e }}) m00, ({{ e }}) m01, ({{ e }}) m02,
            ({{ e }}) m10, ({{ e }}) m11, ({{ e }}) m12,
            ({{ e }}) m20, ({{ e }}) m21, ({{ e }}) m22
        );
    }

    public Matrix3{{ E }}(
        final {{ e }} m00, final {{ e }} m01, final {{ e }} m02,
        final {{ e }} m10, final {{ e }} m11, final {{ e }} m12,
        final {{ e }} m20, final {{ e }} m21, final {{ e }} m22
    ) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
    }

    @Override
    public {{ e }} get(final int row, final int col) {
        switch (row) {
        case 0:
            switch (col) {
            case 0:
                return this.m00;
            case 1:
                return this.m01;
            case 2:
                return this.m02;
            }
            break;
        case 1:
            switch (col) {
            case 0:
                return this.m10;
            case 1:
                return this.m11;
            case 2:
                return this.m12;
            }
            break;
        case 2:
            switch (col) {
            case 0:
                return this.m20;
            case 1:
                return this.m21;
            case 2:
                return this.m22;
            }
            break;
        }
        throw new IllegalArgumentException(
                (row < 0 || row > 2 ? "row must be greater than or equal to zero and smaller than 3. " : "") +
                (col < 0 || col > 2 ? "col must be greater than or equal to zero and smaller than 3." : ""));
    }

    @Override
    public Vector3{{ E }} row(final int row) {
        return new Vector3{{ E }}(this.get(row, 0), this.get(row, 1), this.get(row, 2));
    }

    @Override
    public Vector3{{ E }} column(final int col) {
        return new Vector3{{ E }}(this.get(0, col), this.get(1, col), this.get(2, col));
    }

    public Matrix3{{ E }} add(final Matrix3{{ E }} m) {
        return new Matrix3{{ E }}(
            this.m00 + m.m00, this.m01 + m.m01, this.m02 + m.m02,
            this.m10 + m.m10, this.m11 + m.m11, this.m12 + m.m12,
            this.m20 + m.m20, this.m21 + m.m21, this.m22 + m.m22
        );
    }

    public Matrix3{{ E }} sub(final Matrix3{{ E }} m) {
        return new Matrix3{{ E }}(
            this.m00 - m.m00, this.m01 - m.m01, this.m02 - m.m02,
            this.m10 - m.m10, this.m11 - m.m11, this.m12 - m.m12,
            this.m20 - m.m20, this.m21 - m.m21, this.m22 - m.m22
        );
    }

    public Matrix3{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    @Override
    public Matrix3{{ E }} mul(final {{ e }} a) {
        return new Matrix3{{ E }}(
            this.m00 * a, this.m01 * a, this.m02 * a,
            this.m10 * a, this.m11 * a, this.m12 * a,
            this.m20 * a, this.m21 * a, this.m22 * a
        );
    }

    public Matrix3{{ E }} mul(final Matrix3{{ E }} m) {
        return new Matrix3{{ E }}(
            this.m00 * m.m00 + this.m01 * m.m10 + this.m02 * m.m20, this.m00 * m.m01 + this.m01 * m.m11 + this.m02 * m.m21,
            this.m00 * m.m02 + this.m01 * m.m12 + this.m02 * m.m22, this.m10 * m.m00 + this.m11 * m.m10 + this.m12 * m.m20,
            this.m10 * m.m01 + this.m11 * m.m11 + this.m12 * m.m21, this.m10 * m.m02 + this.m11 * m.m12 + this.m12 * m.m22,
            this.m20 * m.m00 + this.m21 * m.m10 + this.m22 * m.m20, this.m20 * m.m01 + this.m21 * m.m11 + this.m22 * m.m21,
            this.m20 * m.m02 + this.m21 * m.m12 + this.m22 * m.m22
        );
    }

    public Matrix3{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    @Override
    public Matrix3{{ E }} div(final {{ e }} a) {
        return new Matrix3{{ E }}(
            this.m00 / a, this.m01 / a, this.m02 / a,
            this.m10 / a, this.m11 / a, this.m12 / a,
            this.m20 / a, this.m21 / a, this.m22 / a
        );
    }

    public Matrix3{{ E }} div(final Matrix3{{ E }} m) {
        return this.mul(m.invert());
    }

    public Matrix3{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow(({{ e }}) pow);
    }

    @Override
    public Matrix3{{ E }} pow(final {{ e }} pow) {
        return new Matrix3{{ E }}(
            Math.pow(this.m00, pow), Math.pow(this.m01, pow), Math.pow(this.m02, pow),
            Math.pow(this.m10, pow), Math.pow(this.m11, pow), Math.pow(this.m12, pow),
            Math.pow(this.m20, pow), Math.pow(this.m21, pow), Math.pow(this.m22, pow)
        );
    }

    public Matrix3{{ E }} translate(final Vector2{{ E }} v) {
        return this.translate(v.x(), v.y());
    }

    public Matrix3{{ E }} translate(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.translate(({{ e }}) x, ({{ e }}) y);
    }

    public Matrix3{{ E }} translate(final {{ e }} x, final {{ e }} y) {
        return Matrix3{{ E }}.createTranslation(x, y).mul(this);
    }

    public Matrix3{{ E }} scale(final {{ EOverload }} scale) {
        return this.scale(({{ e }}) scale);
    }

    public Matrix3{{ E }} scale(final {{ e }} scale) {
        return this.scale(scale, scale, scale);
    }

    public Matrix3{{ E }} scale(final Vector3{{ E }} v) {
        return this.scale(v.x(), v.y(), v.z());
    }

    public Matrix3{{ E }} scale(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return this.scale(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    public Matrix3{{ E }} scale(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return Matrix3{{ E }}.createScaling(x, y, z).mul(this);
    }

    public Matrix3{{ E }} rotate(final Complex{{ E }} rot) {
        return Matrix3{{ E }}.createRotation(rot).mul(this);
    }

    public Matrix3{{ E }} rotate(final Quaternion{{ E }} rot) {
        return Matrix3{{ E }}.createRotation(rot).mul(this);
    }

    public Vector3{{ E }} transform(final Vector3{{ E }} v) {
        return this.transform(v.x(), v.y(), v.z());
    }

    public Vector3{{ E }} transform(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return this.transform(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    public Vector3{{ E }} transform(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return new Vector3{{ E }}(
            this.m00 * x + this.m01 * y + this.m02 * z,
            this.m10 * x + this.m11 * y + this.m12 * z,
            this.m20 * x + this.m21 * y + this.m22 * z
        );
    }

    @Override
    public Matrix3{{ E }} floor() {
        return new Matrix3{{ E }}(
            GenericMath.floor(this.m00), GenericMath.floor(this.m01), GenericMath.floor(this.m02),
            GenericMath.floor(this.m10), GenericMath.floor(this.m11), GenericMath.floor(this.m12),
            GenericMath.floor(this.m20), GenericMath.floor(this.m21), GenericMath.floor(this.m22)
        );
    }

    @Override
    public Matrix3{{ E }} ceil() {
        return new Matrix3{{ E }}(
            Math.ceil(this.m00), Math.ceil(this.m01), Math.ceil(this.m02),
            Math.ceil(this.m10), Math.ceil(this.m11), Math.ceil(this.m12),
            Math.ceil(this.m20), Math.ceil(this.m21), Math.ceil(this.m22)
        );
    }

    @Override
    public Matrix3{{ E }} round() {
        return new Matrix3{{ E }}(
            Math.round(this.m00), Math.round(this.m01), Math.round(this.m02),
            Math.round(this.m10), Math.round(this.m11), Math.round(this.m12),
            Math.round(this.m20), Math.round(this.m21), Math.round(this.m22)
        );
    }

    @Override
    public Matrix3{{ E }} abs() {
        return new Matrix3{{ E }}(
            Math.abs(this.m00), Math.abs(this.m01), Math.abs(this.m02),
            Math.abs(this.m10), Math.abs(this.m11), Math.abs(this.m12),
            Math.abs(this.m20), Math.abs(this.m21), Math.abs(this.m22)
        );
    }

    @Override
    public Matrix3{{ E }} negate() {
        return new Matrix3{{ E }}(
            -this.m00, -this.m01, -this.m02,
            -this.m10, -this.m11, -this.m12,
            -this.m20, -this.m21, -this.m22
        );
    }

    @Override
    public Matrix3{{ E }} transpose() {
        return new Matrix3{{ E }}(
            this.m00, this.m10, this.m20,
            this.m01, this.m11, this.m21,
            this.m02, this.m12, this.m22
        );
    }

    @Override
    public {{ e }} trace() {
        return this.m00 + this.m11 + this.m22;
    }

    @Override
    public {{ e }} determinant() {
        return this.m00 * (this.m11 * this.m22 - this.m12 * this.m21)
            - this.m01 * (this.m10 * this.m22 - this.m12 * this.m20)
            + this.m02 * (this.m10 * this.m21 - this.m11 * this.m20);
    }

    @Override
    public Matrix3{{ E }} invert() {
        final {{ e }} det = this.determinant();
        if (Math.abs(det) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot inverse a matrix with a zero determinant");
        }
        return new Matrix3{{ E }}(
            (this.m11 * this.m22 - this.m21 * this.m12) / det, -(this.m01 * this.m22 - this.m21 * this.m02) / det, (this.m01 * this.m12 - this.m02 * this.m11) / det,
            -(this.m10 * this.m22 - this.m20 * this.m12) / det, (this.m00 * this.m22 - this.m20 * this.m02) / det, -(this.m00 * this.m12 - this.m10 * this.m02) / det,
            (this.m10 * this.m21 - this.m20 * this.m11) / det, -(this.m00 * this.m21 - this.m20 * this.m01) / det, (this.m00 * this.m11 - this.m01 * this.m10) / det
        );
    }

    public Matrix2{{ E }} toMatrix2() {
        return new Matrix2{{ E }}(this);
    }

    public Matrix4{{ E }} toMatrix4() {
        return new Matrix4{{ E }}(this);
    }

    public MatrixN{{ E }} toMatrixN() {
        return new MatrixN{{ E }}(this);
    }

    public {{ e }}[] toArray() {
        return this.toArray(false);
    }

    @Override
    public {{ e }}[] toArray(final boolean columnMajor) {
        if (columnMajor) {
            return new {{ e }}[]{
                this.m00, this.m10, this.m20,
                this.m01, this.m11, this.m21,
                this.m02, this.m12, this.m22
            };
        } else {
            return new {{ e }}[]{
                this.m00, this.m01, this.m02,
                this.m10, this.m11, this.m12,
                this.m20, this.m21, this.m22
            };
        }
    }

    @Override
    public Matrix3f toFloat() {
        return new Matrix3f(
            this.m00, this.m01, this.m02,
            this.m10, this.m11, this.m12,
            this.m20, this.m21, this.m22
        );
    }

    @Override
    public Matrix3d toDouble() {
        return new Matrix3d(
            this.m00, this.m01, this.m02,
            this.m10, this.m11, this.m12,
            this.m20, this.m21, this.m22
        );
    }

    @Override
    public String toString() {
        return this.m00 + " " + this.m01 + " " + this.m02 + "\n"
                + this.m10 + " " + this.m11 + " " + this.m12 + "\n"
                + this.m20 + " " + this.m21 + " " + this.m22 + "\n";
    }

    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Matrix3{{ E }})) {
            return false;
        }
        final Matrix3{{ E }} that = (Matrix3{{ E }}) other;
        if ({{ ET }}.compare(that.m00, this.m00) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m01, this.m01) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m02, this.m02) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m10, this.m10) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m11, this.m11) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m12, this.m12) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m20, this.m20) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m21, this.m21) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m22, this.m22) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            int result = (this.m00 != +0.0f ? {{ ET }}.hashCode(this.m00) : 0);
            result = 31 * result + (this.m01 != +0.0f ? {{ ET }}.hashCode(this.m01) : 0);
            result = 31 * result + (this.m02 != +0.0f ? {{ ET }}.hashCode(this.m02) : 0);
            result = 31 * result + (this.m10 != +0.0f ? {{ ET }}.hashCode(this.m10) : 0);
            result = 31 * result + (this.m11 != +0.0f ? {{ ET }}.hashCode(this.m11) : 0);
            result = 31 * result + (this.m12 != +0.0f ? {{ ET }}.hashCode(this.m12) : 0);
            result = 31 * result + (this.m20 != +0.0f ? {{ ET }}.hashCode(this.m20) : 0);
            result = 31 * result + (this.m21 != +0.0f ? {{ ET }}.hashCode(this.m21) : 0);
            this.hashCode = 31 * result + (this.m22 != +0.0f ? {{ ET }}.hashCode(this.m22) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    public static Matrix3{{ E }} from(final {{ e }} n) {
         return n == 0 ? Matrix3{{ E }}.ZERO : new Matrix3{{ E }}(n, n, n, n, n, n, n, n, n);
    }

    public static Matrix3{{ E }} from(final {{ e }} m00, final {{ e }} m01, final {{ e }} m02,
                                final {{ e }} m10, final {{ e }} m11, final {{ e }} m12,
                                final {{ e }} m20, final {{ e }} m21, final {{ e }} m22) {
         return m00 == 0 && m01 == 0 && m02 == 0
             && m10 == 0 && m11 == 0 && m12 == 0
             && m20 == 0 && m21 == 0 && m22 == 0
         ? Matrix3{{ E }}.ZERO : new Matrix3{{ E }}(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }

    public static Matrix3{{ E }} fromDiagonal(final {{ e }} m00, final {{ e }} m11, final {{ e }} m22) {
         return m00 == 0 && m11 == 0 && m22 == 0 ? Matrix3{{ E }}.ZERO : new Matrix3{{ E }}(m00, 0, 0, 0, m11, 0, 0, 0, m22);
    }

    public static Matrix3{{ E }} createScaling(final {{ EOverload }} scale) {
        return Matrix3{{ E }}.createScaling(({{ e }}) scale);
    }

    public static Matrix3{{ E }} createScaling(final {{ e }} scale) {
        return Matrix3{{ E }}.createScaling(scale, scale, scale);
    }

    public static Matrix3{{ E }} createScaling(final Vector3{{ E }} v) {
        return Matrix3{{ E }}.createScaling(v.x(), v.y(), v.z());
    }

    public static Matrix3{{ E }} createScaling(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return Matrix3{{ E }}.createScaling(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    public static Matrix3{{ E }} createScaling(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return new Matrix3{{ E }}(
            x, 0, 0,
            0, y, 0,
            0, 0, z
        );
    }

    public static Matrix3{{ E }} createTranslation(final Vector2{{ E }} v) {
        return Matrix3{{ E }}.createTranslation(v.x(), v.y());
    }

    public static Matrix3{{ E }} createTranslation(final {{ EOverload }} x, final {{ EOverload }} y) {
        return Matrix3{{ E }}.createTranslation(({{ e }}) x, ({{ e }}) y);
    }

    public static Matrix3{{ E }} createTranslation(final {{ e }} x, final {{ e }} y) {
        return new Matrix3{{ E }}(
            1, 0, x,
            0, 1, y,
            0, 0, 1
        );
    }

    public static Matrix3{{ E }} createRotation(Complex{{ E }} rot) {
        rot = rot.normalize();
        return new Matrix3{{ E }}(
            rot.x(), -rot.y(), 0,
            rot.y(), rot.x(), 0,
            0, 0, 1
        );
    }

    public static Matrix3{{ E }} createRotation(Quaternion{{ E }} rot) {
        rot = rot.normalize();
        return new Matrix3{{ E }}(
            1 - 2 * rot.y() * rot.y() - 2 * rot.z() * rot.z(),
            2 * rot.x() * rot.y() - 2 * rot.w() * rot.z(),
            2 * rot.x() * rot.z() + 2 * rot.w() * rot.y(),
            2 * rot.x() * rot.y() + 2 * rot.w() * rot.z(),
            1 - 2 * rot.x() * rot.x() - 2 * rot.z() * rot.z(),
            2 * rot.y() * rot.z() - 2 * rot.w() * rot.x(),
            2 * rot.x() * rot.z() - 2 * rot.w() * rot.y(),
            2 * rot.y() * rot.z() + 2 * rot.x() * rot.w(),
            1 - 2 * rot.x() * rot.x() - 2 * rot.y() * rot.y()
        );
    }

}
