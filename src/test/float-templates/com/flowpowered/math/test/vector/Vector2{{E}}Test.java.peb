package org.spongepowered.math.test.vector;

import java.util.Random;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.test.TestUtil{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector3i;
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class Vector2{{ E }}Test {

    @Test
    void testZero() {
        final Vector2{{ E }} vector = Vector2{{ E }}.ZERO;
        TestUtil{{ E }}.assertEquals(vector, 0, 0);
    }

    @Test
    void testCopyVector3Constructor() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(new Vector3{{ E }}(0, 1, 2));
        TestUtil{{ E }}.assertEquals(vector, 0, 1);
    }

    @Test
    void testCopyVector4Constructor() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(new Vector4{{ E }}(0, 1, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, 0, 1);
    }

    @Test
    void testCopyVectorNConstructor() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(new VectorN{{ E }}(0, 1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(vector, 0, 1);
    }

    @Test
    void testDoubleComponentsConstructor() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(0.5, 1.7);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.5, ({{ e }}) 1.7);
    }

    @Test
    void testFloatComponentsConstructor() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(0.5f, 1.7f);
        TestUtil{{ E }}.assertEquals(vector, 0.5f, 1.7f);
    }

    @Test
    void testGetters() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(({{ e }}) 0.5, ({{ e }}) 1.7);
        TestUtil{{ E }}.assertEquals(vector.x(), ({{ e }}) 0.5);
        TestUtil{{ E }}.assertEquals(vector.y(), ({{ e }}) 1.7);
    }

    @Test
    void testFloorGetters() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(0.5, 1.7);
        TestUtil{{ E }}.assertEquals(vector.floorX(), 0);
        TestUtil{{ E }}.assertEquals(vector.floorY(), 1);
    }

    @Test
    void testVector2Addition() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(0, 1).add(new Vector2{{ E }}(5.5, -0.5));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5.5, ({{ e }}) 0.5);
    }

    @Test
    void testDoubleComponentsAddition() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(0, 1).add(5.5, -0.5);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5.5, ({{ e }}) 0.5);
    }

    @Test
    void testFloatComponentsAddition() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(0, 1).add(5.5f, -0.5f);
        TestUtil{{ E }}.assertEquals(vector, 5.5f, 0.5f);
    }

    @Test
    void testVector2Subtraction() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(10, 5).sub(new Vector2{{ E }}(9, 4.5));
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 0.5);
    }

    @Test
    void testDoubleComponentsSubtraction() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(10, 5).sub(9, 4.5);
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 0.5);
    }

    @Test
    void testFloatComponentsSubtraction() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(10, 5).sub(9f, 4.5f);
        TestUtil{{ E }}.assertEquals(vector, 1, 0.5f);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).mul(1.5);
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 4.5);
    }

    @Test
    void testFloatFactorMultiplication() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).mul(1.5f);
        TestUtil{{ E }}.assertEquals(vector, 3, 4.5f);
    }

    @Test
    void testVector2Multiplication() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).mul(new Vector2{{ E }}(1.5, 2.5));
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 7.5);
    }

    @Test
    void testDoubleComponentsMultiplication() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).mul(1.5, 2.5);
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 7.5);
    }

    @Test
    void testFloatComponentsMultiplication() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).mul(1.5f, 2.5f);
        TestUtil{{ E }}.assertEquals(vector, 3, 7.5f);
    }

    @Test
    void testDoubleFactorDivision() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).div(2d);
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 1.5);
    }

    @Test
    void testFloatFactorDivision() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).div(2);
        TestUtil{{ E }}.assertEquals(vector, 1, 1.5f);
    }

    @Test
    void testVector2Division() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).div(new Vector2{{ E }}(2, 4));
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 1.5);
    }

    @Test
    void testDoubleComponentsDivision() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).div(2d, 4d);
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 1.5);
    }

    @Test
    void testFloatComponentsDivision() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).div(2, 4);
        TestUtil{{ E }}.assertEquals(vector, 1f, 1.5f);
    }

    @Test
    void testVector2DotProduct() {
        {{ e }} f = new Vector2{{ E }}(2, 3).dot(new Vector2{{ E }}(4, 5));
        TestUtil{{ E }}.assertEquals(f, 23);
    }

    @Test
    void testDoubleComponentsDotProduct() {
        {{ e }} f = new Vector2{{ E }}(2, 3).dot(4d, 5d);
        TestUtil{{ E }}.assertEquals(f, 23);
    }

    @Test
    void testFloatComponentsDotProduct() {
        {{ e }} f = new Vector2{{ E }}(2, 3).dot(4, 5);
        TestUtil{{ E }}.assertEquals(f, 23);
    }

    @Test
    void testVector2Project() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).project(new Vector2{{ E }}(1, 1));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2.5, ({{ e }}) 2.5);
    }

    @Test
    void testDoubleComponentsProject() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).project(1d, 1d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2.5, ({{ e }}) 2.5);
    }

    @Test
    void testFloatComponentsProject() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 3).project(1, 1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2.5, ({{ e }}) 2.5);
    }

    @Test
    void testRaiseToFloatPower() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).pow(2);
        TestUtil{{ E }}.assertEquals(vector, 4, 36);
    }

    @Test
    void testRaiseToDoublePower() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).pow(2d);
        TestUtil{{ E }}.assertEquals(vector, 4, 36);
    }

    @Test
    void testCeiling() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2.5, 6.7).ceil();
        TestUtil{{ E }}.assertEquals(vector, 3, 7);
    }

    @Test
    void testFloor() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2.5, 6.7).floor();
        TestUtil{{ E }}.assertEquals(vector, 2, 6);
    }

    @Test
    void testRound() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2.2, 6.7).round();
        TestUtil{{ E }}.assertEquals(vector, 2, 7);
    }

    @Test
    void testAbsolute() {
        final Vector2{{ E }} vector1 = new Vector2{{ E }}(-2.5, -6.7).abs();
        TestUtil{{ E }}.assertEquals(vector1, ({{ e }}) 2.5, ({{ e }}) 6.7);
        final Vector2{{ E }} vector2 = new Vector2{{ E }}(2.5, 6.7).abs();
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) 2.5, ({{ e }}) 6.7);
    }

    @Test
    void testNegate() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2.2, -6.7).negate();
        TestUtil{{ E }}.assertEquals(vector, -({{ e }}) 2.2, ({{ e }}) 6.7);
    }

    @Test
    void testVector2Minimum() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).min(new Vector2{{ E }}(3, 4));
        TestUtil{{ E }}.assertEquals(vector, 2, 4);
    }

    @Test
    void testDoubleComponentsMinimum() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).min(3d, 4d);
        TestUtil{{ E }}.assertEquals(vector, 2, 4);
    }

    @Test
    void testFloatComponentsMinimum() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).min(3, 4);
        TestUtil{{ E }}.assertEquals(vector, 2, 4);
    }

    @Test
    void testVector2Maximum() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).max(new Vector2{{ E }}(3, 4));
        TestUtil{{ E }}.assertEquals(vector, 3, 6);
    }

    @Test
    void testDoubleComponentsMaximum() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).max(3d, 4d);
        TestUtil{{ E }}.assertEquals(vector, 3, 6);
    }

    @Test
    void testFloatComponentsMaximum() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 6).max(3, 4);
        TestUtil{{ E }}.assertEquals(vector, 3, 6);
    }

    @Test
    void testVector2DistanceSquared() {
        final {{ e }} f = new Vector2{{ E }}(2, 3).distanceSquared(new Vector2{{ E }}(4, 5));
        TestUtil{{ E }}.assertEquals(f, 8);
    }

    @Test
    void testDoubleComponentsDistanceSquared() {
        final {{ e }} f = new Vector2{{ E }}(2, 3).distanceSquared(4d, 5d);
        TestUtil{{ E }}.assertEquals(f, 8);
    }

    @Test
    void testFloatComponentsDistanceSquared() {
        final {{ e }} f = new Vector2{{ E }}(2, 3).distanceSquared(4, 5);
        TestUtil{{ E }}.assertEquals(f, 8);
    }

    @Test
    void testVector2Distance() {
        final {{ e }} f = new Vector2{{ E }}(4, 6).distance(new Vector2{{ E }}(7, 2));
        TestUtil{{ E }}.assertEquals(f, 5);
    }

    @Test
    void testDoubleComponentsDistance() {
        final {{ e }} f = new Vector2{{ E }}(4, 6).distance(7d, 2d);
        TestUtil{{ E }}.assertEquals(f, 5);
    }

    @Test
    void testFloatComponentsDistance() {
        final {{ e }} f = new Vector2{{ E }}(4, 6).distance(7, 2);
        TestUtil{{ E }}.assertEquals(f, 5);
    }

    @Test
    void testLength() {
        final {{ e }} f = new Vector2{{ E }}(3, 4).length();
        TestUtil{{ E }}.assertEquals(f, 5);
    }

    @Test
    void testLengthSquared() {
        final {{ e }} f = new Vector2{{ E }}(3, 4).lengthSquared();
        TestUtil{{ E }}.assertEquals(f, 25);
    }

    @Test
    void testNormalize() {
        final Vector2{{ E }} vector = new Vector2{{ E }}(2, 2).normalize();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        Assertions.assertThrows(ArithmeticException.class, () -> Vector2{{ E }}.ZERO.normalize());
    }

    @Test
    void testMinAxis() {
        final Vector2{{ E }} vector1 = new Vector2{{ E }}(1, 2);
        TestUtil{{ E }}.assertEquals(vector1.minAxis(), 0);
        final Vector2{{ E }} vector2 = new Vector2{{ E }}(2, 1);
        TestUtil{{ E }}.assertEquals(vector2.minAxis(), 1);
    }

    @Test
    void testMaxAxis() {
        final Vector2{{ E }} vector1 = new Vector2{{ E }}(2, 1);
        TestUtil{{ E }}.assertEquals(vector1.maxAxis(), 0);
        final Vector2{{ E }} vector2 = new Vector2{{ E }}(1, 2);
        TestUtil{{ E }}.assertEquals(vector2.maxAxis(), 1);
    }

    @Test
    void testConvertToVector3DefaultZ() {
        final Vector3{{ E }} vector = new Vector2{{ E }}(1, 2).toVector3();
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 0);
    }

    @Test
    void testConvertToVector3FloatZ() {
        final Vector3{{ E }} vector = new Vector2{{ E }}(1, 2).toVector3(3);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3);
    }

    @Test
    void testConvertToVector3DoubleZ() {
        final Vector3{{ E }} vector = new Vector2{{ E }}(1, 2).toVector3(3d);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3);
    }

    @Test
    void testConvertToVector4DefaultZW() {
        final Vector4{{ E }} vector = new Vector2{{ E }}(1, 2).toVector4();
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 0, 0);
    }

    @Test
    void testConvertToVector4FloatZW() {
        final Vector4{{ E }} vector = new Vector2{{ E }}(1, 2).toVector4(3, 4);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    void testConvertToVector4DoubleZW() {
        final Vector4{{ E }} vector = new Vector2{{ E }}(1, 2).toVector4(3d, 4d);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    void testConvertToVectorN() {
        final VectorN{{ E }} vector = new Vector2{{ E }}(1, 2).toVectorN();
        TestUtil{{ E }}.assertEquals(vector, 1, 2);
    }

    @Test
    void testConvertToArray() {
        final {{ e }}[] array = new Vector2{{ E }}(1, 2).toArray();
        TestUtil{{ E }}.assertEquals(array, 1, 2);
    }

    @Test
    void testComparison() {
        final int c1 = new Vector2{{ E }}(10, 20).compareTo(new Vector2{{ E }}(20, 20));
        Assertions.assertTrue(c1 < 0);
        final int c2 = new Vector2{{ E }}(10, 20).compareTo(new Vector2{{ E }}(10, 20));
        Assertions.assertEquals(0, c2);
        final int c3 = new Vector2{{ E }}(10, 20).compareTo(new Vector2{{ E }}(10, 10));
        Assertions.assertTrue(c3 > 0);
        final int c4 = new Vector2{{ E }}(0.2, 0.2).compareTo(new Vector2{{ E }}(0.1, 0.1));
        Assertions.assertTrue(c4 > 0);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new Vector2{{ E }}(122, 43).equals(new Vector2{{ E }}(122, 43)));
        Assertions.assertFalse(new Vector2{{ E }}(122, 43).equals(new Vector2{{ E }}(378, 95)));
    }

    @Test
    void testVectorFromN() {
        final Vector2{{ E }} vector = Vector2{{ E }}.from(1);
        TestUtil{{ E }}.assertEquals(vector, 1, 1);
    }

    @Test
    void testVectorFromXY() {
        final Vector2{{ E }} vector = Vector2{{ E }}.from(1, 2);
        TestUtil{{ E }}.assertEquals(vector, 1, 2);
    }

    @Test
    void testCreateDirectionFromRandom() {
        final Random random = new Random();
        for (int i = 0; i < 10; i++) {
            final Vector2{{ E }} vector = Vector2{{ E }}.createRandomDirection(random);
            TestUtil{{ E }}.assertEquals(vector.length(), 1);
        }
    }

    @Test
    void testCreateDirectionFromDoubleAngleDegrees() {
        final Vector2{{ E }} vector1 = Vector2{{ E }}.createDirectionDeg(0d);
        TestUtil{{ E }}.assertEquals(vector1, 1, 0);
        final Vector2{{ E }} vector2 = Vector2{{ E }}.createDirectionDeg(45d);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Vector2{{ E }} vector3 = Vector2{{ E }}.createDirectionDeg(90d);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1);
        final Vector2{{ E }} vector4 = Vector2{{ E }}.createDirectionDeg(180d);
        TestUtil{{ E }}.assertEquals(vector4, -1, 0);
        final Vector2{{ E }} vector5 = Vector2{{ E }}.createDirectionDeg(270d);
        TestUtil{{ E }}.assertEquals(vector5, 0, -1);
        final Vector2{{ E }} vector6 = Vector2{{ E }}.createDirectionDeg(360d);
        TestUtil{{ E }}.assertEquals(vector6, 1, 0);
    }

    @Test
    void testCreateDirectionFromFloatAngleDegrees() {
        final Vector2{{ E }} vector1 = Vector2{{ E }}.createDirectionDeg(0);
        TestUtil{{ E }}.assertEquals(vector1, 1, 0);
        final Vector2{{ E }} vector2 = Vector2{{ E }}.createDirectionDeg(45);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Vector2{{ E }} vector3 = Vector2{{ E }}.createDirectionDeg(90);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1);
        final Vector2{{ E }} vector4 = Vector2{{ E }}.createDirectionDeg(180);
        TestUtil{{ E }}.assertEquals(vector4, -1, 0);
        final Vector2{{ E }} vector5 = Vector2{{ E }}.createDirectionDeg(270);
        TestUtil{{ E }}.assertEquals(vector5, 0, -1);
        final Vector2{{ E }} vector6 = Vector2{{ E }}.createDirectionDeg(360);
        TestUtil{{ E }}.assertEquals(vector6, 1, 0);
    }

    @Test
    void testCreateDirectionFromDoubleAngleRadians() {
        final Vector2{{ E }} vector1 = Vector2{{ E }}.createDirectionRad(0d);
        TestUtil{{ E }}.assertEquals(vector1, 1, 0);
        final Vector2{{ E }} vector2 = Vector2{{ E }}.createDirectionRad(TrigMath.QUARTER_PI);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Vector2{{ E }} vector3 = Vector2{{ E }}.createDirectionRad(TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1);
        final Vector2{{ E }} vector4 = Vector2{{ E }}.createDirectionRad(TrigMath.PI);
        TestUtil{{ E }}.assertEquals(vector4, -1, 0);
        final Vector2{{ E }} vector5 = Vector2{{ E }}.createDirectionRad(TrigMath.THREE_PI_HALVES);
        TestUtil{{ E }}.assertEquals(vector5, 0, -1);
        final Vector2{{ E }} vector6 = Vector2{{ E }}.createDirectionRad(TrigMath.TWO_PI);
        TestUtil{{ E }}.assertEquals(vector6, 1, 0);
    }

    @Test
    void testCreateDirectionFromFloatAngleRadians() {
        final Vector2{{ E }} vector1 = Vector2{{ E }}.createDirectionRad(0);
        TestUtil{{ E }}.assertEquals(vector1, 1, 0);
        final Vector2{{ E }} vector2 = Vector2{{ E }}.createDirectionRad((float) TrigMath.QUARTER_PI);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Vector2{{ E }} vector3 = Vector2{{ E }}.createDirectionRad((float) TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1);
        final Vector2{{ E }} vector4 = Vector2{{ E }}.createDirectionRad((float) TrigMath.PI);
        TestUtil{{ E }}.assertEquals(vector4, -1, 0);
        final Vector2{{ E }} vector5 = Vector2{{ E }}.createDirectionRad((float) TrigMath.THREE_PI_HALVES);
        TestUtil{{ E }}.assertEquals(vector5, 0, -1);
        final Vector2{{ E }} vector6 = Vector2{{ E }}.createDirectionRad((float) TrigMath.TWO_PI);
        TestUtil{{ E }}.assertEquals(vector6, 1, 0);
    }

}
