package org.spongepowered.math.test;

import org.junit.jupiter.api.Assertions;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.matrix.Matrix2{{ E }};
import org.spongepowered.math.matrix.Matrix3{{ E }};
import org.spongepowered.math.matrix.Matrix4{{ E }};
import org.spongepowered.math.matrix.MatrixN{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class TestUtil{{ E }} {

    // Constants to reduce the amount of time redundant (5+) quantities are computed:
    public static final {{ e }} SQRT2 = ({{ e }}) Math.sqrt(2);
    public static final {{ e }} SQRT5 = ({{ e }}) Math.sqrt(5);
    public static final {{ e }} SQRT13 = ({{ e }}) Math.sqrt(13);
    public static final {{ e }} SQRT54 = ({{ e }}) Math.sqrt(54);

    private static final {{ e }} EPSILON = {{ Eteps }};

    public static void assertEquals(final {{ e }} value, final {{ e }} expected) {
        Assertions.assertEquals(expected, value, EPSILON);
    }

    public static void assertEquals(final Vector2{{ E }} v, final {{ e }} x, final {{ e }} y) {
        assertEquals(v.x(), x);
        assertEquals(v.y(), y);
    }

    public static void assertEquals(final Vector3{{ E }} v, final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        assertEquals(v.x(), x);
        assertEquals(v.y(), y);
        assertEquals(v.z(), z);
    }

    public static void assertEquals(final Vector4{{ E }} v, final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        assertEquals(v.x(), x);
        assertEquals(v.y(), y);
        assertEquals(v.z(), z);
        assertEquals(v.w(), w);
    }

    public static void assertEquals(final VectorN{{ E }} v, final {{ e }}... f) {
        Assertions.assertArrayEquals(f, v.toArray(), EPSILON);
    }

    public static void assertEquals(final Complex{{ E }} c, final {{ e }} x, final {{ e }} y) {
        assertEquals(c.x(), x);
        assertEquals(c.y(), y);
    }

    public static void assertEquals(final Quaternion{{ E }} q, final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        assertEquals(q.x(), x);
        assertEquals(q.y(), y);
        assertEquals(q.z(), z);
        assertEquals(q.w(), w);
    }

    public static void assertEquals(final Matrix2{{ E }} m, final {{ e }} m00, final {{ e }} m01, final {{ e }} m10, final {{ e }} m11) {
        assertEquals(m.get(0, 0), m00);
        assertEquals(m.get(0, 1), m01);
        assertEquals(m.get(1, 0), m10);
        assertEquals(m.get(1, 1), m11);
    }

    public static void assertEquals(final Matrix3{{ E }} m, final {{ e }} m00, final {{ e }} m01, final {{ e }} m02, final {{ e }} m10, final {{ e }} m11,
            final {{ e }} m12, final {{ e }} m20, final {{ e }} m21, final {{ e }} m22) {
        assertEquals(m.get(0, 0), m00);
        assertEquals(m.get(0, 1), m01);
        assertEquals(m.get(0, 2), m02);
        assertEquals(m.get(1, 0), m10);
        assertEquals(m.get(1, 1), m11);
        assertEquals(m.get(1, 2), m12);
        assertEquals(m.get(2, 0), m20);
        assertEquals(m.get(2, 1), m21);
        assertEquals(m.get(2, 2), m22);
    }

    public static void assertEquals(final Matrix4{{ E }} m, final {{ e }} m00, final {{ e }} m01, final {{ e }} m02, final {{ e }} m03, {{ e }} m10,
            final {{ e }} m11, final {{ e }} m12, final {{ e }} m13, final {{ e }} m20, final {{ e }} m21, final {{ e }} m22,
            final {{ e }} m23, final {{ e }} m30, final {{ e }} m31, final {{ e }} m32, final {{ e }} m33) {
        assertEquals(m.get(0, 0), m00);
        assertEquals(m.get(0, 1), m01);
        assertEquals(m.get(0, 2), m02);
        assertEquals(m.get(0, 3), m03);
        assertEquals(m.get(1, 0), m10);
        assertEquals(m.get(1, 1), m11);
        assertEquals(m.get(1, 2), m12);
        assertEquals(m.get(1, 3), m13);
        assertEquals(m.get(2, 0), m20);
        assertEquals(m.get(2, 1), m21);
        assertEquals(m.get(2, 2), m22);
        assertEquals(m.get(2, 3), m23);
        assertEquals(m.get(3, 0), m30);
        assertEquals(m.get(3, 1), m31);
        assertEquals(m.get(3, 2), m32);
        assertEquals(m.get(3, 3), m33);
    }

    public static void assertEquals(final MatrixN{{ E }} m, final {{ e }}... f) {
        Assertions.assertArrayEquals(f, m.toArray(), EPSILON);
    }

    public static void assertEquals(final {{ e }}[] a, final {{ e }}... f) {
        Assertions.assertArrayEquals(f, a, EPSILON);
    }

}
