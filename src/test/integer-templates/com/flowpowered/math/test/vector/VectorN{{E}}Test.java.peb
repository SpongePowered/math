package org.spongepowered.math.test.vector;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.test.{{ EDecEquiTest }};
import org.spongepowered.math.test.TestUtili;
import org.spongepowered.math.test.TestUtill;
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class VectorN{{ E }}Test {

    @Test
    void testSizeConstructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(5);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0);
    }

    @Test
    void testCopyVector2Constructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new Vector2{{ E }}(0, 1));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1);
    }

    @Test
    void testCopyVector3Constructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new Vector3{{ E }}(0, 1, 2));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testCopyVector4Constructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new Vector4{{ E }}(0, 1, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3);
    }

    @Test
    void testCopyVectorNConstructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new VectorN{{ E }}(0, 1, 2, 3, 4, 5));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 5);
    }

    @Test
    void testComponentsConstructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 5);
    }

    @Test
    void testSize() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5);
        assertEquals(vector.size(), ({{ e }}) 6);
    }

    @Test
    void testGetter() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5);
        TestUtil{{ E }}.assertEquals(vector.get(0), 0);
        TestUtil{{ E }}.assertEquals(vector.get(1), 1);
        TestUtil{{ E }}.assertEquals(vector.get(2), 2);
        TestUtil{{ E }}.assertEquals(vector.get(3), 3);
        TestUtil{{ E }}.assertEquals(vector.get(4), 4);
        TestUtil{{ E }}.assertEquals(vector.get(5), 5);
    }

    @Test
    void testSetter{{ ES }}Value() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5);
        vector.set(0, ({{ e }}) 6);
        TestUtil{{ E }}.assertEquals(vector.get(0), 6);
    }

    @Test
    void testSetZero() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2);
        vector.setZero();
        TestUtil{{ E }}.assertEquals(vector.get(0), 0);
        TestUtil{{ E }}.assertEquals(vector.get(1), 0);
        TestUtil{{ E }}.assertEquals(vector.get(2), 0);
    }

    @Test
    void testResize() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(0, 1, 2);
        final VectorN{{ E }} resize1 = vector1.resize(2);
        TestUtili.assertEquals(resize1.size(), 2);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(0, 1, 2);
        final VectorN{{ E }} resize2 = vector2.resize(4);
        TestUtili.assertEquals(resize2.size(), 4);
    }

    @Test
    void testVectorNAddition() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).add(new VectorN{{ E }}(0, 1, 2, 3, 4, 6));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) 6, ({{ e }}) 8, ({{ e }}) 11);
    }

    @Test
    void test{{ ES }}ComponentsAddition() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).add(({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 6);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) 6, ({{ e }}) 8, ({{ e }}) 11);
    }

    @Test
    void testVectorNSubtraction() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).sub(new VectorN{{ E }}(0, 1, 2, 3, 4, 4));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 1);
    }

    @Test
    void test{{ ES }}ComponentsSubtraction() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).sub(({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 4);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 1);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).mul(2.1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) 6, ({{ e }}) 8, ({{ e }}) 10);
    }

    @Test
    void test{{ ES }}FactorMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).mul(({{ e }}) 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) 6, ({{ e }}) 8, ({{ e }}) 10);
    }

    @Test
    void testVectorNMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).mul(new VectorN{{ E }}(1, 2, 3, 4, 5, 6));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 12, ({{ e }}) 20, ({{ e }}) 30);
    }

    @Test
    void test{{ ES }}ComponentsMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, 1, 2, 3, 4, 5).mul(({{ e }}) 2, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 4);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 9, ({{ e }}) 16, ({{ e }}) 20);
    }

    @Test
    void testDoubleFactorDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(2.1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 2, ({{ e }}) 3);
    }

    @Test
    void test{{ ES }}FactorDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 2, ({{ e }}) 3);
    }

    @Test
    void testVectorNDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 8).div(new VectorN{{ E }}(2, 1, 2, 4, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 2);
    }

    @Test
    void test{{ ES }}ComponentsDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(({{ e }}) 2, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) 2, ({{ e }}) 3);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 2, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 2);
    }

    @Test
    void testVectorNDotProduct() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4, 5).dot(new VectorN{{ E }}(6, 7, 8, 9));
        TestUtil{{ E }}.assertEquals(f, 110);
    }

    @Test
    void test{{ ES }}ComponentsDotProduct() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4, 5).dot(({{ e }}) 6, ({{ e }}) 7, ({{ e }}) 8, ({{ e }}) 9);
        TestUtil{{ E }}.assertEquals(f, 110);
    }

    @Test
    void testVectorNProject() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(20, 30, 40, 50).project(new VectorN{{ E }}(10, 10, 10, 10));
        TestUtil{{ E }}.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    void testFloatComponentsProject() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(20, 30, 40, 50).project(10, 10, 10, 10);
        TestUtil{{ E }}.assertEquals(vector, 35, 35, 35, 35);
    }

    @Test
    void testRaiseToDoublePower() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, 8, 5).pow(2d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 4, ({{ e }}) 36, ({{ e }}) 64, ({{ e }}) 25);
    }

    @Test
    void testRaiseTo{{ ES }}Power() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, 8, ({{ e }}) 5.5).pow(({{ e }}) 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 4, ({{ e }}) 36, ({{ e }}) 64, ({{ e }}) 25);
    }

    @Test
    void testAbsolute() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(-2, -6, -55, 0).abs();
        TestUtil{{ E }}.assertEquals(vector1, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 55, ({{ e }}) 0);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(2, 6, 55, 0).abs();
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 55, ({{ e }}) 0);
    }

    @Test
    void testNegate() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, -6, 15, 20).negate();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) -2, ({{ e }}) 6, ({{ e }}) -15, ({{ e }}) -20);
    }

    @Test
    void testVectorNMinimum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).min(new VectorN{{ E }}(3, 4, 10, -1));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) -1, ({{ e }}) -1);
    }

    @Test
    void test{{ ES }}ComponentsMinimum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).min(({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 10, ({{ e }}) -1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) -1, ({{ e }}) -1);
    }

    @Test
    void testVectorNMaximum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).max(new VectorN{{ E }}(3, 4, 10, -1));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3, ({{ e }}) 6, ({{ e }}) 10, ({{ e }}) 0);
    }

    @Test
    void test{{ ES }}ComponentsMaximum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).max(({{ e }}) 3, ({{ e }}) 4, ({{ e }}) 10, ({{ e }}) -1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3, ({{ e }}) 6, ({{ e }}) 10, ({{ e }}) 0);
    }

    @Test
    void testVectorNDistanceSquared() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4).distanceSquared(new VectorN{{ E }}(5, 6, 7));
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void test{{ ES }}ComponentsDistanceSquared() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4, 5).distanceSquared(({{ e }}) 5, ({{ e }}) 6, ({{ e }}) 7, ({{ e }}) 5);
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void testVectorNDistance() {
        final {{ EDecEqui }} f = new VectorN{{ E }}(0, 6, 13, 8).distance(new VectorN{{ E }}(2, 8, 16, 16));
        {{ EDecEquiTest }}.assertEquals(f, 9);
    }

    @Test
    void test{{ ES }}ComponentsDistance() {
        final {{ EDecEqui }} f = new VectorN{{ E }}(0, 6, 13, 8).distance(({{ e }}) 2, ({{ e }}) 8, ({{ e }}) 16, ({{ e }}) 16);
        {{ EDecEquiTest }}.assertEquals(f, 9);
    }

    @Test
    void testLength() {
        final {{ EDecEqui }} f = new VectorN{{ E }}(2, 2, 3, 8).length();
        {{ EDecEquiTest }}.assertEquals(f, 9);
    }

    @Test
    void testLengthSquared() {
        final {{ e }} f = new VectorN{{ E }}(3, 4, 5, 6).lengthSquared();
        TestUtil{{ E }}.assertEquals(f, 86);
    }

    @Test
    void testMinAxis() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtili.assertEquals(vector1.minAxis(), 0);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(2, 1, 3, 4);
        TestUtili.assertEquals(vector2.minAxis(), 1);
        final VectorN{{ E }} vector3 = new VectorN{{ E }}(3, 2, 1, 4);
        TestUtili.assertEquals(vector3.minAxis(), 2);
        final VectorN{{ E }} vector4 = new VectorN{{ E }}(4, 2, 3, 1);
        TestUtili.assertEquals(vector4.minAxis(), 3);
    }

    @Test
    void testMaxAxis() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(4, 2, 3, 1);
        TestUtili.assertEquals(vector1.maxAxis(), 0);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(1, 4, 3, 2);
        TestUtili.assertEquals(vector2.maxAxis(), 1);
        final VectorN{{ E }} vector3 = new VectorN{{ E }}(1, 2, 4, 3);
        TestUtili.assertEquals(vector3.maxAxis(), 2);
        final VectorN{{ E }} vector4 = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtili.assertEquals(vector4.maxAxis(), 3);
    }

    @Test
    void testConvertToVector2() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector.toVector2(), 1, 2);
    }

    @Test
    void testConvertToVector3() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector.toVector3(), 1, 2, 3);
    }

    @Test
    void testConvertToVector4() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector.toVector4(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToVectorInteger() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtili.assertEquals(vector.toInt(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToVectorLong() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtill.assertEquals(vector.toLong(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToArray() {
        final {{ e }}[] array = new VectorN{{ E }}(1, 2, 3, 4).toArray();
        TestUtil{{ E }}.assertEquals(array, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4);
    }

    @Test
    void testComparison() {
        final int c1 = new VectorN{{ E }}(10, 20, 30, 40).compareTo(new VectorN{{ E }}(20, 20, 30, 40));
        Assertions.assertTrue(c1 < 0);
        final int c2 = new VectorN{{ E }}(10, 20, 30, 40).compareTo(new VectorN{{ E }}(10, 20, 30, 40));
        Assertions.assertTrue(c2 == 0);
        final int c3 = new VectorN{{ E }}(10, 20, 30, 40).compareTo(new VectorN{{ E }}(10, 10, 30, 40));
        Assertions.assertTrue(c3 > 0);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new VectorN{{ E }}(1, 2, 3).equals(new VectorN{{ E }}(1, 2, 3)));
        Assertions.assertFalse(new VectorN{{ E }}(1, 2, 3).equals(new VectorN{{ E }}(2, 2, 3)));
    }

    @Test
    void testCloning() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3);
        Assertions.assertEquals(vector, vector.clone());
    }

}
