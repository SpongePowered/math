package org.spongepowered.math.test.vector;

import static org.spongepowered.math.test.TestUtil{{ E }}.SQRT2;
import static org.spongepowered.math.test.TestUtil{{ E }}.SQRT5;

import java.util.Random;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.test.TestUtil{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class Vector3{{ E }}Test {
    @Test
    void testZero() {
        final Vector3{{ E }} vector = Vector3{{ E }}.ZERO;
        TestUtil{{ E }}.assertEquals(vector, 0, 0, 0);
    }

    @Test
    void testCopyVector2DefaultZConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector2{{ E }}(0, 1));
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 0);
    }

    @Test
    void testCopyVector2DoubleZConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector2{{ E }}(0, 1), 3d);
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 3);
    }

    @Test
    void testCopyVector2FloatZConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector2{{ E }}(0, 1), 3);
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 3);
    }

    @Test
    void testCopyVector4Constructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector4{{ E }}(0, 1, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 2);
    }

    @Test
    void testCopyVectorNConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new VectorN{{ E }}(0, 1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 2);
    }

    @Test
    void testDoubleComponentsConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0.5, 1.7, 3.8);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.5, ({{ e }}) 1.7, ({{ e }}) 3.8);
    }

    @Test
    void testFloatComponentsConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0.5f, 1.7f, 3.8f);
        TestUtil{{ E }}.assertEquals(vector, 0.5f, 1.7f, 3.8f);
    }

    @Test
    void testGetters() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0.5, 1.7, 3.8);
        TestUtil{{ E }}.assertEquals(vector.x(), ({{ e }}) 0.5);
        TestUtil{{ E }}.assertEquals(vector.y(), ({{ e }}) 1.7);
        TestUtil{{ E }}.assertEquals(vector.z(), ({{ e }}) 3.8);
    }

    @Test
    void testFloorGetters() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0.5, 1.7, 3.8);
        TestUtil{{ E }}.assertEquals(vector.floorX(), 0);
        TestUtil{{ E }}.assertEquals(vector.floorY(), 1);
        TestUtil{{ E }}.assertEquals(vector.floorZ(), 3);
    }

    @Test
    void testVector3Addition() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 1).add(new Vector3{{ E }}(5.5, -0.5, 3.8));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5.5, ({{ e }}) 0.5, ({{ e }}) 4.8);
    }

    @Test
    void testDoubleComponentsAddition() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 5).add(5.5, -0.5, 3.8);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5.5, ({{ e }}) 0.5, ({{ e }}) 8.8);
    }

    @Test
    void testFloatComponentsAddition() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 5).add(5.5f, -0.5f, 3.8f);
        TestUtil{{ E }}.assertEquals(vector, 5.5f, 0.5f, ({{ e }}) 8.8);
    }

    @Test
    void testVector3Subtraction() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(10, 5, 1).sub(new Vector3{{ E }}(9, 4.5, 2));
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 0.5, -1);
    }

    @Test
    void testDoubleComponentsSubtraction() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(10, 5, 1).sub(9, 4.5, 2);
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 0.5, -1);
    }

    @Test
    void testFloatComponentsSubtraction() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(10, 5, 1).sub(9, 4.5f, 2);
        TestUtil{{ E }}.assertEquals(vector, 1f, 0.5f, -1f);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(1.5);
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 4.5, 6);
    }

    @Test
    void testFloatFactorMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(1.5f);
        TestUtil{{ E }}.assertEquals(vector, 3, 4.5f, 6);
    }

    @Test
    void testVector3Multiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(new Vector3{{ E }}(1.5, 2.5, 3.5));
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 7.5, 14);
    }

    @Test
    void testDoubleComponentsMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(1.5, 2.5, 3.5);
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 7.5, 14);
    }

    @Test
    void testFloatComponentsMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(1.5f, 2.5f, 3.5f);
        TestUtil{{ E }}.assertEquals(vector, 3, ({{ e }}) 7.5, 14);
    }

    @Test
    void testDoubleFactorDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).div(2d);
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 1.5, 2);
    }

    @Test
    void testFloatFactorDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).div(2);
        TestUtil{{ E }}.assertEquals(vector, 1, 1.5f, 2);
    }

    @Test
    void testVector3Division() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 12).div(new Vector3{{ E }}(2, 4, 8));
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 1.5, ({{ e }}) 1.5);
    }

    @Test
    void testDoubleComponentsDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 16).div(2d, 4d, 8d);
        TestUtil{{ E }}.assertEquals(vector, 1, ({{ e }}) 1.5, 2);
    }

    @Test
    void testFloatComponentsDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 16).div(2, 4, 8);
        TestUtil{{ E }}.assertEquals(vector, 1, 1.5f, 2);
    }

    @Test
    void testVector3DotProduct() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).dot(new Vector3{{ E }}(4, 5, 6));
        TestUtil{{ E }}.assertEquals(f, 47);
    }

    @Test
    void testDoubleComponentsDotProduct() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).dot(4d, 5d, 6d);
        TestUtil{{ E }}.assertEquals(f, 47);
    }

    @Test
    void testFloatComponentsDotProduct() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).dot(4, 5, 6);
        TestUtil{{ E }}.assertEquals(f, 47);
    }

    @Test
    void testVector3Project() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).project(new Vector3{{ E }}(1, 1, 1));
        TestUtil{{ E }}.assertEquals(vector, 3, 3, 3);
    }

    @Test
    void testDoubleComponentsProject() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).project(1d, 1d, 1d);
        TestUtil{{ E }}.assertEquals(vector, 3, 3, 3);
    }

    @Test
    void testFloatComponentsProject() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).project(1, 1, 1);
        TestUtil{{ E }}.assertEquals(vector, 3, 3, 3);
    }

    @Test
    void testVector3Cross() {
        final Vector3{{ E }} f = new Vector3{{ E }}(2, 3, 4).cross(new Vector3{{ E }}(4, 5, 6.5));
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) -0.5, 3, -2);
    }

    @Test
    void testDoubleComponentsCross() {
        final Vector3{{ E }} f = new Vector3{{ E }}(2, 3, 4).cross(4, 5, 6.5);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) -0.5, 3, -2);
    }

    @Test
    void testFloatComponentsCross() {
        final Vector3{{ E }} f = new Vector3{{ E }}(2, 3, 4).cross(4, 5, 6.5f);
        TestUtil{{ E }}.assertEquals(f, -0.5f, 3, -2);
    }

    @Test
    void testRaiseToFloatPower() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 8).pow(2);
        TestUtil{{ E }}.assertEquals(vector, 4f, 36f, 64f);
    }

    @Test
    void testRaiseToDoublePower() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 8).pow(2d);
        TestUtil{{ E }}.assertEquals(vector, 4, 36, 64);
    }

    @Test
    void testCeiling() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2.5, 6.7, 7.9).ceil();
        TestUtil{{ E }}.assertEquals(vector, 3, 7, 8);
    }

    @Test
    void testFloor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2.5, 6.7, 7.8).floor();
        TestUtil{{ E }}.assertEquals(vector, 2, 6, 7);
    }

    @Test
    void testRound() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2.2, 6.7, 7.8).round();
        TestUtil{{ E }}.assertEquals(vector, 2, 7, 8);
    }

    @Test
    void testAbsolute() {
        final Vector3{{ E }} vector1 = new Vector3{{ E }}(-2.5, -6.7, -55).abs();
        TestUtil{{ E }}.assertEquals(vector1, ({{ e }}) 2.5, ({{ e }}) 6.7, 55);
        final Vector3{{ E }} vector2 = new Vector3{{ E }}(2.5, 6.7, 55).abs();
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) 2.5, ({{ e }}) 6.7, 55);
    }

    @Test
    void testNegate() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2.2, -6.7, 15.8).negate();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) -2.2, ({{ e }}) 6.7, ({{ e }}) -15.8);
    }

    @Test
    void testVector3Minimum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, -1).min(new Vector3{{ E }}(3, 4, 10));
        TestUtil{{ E }}.assertEquals(vector, 2, 4, -1);
    }

    @Test
    void testDoubleComponentsMinimum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).min(3d, 4d, -5d);
        TestUtil{{ E }}.assertEquals(vector, 2, 4, -5);
    }

    @Test
    void testFloatComponentsMinimum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).min(3, 4, -5);
        TestUtil{{ E }}.assertEquals(vector, 2, 4, -5);
    }

    @Test
    void testVector3Maximum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).max(new Vector3{{ E }}(3, 4, -5));
        TestUtil{{ E }}.assertEquals(vector, 3, 6, 10);
    }

    @Test
    void testDoubleComponentsMaximum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).max(3d, 4d, -5d);
        TestUtil{{ E }}.assertEquals(vector, 3, 6, 10);
    }

    @Test
    void testFloatComponentsMaximum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).max(3, 4, -5);
        TestUtil{{ E }}.assertEquals(vector, 3, 6, 10);
    }

    @Test
    void testVector3DistanceSquared() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).distanceSquared(new Vector3{{ E }}(5, 6, 7));
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void testDoubleComponentsDistanceSquared() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).distanceSquared(5d, 6d, 7d);
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void testFloatComponentsDistanceSquared() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).distanceSquared(5, 6, 7);
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void testVector3Distance() {
        final {{ e }} f = new Vector3{{ E }}(0, 2, 4).distance(new Vector3{{ E }}(0, 8, 16));
        TestUtil{{ E }}.assertEquals(f, 6 * SQRT5);
    }

    @Test
    void testDoubleComponentsDistance() {
        final {{ e }} f = new Vector3{{ E }}(0, 2, 4).distance(0d, 8d, 16d);
        TestUtil{{ E }}.assertEquals(f, 6 * SQRT5);
    }

    @Test
    void testFloatComponentsDistance() {
        final {{ e }} f = new Vector3{{ E }}(0, 2, 4).distance(0, 8, 16);
        TestUtil{{ E }}.assertEquals(f,  6 * SQRT5);
    }

    @Test
    void testLength() {
        final {{ e }} f = new Vector3{{ E }}(3, 4, 5).length();
        TestUtil{{ E }}.assertEquals(f, 5 * SQRT2);
    }

    @Test
    void testLengthSquared() {
        final {{ e }} f = new Vector3{{ E }}(3, 4, 5).lengthSquared();
        TestUtil{{ E }}.assertEquals(f, 50);
    }

    @Test
    void testNormalize() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 2, 0).normalize();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0);
        Assertions.assertThrows(ArithmeticException.class, () -> Vector3{{ E }}.ZERO.normalize());
    }

    @Test
    void testMinAxis() {
        final Vector3{{ E }} vector1 = new Vector3{{ E }}(1, 2, 3);
        TestUtil{{ E }}.assertEquals(vector1.minAxis(), 0);
        final Vector3{{ E }} vector2 = new Vector3{{ E }}(2, 1, 3);
        TestUtil{{ E }}.assertEquals(vector2.minAxis(), 1);
        final Vector3{{ E }} vector3 = new Vector3{{ E }}(3, 2, 1);
        TestUtil{{ E }}.assertEquals(vector3.minAxis(), 2);
    }

    @Test
    void testMaxAxis() {
        final Vector3{{ E }} vector1 = new Vector3{{ E }}(3, 1, 2);
        TestUtil{{ E }}.assertEquals(vector1.maxAxis(), 0);
        final Vector3{{ E }} vector2 = new Vector3{{ E }}(1, 3, 2);
        TestUtil{{ E }}.assertEquals(vector2.maxAxis(), 1);
        final Vector3{{ E }} vector3 = new Vector3{{ E }}(1, 2, 3);
        TestUtil{{ E }}.assertEquals(vector3.maxAxis(), 2);
    }

    @Test
    void testConvertToVector2() {
        final Vector2{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector2();
        TestUtil{{ E }}.assertEquals(vector, 1, 2);
    }

    @Test
    void testConvertToVector4DefaultW() {
        final Vector4{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector4();
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3, 0);
    }

    @Test
    void testConvertToVector4FloatW() {
        final Vector4{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector4(4);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    void testConvertToVector4DoubleW() {
        final Vector4{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector4(4d);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3, 4);
    }

    @Test
    void testConvertToVectorN() {
        final VectorN{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVectorN();
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3);
    }

    @Test
    void testConvertToArray() {
        final {{ e }}[] array = new Vector3{{ E }}(1, 2, 3).toArray();
        TestUtil{{ E }}.assertEquals(array, 1, 2, 3);
    }

    @Test
    void testComparison() {
        final int c1 = new Vector3{{ E }}(10, 20, 30).compareTo(new Vector3{{ E }}(20, 20, 30));
        Assertions.assertTrue(c1 < 0);
        final int c2 = new Vector3{{ E }}(10, 20, 30).compareTo(new Vector3{{ E }}(10, 20, 30));
        Assertions.assertTrue(c2 == 0);
        final int c3 = new Vector3{{ E }}(10, 20, 30).compareTo(new Vector3{{ E }}(10, 10, 30));
        Assertions.assertTrue(c3 > 0);
        final int c4 = new Vector3{{ E }}(0.2, 0.2, 0.2).compareTo(new Vector3{{ E }}(0.1, 0.1, 0.1));
        Assertions.assertTrue(c4 > 0);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new Vector3{{ E }}(122, 43, 96).equals(new Vector3{{ E }}(122, 43, 96)));
        Assertions.assertFalse(new Vector3{{ E }}(122, 43, 96).equals(new Vector3{{ E }}(378, 95, 96)));
    }

    @Test
    void testVectorFromN() {
        final Vector3{{ E }} vector = Vector3{{ E }}.from(1);
        TestUtil{{ E }}.assertEquals(vector, 1, 1, 1);
    }

    @Test
    void testVectorFromXYZ() {
        final Vector3{{ E }} vector = Vector3{{ E }}.from(1, 2, 3);
        TestUtil{{ E }}.assertEquals(vector, 1, 2, 3);
    }

    @Test
    void testCreateDirectionFromRandom() {
        final Random random = new Random(0xF5514E866AA4L);
        for (int i = 0; i < 10; i++) {
            final Vector3{{ E }} vector = Vector3{{ E }}.createRandomDirection(random);
            TestUtil{{ E }}.assertEquals(vector.length(), 1);
        }
    }

    @Test
    void testCreateDirectionFromDoubleAnglesDegrees() {
        final Vector3{{ E }} vector1 = Vector3{{ E }}.createDirectionDeg(0d, 0d);
        TestUtil{{ E }}.assertEquals(vector1, 0, 0, 1);
        final Vector3{{ E }} vector2 = Vector3{{ E }}.createDirectionDeg(45d, 90d);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0);
        final Vector3{{ E }} vector3 = Vector3{{ E }}.createDirectionDeg(90d, 90d);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1, 0);
        final Vector3{{ E }} vector4 = Vector3{{ E }}.createDirectionDeg(180d, 180d);
        TestUtil{{ E }}.assertEquals(vector4, 0, 0, -1);
        final Vector3{{ E }} vector5 = Vector3{{ E }}.createDirectionDeg(270d, 270d);
        TestUtil{{ E }}.assertEquals(vector5, 0, 1, 0);
        final Vector3{{ E }} vector6 = Vector3{{ E }}.createDirectionDeg(360d, 360d);
        TestUtil{{ E }}.assertEquals(vector6, 0, 0, 1);
    }

    @Test
    void testCreateDirectionFromFloatAnglesDegrees() {
        final Vector3{{ E }} vector1 = Vector3{{ E }}.createDirectionDeg(0, 0);
        TestUtil{{ E }}.assertEquals(vector1, 0, 0, 1);
        final Vector3{{ E }} vector2 = Vector3{{ E }}.createDirectionDeg(45, 90);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0);
        final Vector3{{ E }} vector3 = Vector3{{ E }}.createDirectionDeg(90, 90);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1, 0);
        final Vector3{{ E }} vector4 = Vector3{{ E }}.createDirectionDeg(180, 180);
        TestUtil{{ E }}.assertEquals(vector4, 0, 0, -1);
        final Vector3{{ E }} vector5 = Vector3{{ E }}.createDirectionDeg(270, 270);
        TestUtil{{ E }}.assertEquals(vector5, 0, 1, 0);
        final Vector3{{ E }} vector6 = Vector3{{ E }}.createDirectionDeg(360, 360);
        TestUtil{{ E }}.assertEquals(vector6, 0, 0, 1);
    }

    @Test
    void testCreateDirectionFromDoubleAnglesRadians() {
        final Vector3{{ E }} vector1 = Vector3{{ E }}.createDirectionRad(0d, 0d);
        TestUtil{{ E }}.assertEquals(vector1, 0, 0, 1);
        final Vector3{{ E }} vector2 = Vector3{{ E }}.createDirectionRad(TrigMath.QUARTER_PI, TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0);
        final Vector3{{ E }} vector3 = Vector3{{ E }}.createDirectionRad(TrigMath.HALF_PI, TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1, 0);
        final Vector3{{ E }} vector4 = Vector3{{ E }}.createDirectionRad(TrigMath.PI, TrigMath.PI);
        TestUtil{{ E }}.assertEquals(vector4, 0, 0, -1);
        final Vector3{{ E }} vector5 = Vector3{{ E }}.createDirectionRad(TrigMath.THREE_PI_HALVES, TrigMath.THREE_PI_HALVES);
        TestUtil{{ E }}.assertEquals(vector5, 0, 1, 0);
        final Vector3{{ E }} vector6 = Vector3{{ E }}.createDirectionRad(TrigMath.TWO_PI, TrigMath.TWO_PI);
        TestUtil{{ E }}.assertEquals(vector6, 0, 0, 1);
    }

    @Test
    void testCreateDirectionFromFloatAnglesRadians() {
        final Vector3{{ E }} vector1 = Vector3{{ E }}.createDirectionRad(0, 0);
        TestUtil{{ E }}.assertEquals(vector1, 0, 0, 1);
        final Vector3{{ E }} vector2 = Vector3{{ E }}.createDirectionRad((float) TrigMath.QUARTER_PI, (float) TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0);
        final Vector3{{ E }} vector3 = Vector3{{ E }}.createDirectionRad((float) TrigMath.HALF_PI, (float) TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(vector3, 0, 1, 0);
        final Vector3{{ E }} vector4 = Vector3{{ E }}.createDirectionRad((float) TrigMath.PI, (float) TrigMath.PI);
        TestUtil{{ E }}.assertEquals(vector4, 0, 0, -1);
        final Vector3{{ E }} vector5 = Vector3{{ E }}.createDirectionRad((float) TrigMath.THREE_PI_HALVES, (float) TrigMath.THREE_PI_HALVES);
        TestUtil{{ E }}.assertEquals(vector5, 0, 1, 0);
        final Vector3{{ E }} vector6 = Vector3{{ E }}.createDirectionRad((float) TrigMath.TWO_PI, (float) TrigMath.TWO_PI);
        TestUtil{{ E }}.assertEquals(vector6, 0, 0, 1);
    }
}
