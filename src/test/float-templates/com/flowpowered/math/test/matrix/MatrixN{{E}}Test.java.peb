package org.spongepowered.math.test.matrix;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.matrix.Matrix2{{ E }};
import org.spongepowered.math.matrix.Matrix3{{ E }};
import org.spongepowered.math.matrix.Matrix4{{ E }};
import org.spongepowered.math.matrix.MatrixNf;
import org.spongepowered.math.matrix.MatrixNd;
import org.spongepowered.math.test.TestUtilf;
import org.spongepowered.math.test.TestUtild;
import org.spongepowered.math.vector.VectorN{{ E }};

import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.spongepowered.math.test.TestUtil{{ E }}.SQRT13;

public class MatrixN{{ E }}Test {
    @Test
    void testSizeConstructor() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(4);
        assertEquals(matrix.size(), 4);
    }

    @Test
    void testCopyMatrix2Constructor() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(new Matrix2{{ E }}(1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testCopyMatrix3Constructor() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(new Matrix3{{ E }}(1, 2, 3, 4, 5, 6, 7, 8, 9));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4, 5, 6, 7, 8, 9);
    }

    @Test
    void testCopyMatrix4Constructor() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(new Matrix4{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16));
        TestUtil{{ E }}.assertEquals(matrix,
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
    }

    @Test
    void testCopyMatrixNConstructor() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16));
        TestUtil{{ E }}.assertEquals(matrix,
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
    }

    @Test
    void testFloatComponentsConstructor() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
    }

    @Test
    void testSize() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(5);
        assertEquals(matrix.size(), 5);
    }

    @Test
    void testGetter() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        TestUtil{{ E }}.assertEquals(matrix.get(0, 0), 1);
        TestUtil{{ E }}.assertEquals(matrix.get(0, 1), 2);
        TestUtil{{ E }}.assertEquals(matrix.get(0, 2), 3);
        TestUtil{{ E }}.assertEquals(matrix.get(0, 3), 4);
        TestUtil{{ E }}.assertEquals(matrix.get(1, 0), 5);
        TestUtil{{ E }}.assertEquals(matrix.get(1, 1), 6);
        TestUtil{{ E }}.assertEquals(matrix.get(1, 2), 7);
        TestUtil{{ E }}.assertEquals(matrix.get(1, 3), 8);
        TestUtil{{ E }}.assertEquals(matrix.get(2, 0), 9);
        TestUtil{{ E }}.assertEquals(matrix.get(2, 1), 10);
        TestUtil{{ E }}.assertEquals(matrix.get(2, 2), 11);
        TestUtil{{ E }}.assertEquals(matrix.get(2, 3), 12);
        TestUtil{{ E }}.assertEquals(matrix.get(3, 0), 13);
        TestUtil{{ E }}.assertEquals(matrix.get(3, 1), 14);
        TestUtil{{ E }}.assertEquals(matrix.get(3, 2), 15);
        TestUtil{{ E }}.assertEquals(matrix.get(3, 3), 16);
    }

    @Test
    void testRowGetter() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        TestUtil{{ E }}.assertEquals(matrix.row(0), 1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.row(1), 5, 6, 7, 8);
        TestUtil{{ E }}.assertEquals(matrix.row(2), 9, 10, 11, 12);
        TestUtil{{ E }}.assertEquals(matrix.row(3), 13, 14, 15, 16);
    }

    @Test
    void testColumnGetter() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        TestUtil{{ E }}.assertEquals(matrix.column(0), 1, 5, 9, 13);
        TestUtil{{ E }}.assertEquals(matrix.column(1), 2, 6, 10, 14);
        TestUtil{{ E }}.assertEquals(matrix.column(2), 3, 7, 11, 15);
        TestUtil{{ E }}.assertEquals(matrix.column(3), 4, 8, 12, 16);
    }

    @Test
    void testSetterFloatValue() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(4);
        matrix.set(0, 0, 1);
        matrix.set(0, 1, 2);
        matrix.set(0, 2, 3);
        matrix.set(0, 3, 4);
        matrix.set(1, 0, 5);
        matrix.set(1, 1, 6);
        matrix.set(1, 2, 7);
        matrix.set(1, 3, 8);
        matrix.set(2, 0, 9);
        matrix.set(2, 1, 10);
        matrix.set(2, 2, 11);
        matrix.set(2, 3, 12);
        matrix.set(3, 0, 13);
        matrix.set(3, 1, 14);
        matrix.set(3, 2, 15);
        matrix.set(3, 3, 16);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
    }

    @Test
    void testSetterDoubleValue() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(4);
        matrix.set(0, 0, 1d);
        matrix.set(0, 1, 2d);
        matrix.set(0, 2, 3d);
        matrix.set(0, 3, 4d);
        matrix.set(1, 0, 5d);
        matrix.set(1, 1, 6d);
        matrix.set(1, 2, 7d);
        matrix.set(1, 3, 8d);
        matrix.set(2, 0, 9d);
        matrix.set(2, 1, 10d);
        matrix.set(2, 2, 11d);
        matrix.set(2, 3, 12d);
        matrix.set(3, 0, 13d);
        matrix.set(3, 1, 14d);
        matrix.set(3, 2, 15d);
        matrix.set(3, 3, 16d);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
    }

    @Test
    void testSetIdentity() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix.setIdentity();
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
    }

    @Test
    void testSetZero() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix.setZero();
        TestUtil{{ E }}.assertEquals(matrix,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0);
    }

    @Test
    void testResize() {
        final MatrixN{{ E }} matrix1 = new MatrixN{{ E }}(4);
        final MatrixN{{ E }} resize1 = matrix1.resize(2);
        TestUtil{{ E }}.assertEquals(resize1.size(), 2);
        final MatrixN{{ E }} matrix2 = new MatrixN{{ E }}(4);
        final MatrixN{{ E }} resize2 = matrix2.resize(8);
        TestUtil{{ E }}.assertEquals(resize2.size(), 8);
        TestUtil{{ E }}.assertEquals(resize2.get(7, 7), 0);
    }

    @Test
    void testMatrixNAddition() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        final MatrixN{{ E }} m = new MatrixN{{ E }}(
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1);
        matrix = matrix.add(m);
        TestUtil{{ E }}.assertEquals(matrix,
                2, 3, 4, 5,
                6, 7, 8, 9,
                10, 11, 12, 13,
                14, 15, 16, 17);
    }

    @Test
    void testMatrixNSubtraction() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        final MatrixN{{ E }} m = new MatrixN{{ E }}(
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1);
        matrix = matrix.sub(m);
        TestUtil{{ E }}.assertEquals(matrix,
                0, 1, 2, 3,
                4, 5, 6, 7,
                8, 9, 10, 11,
                12, 13, 14, 15);
    }

    @Test
    void testFloatFactorMultiplication() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.mul(2);
        TestUtil{{ E }}.assertEquals(matrix,
                2, 4, 6, 8,
                10, 12, 14, 16,
                18, 20, 22, 24,
                26, 28, 30, 32);
    }

    @Test
    void testDoubleFactorMultiplication() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.mul(2d);
        TestUtil{{ E }}.assertEquals(matrix,
                2, 4, 6, 8,
                10, 12, 14, 16,
                18, 20, 22, 24,
                26, 28, 30, 32);
    }

    @Test
    void testMatrixNMultiplication() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 10, 0, 0,
                0, 1, 0, 4,
                0, 0, 1, 0,
                0, 0, 0, 1);
        final MatrixN{{ E }} m = new MatrixN{{ E }}(
                -1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 4, 1);
        matrix = matrix.mul(m);
        TestUtil{{ E }}.assertEquals(matrix,
                -1, 10, 0, 0,
                0, 1, 16, 4,
                0, 0, 1, 0,
                0, 0, 4, 1);
    }

    @Test
    void testFloatFactorDivision() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.div(0.5f);
        TestUtil{{ E }}.assertEquals(matrix,
                2, 4, 6, 8,
                10, 12, 14, 16,
                18, 20, 22, 24,
                26, 28, 30, 32);
    }

    @Test
    void testDoubleFactorDivision() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.div(0.5);
        TestUtil{{ E }}.assertEquals(matrix,
                2, 4, 6, 8,
                10, 12, 14, 16,
                18, 20, 22, 24,
                26, 28, 30, 32);
    }

    @Test
    void testMatrixNDivision() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 10, 0, 0,
                0, 1, 0, 4,
                0, 0, 1, 0,
                0, 0, 0, 1);
        final MatrixN{{ E }} m = new MatrixN{{ E }}(
                -1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 4, 1);
        matrix = matrix.div(m);
        TestUtil{{ E }}.assertEquals(matrix,
                -1, 10, 0, 0,
                0, 1, -16, 4,
                0, 0, 1, 0,
                0, 0, -4, 1);
    }

    @Test
    void testRaiseToFloatPower() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.pow(2);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 4, 9, 16,
                25, 36, 49, 64,
                81, 100, 121, 144,
                169, 196, 225, 256);
    }

    @Test
    void testRaiseToDoublePower() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.pow(2d);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 4, 9, 16,
                25, 36, 49, 64,
                81, 100, 121, 144,
                169, 196, 225, 256);
    }

    @Test
    void testTranslateVectorN() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        matrix = matrix.translate(new VectorN{{ E }}(2, 3, 4));
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 2,
                0, 1, 0, 3,
                0, 0, 1, 4,
                0, 0, 0, 1);
    }

    @Test
    void testTranslateFloatComponents() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        matrix = matrix.translate(2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 2,
                0, 1, 0, 3,
                0, 0, 1, 4,
                0, 0, 0, 1);
    }

    @Test
    void testScaleVectorN() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        matrix = matrix.scale(new VectorN{{ E }}(2, 3, 4, 5));
        TestUtil{{ E }}.assertEquals(matrix,
                2, 0, 0, 0,
                0, 3, 0, 0,
                0, 0, 4, 0,
                0, 0, 0, 5);
    }

    @Test
    void testScaleFloatComponents() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        matrix = matrix.scale(2, 3, 4, 5);
        TestUtil{{ E }}.assertEquals(matrix,
                2, 0, 0, 0,
                0, 3, 0, 0,
                0, 0, 4, 0,
                0, 0, 0, 5);
    }

    @Test
    void testRotateComplex() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        matrix = matrix.rotate(new Complex{{ E }}(2, 3));
        TestUtil{{ E }}.assertEquals(matrix,
                ({{ e }}) (2/SQRT13), ({{ e }}) (-3/SQRT13), 0, 0,
                ({{ e }}) (3/SQRT13), ({{ e }}) (2/SQRT13), 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
    }

    @Test
    void testRotateQuaternion() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        matrix = matrix.rotate(new Quaternion{{ E }}(4, 3, 2, 0));
        TestUtil{{ E }}.assertEquals(matrix,
                ({{ e }}) (3/29d), ({{ e }}) (24/29d), ({{ e }}) (16/29d), 0,
                ({{ e }}) (24/29d), ({{ e }}) (-11/29d), ({{ e }}) (12/29d), 0,
                ({{ e }}) (16/29d), ({{ e }}) (12/29d), ({{ e }}) (-21/29d), 0,
                0, 0, 0, 1);
    }

    @Test
    void testTransformVectorN() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        final VectorN{{ E }} vector = matrix.scale(2, 3, 4, 1).translate(4, 5, 3).transform(new VectorN{{ E }}(3, 2, 8, 1));
        TestUtil{{ E }}.assertEquals(vector, 10, 11, 35, 1);
    }

    @Test
    void testTransformFloatComponents() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
        final VectorN{{ E }} vector = matrix.scale(2, 3, 4, 1).translate(4, 5, 3).transform(3, 2, 8, 1);
        TestUtil{{ E }}.assertEquals(vector, 10, 11, 35, 1);
    }

    @Test
    void testFloor() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                ({{ e }}) -1.1, ({{ e }}) 2.5, ({{ e }}) 2.9, ({{ e }}) 3.2,
                ({{ e }}) -6.3, ({{ e }}) 2.2, ({{ e }}) 2.1, ({{ e }}) 5.6,
                ({{ e }}) -8.8, ({{ e }}) 8.1, ({{ e }}) 4.6, ({{ e }}) 6.7,
                ({{ e }}) -1.3, ({{ e }}) 1.7, ({{ e }}) 7.3, ({{ e }}) 7.6);
        matrix = matrix.floor();
        TestUtil{{ E }}.assertEquals(matrix,
                -2, 2, 2, 3,
                -7, 2, 2, 5,
                -9, 8, 4, 6,
                -2, 1, 7, 7);
    }

    @Test
    void testCeiling() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                ({{ e }}) -1.1, ({{ e }}) 2.5, ({{ e }}) 2.9, ({{ e }}) 3.2,
                ({{ e }}) -6.3, ({{ e }}) 2.2, ({{ e }}) 2.1, ({{ e }}) 5.6,
                ({{ e }}) -8.8, ({{ e }}) 8.1, ({{ e }}) 4.6, ({{ e }}) 6.7,
                ({{ e }}) -1.3, ({{ e }}) 1.7, ({{ e }}) 7.3, ({{ e }}) 7.6);
        matrix = matrix.ceil();
        TestUtil{{ E }}.assertEquals(matrix,
                -1, 3, 3, 4,
                -6, 3, 3, 6,
                -8, 9, 5, 7,
                -1, 2, 8, 8);
    }

    @Test
    void testRound() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                ({{ e }}) -1.1, ({{ e }}) 2.5, ({{ e }}) 2.9, ({{ e }}) 3.2,
                ({{ e }}) -6.3, ({{ e }}) 2.2, ({{ e }}) 2.1, ({{ e }}) 5.6,
                ({{ e }}) -8.8, ({{ e }}) 8.1, ({{ e }}) 4.6, ({{ e }}) 6.7,
                ({{ e }}) -1.3, ({{ e }}) 1.7, ({{ e }}) 7.3, ({{ e }}) 7.6);
        matrix = matrix.round();
        TestUtil{{ E }}.assertEquals(matrix,
                -1, 3, 3, 3,
                -6, 2, 2, 6,
                -9, 8, 5, 7,
                -1, 2, 7, 8);
    }

    @Test
    void testAbsolute() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                -1, -1, -1, -1,
                -1, -1, -1, -1,
                -1, -1, -1, -1,
                -1, -1, -1, -1);
        matrix = matrix.abs();
        TestUtil{{ E }}.assertEquals(matrix,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1);
        MatrixN{{ E }} matrix2 = new MatrixN{{ E }}(
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1);
        matrix2 = matrix2.abs();
        TestUtil{{ E }}.assertEquals(matrix2,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1,
                1, 1, 1, 1);
    }

    @Test
    void testNegate() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, -1, 1, -1,
                -1, 1, -1, 1,
                1, -1, 1, -1,
                -1, 1, -1, 1);
        matrix = matrix.negate();
        TestUtil{{ E }}.assertEquals(matrix,
                -1, 1, -1, 1,
                1, -1, 1, -1,
                -1, 1, -1, 1,
                1, -1, 1, -1);
    }

    @Test
    void testTranspose() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                5, 6, 7, 8,
                9, 10, 11, 12,
                13, 14, 15, 16);
        matrix = matrix.transpose();
        TestUtil{{ E }}.assertEquals(matrix,
                1, 5, 9, 13,
                2, 6, 10, 14,
                3, 7, 11, 15,
                4, 8, 12, 16);
    }

    @Test
    void testTrace() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final {{ e }} value = matrix.trace();
        TestUtil{{ E }}.assertEquals(value, 10);
    }

    @Test
    void testDeterminant() {
        final MatrixN{{ E }} matrix1 = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final {{ e }} value1 = matrix1.determinant();
        TestUtil{{ E }}.assertEquals(value1, 24);
        final MatrixN{{ E }} matrix2 = new MatrixN{{ E }}(0, 1, 2, 3, 4, 5, 6, 7, 8);
        final {{ e }} value2 = matrix2.determinant();
        TestUtil{{ E }}.assertEquals(value2, 0);
    }

    @Test
    void testInvert() {
        MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                4, 1, 2, 3,
                3, 4, 1, 2,
                2, 3, 1, 4);
        matrix = matrix.invert();
        TestUtil{{ E }}.assertEquals(matrix,
                ({{ e }}) -0.1875, ({{ e }}) 0.275, ({{ e }}) 0.0625, ({{ e }}) -0.05,
                ({{ e }}) 0.0625, ({{ e }}) -0.225, ({{ e }}) 0.3125, ({{ e }}) -0.05,
                ({{ e }}) 0.4375, ({{ e }}) 0.025, ({{ e }}) 0.1875, ({{ e }}) -0.55,
                ({{ e }}) -0.0625, ({{ e }}) 0.025, ({{ e }}) -0.3125, ({{ e }}) 0.45);
        Assertions.assertThrows(ArithmeticException.class, () -> new MatrixN{{ E }}(
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0
        ).invert());
    }

    @Test
    void testConvertToMatrix2() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final Matrix2{{ E }} matrix2 = matrix.toMatrix2();
        TestUtil{{ E }}.assertEquals(matrix2,
                1, 0,
                0, 2);
    }

    @Test
    void testConvertToMatrix3() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final Matrix3{{ E }} matrix3 = matrix.toMatrix3();
        TestUtil{{ E }}.assertEquals(matrix3,
                1, 0, 0,
                0, 2, 0,
                0, 0, 3);
    }

    @Test
    void testConvertToMatrix4() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final Matrix4{{ E }} matrix4 = matrix.toMatrix4();
        TestUtil{{ E }}.assertEquals(matrix4,
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
    }

    @Test
    void testConvertToMatrixf() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final MatrixNf matrixN = matrix.toFloat();
        TestUtilf.assertEquals(matrixN,
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
    }

    @Test
    void testConvertToMatrixd() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final MatrixNd matrixN = matrix.toDouble();
        TestUtild.assertEquals(matrixN,
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
    }

    @Test
    void testConvertToArrayRowMajorDefault() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final {{ e }}[] array = matrix.toArray();
        TestUtil{{ E }}.assertEquals(array,
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
    }

    @Test
    void testConvertToArray() {
        final MatrixN{{ E }} matrix1 = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final {{ e }}[] array1 = matrix1.toArray(false);
        TestUtil{{ E }}.assertEquals(array1,
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final MatrixN{{ E }} matrix2 = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final {{ e }}[] array2 = matrix2.toArray(true);
        TestUtil{{ E }}.assertEquals(array2,
                1, 0, 0, 0,
                2, 2, 0, 0,
                3, 0, 3, 0,
                4, 0, 0, 4);
    }

    @Test
    void testEquals() {
        final MatrixN{{ E }} matrix01 = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final MatrixN{{ E }} matrix02 = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        assertEquals(matrix01, matrix02);
        final MatrixN{{ E }} matrix11 = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        final MatrixN{{ E }} matrix12 = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 4, 0,
                0, 7, 3, 0,
                0, 0, 0, 4);
        Assertions.assertNotEquals(matrix11, matrix12);
    }

    @Test
    void testCloning() {
        final MatrixN{{ E }} matrix = new MatrixN{{ E }}(
                1, 2, 3, 4,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
        Assertions.assertEquals(matrix, matrix.clone());
    }

    @Test
    void testCreateFromScalingVectorN() {
        final MatrixN{{ E }} matrix = MatrixN{{ E }}.createScaling(new VectorN{{ E }}(1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
    }

    @Test
    void testCreateFromScalingFloatComponents() {
        final MatrixN{{ E }} matrix = MatrixN{{ E }}.createScaling(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 3, 0,
                0, 0, 0, 4);
    }

    @Test
    void testCreateTranslationVectorN() {
        final MatrixN{{ E }} matrix = MatrixN{{ E }}.createTranslation(new VectorN{{ E }}(1, 2, 3));
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 1,
                0, 1, 0, 2,
                0, 0, 1, 3,
                0, 0, 0, 1);
    }

    @Test
    void testCreateTranslationFloatComponents() {
        final MatrixN{{ E }} matrix = MatrixN{{ E }}.createTranslation(1, 2, 3);
        TestUtil{{ E }}.assertEquals(matrix,
                1, 0, 0, 1,
                0, 1, 0, 2,
                0, 0, 1, 3,
                0, 0, 0, 1);
    }

    @Test
    void testCreateRotationFromComplex() {
        final MatrixN{{ E }} matrix = MatrixN{{ E }}.createRotation(4, new Complex{{ E }}(2, 3));
        TestUtil{{ E }}.assertEquals(matrix,
                ({{ e }}) (2/SQRT13), ({{ e }}) (-3/SQRT13), 0, 0,
                ({{ e }}) (3/SQRT13), ({{ e }}) (2/SQRT13), 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);
    }

    @Test
    void testCreateRotationFromQuaternion() {
        final MatrixN{{ E }} matrix = MatrixN{{ E }}.createRotation(4, new Quaternion{{ E }}(4, 3, 2, 0));
        TestUtil{{ E }}.assertEquals(matrix,
                ({{ e }}) (3/29d), ({{ e }}) (24/29d), ({{ e }}) (16/29d), 0,
                ({{ e }}) (24/29d), ({{ e }}) (-11/29d), ({{ e }}) (12/29d), 0,
                ({{ e }}) (16/29d), ({{ e }}) (12/29d), ({{ e }}) (-21/29d), 0,
                0, 0, 0, 1);
    }

    {#  @Test
    void testCreateLookAt() {
        // TODO: figure out a test for this
    }

    @Test
    void testCreatePerspectiveDouble() {
        // TODO: figure out a test for this
    }

    @Test
    void testCreatePerspectiveFloat() {
        // TODO: figure out a test for this
    }

    @Test
    void testCreateOrthographicDouble() {
        // TODO: figure out a test for this
    }

    @Test
    void testCreateOrthographicFloat() {
        // TODO: figure out a test for this
    } #}
}
