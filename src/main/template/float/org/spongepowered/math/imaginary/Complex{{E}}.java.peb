package org.spongepowered.math.imaginary;

import java.io.Serializable;
import java.lang.Override;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.HashFunctions;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};

/**
 * Represent a complex number of the form {@code x + yi}. The x and y components are stored as {@code {{ e }}}s. This class is immutable.
 */
@Immutable
public final class Complex{{ E }} implements Imaginary{{ E }}, Comparable<Complex{{ E }}>, Serializable {

    private static final long serialVersionUID = 1;
    /**
     * An immutable identity (0, 0) complex.
     */
    public static final Complex{{ E }} ZERO = new Complex{{ E }}(0, 0);
    /**
     * An immutable identity (1, 0) complex.
     */
    public static final Complex{{ E }} IDENTITY = new Complex{{ E }}(1, 0);
    private final {{ e }} x;
    private final {{ e }} y;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    /**
     * Constructs a new complex. The components are set to the identity (1, 0).
     */
    public Complex{{ E }}() {
        this(1, 0);
    }

    /**
     * Constructs a new complex from the {{ EOverload }} components.
     *
     * @param x The x (real) component
     * @param y The y (imaginary) component
     */
    public Complex{{ E }}(final {{ EOverload }} x, final {{ EOverload }} y) {
        this(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Constructs a new complex from the {{ e }} components.
     *
     * @param x The x (real) component
     * @param y The y (imaginary) component
     */
    public Complex{{ E }}(final {{ e }} x, final {{ e }} y) {
        this.x = x;
        this.y = y;
    }

    /**
     * Gets the x (real) component of this complex.
     *
     * @return The x (real) component
     */
    public {{ e }} x() {
        return this.x;
    }

    /**
     * Gets the y (imaginary) component of this complex.
     *
     * @return The y (imaginary) component
     */
    public {{ e }} y() {
        return this.y;
    }

    /**
     * Adds another complex to this one.
     *
     * @param c The complex to add
     * @return A new complex, which is the sum of both
     */
    public Complex{{ E }} add(final Complex{{ E }} c) {
        return this.add(c.x, c.y);
    }

    /**
     * Adds the {{ EOverload }} components of another complex to this one.
     *
     * @param x The x (real) component of the complex to add
     * @param y The y (imaginary) component of the complex to add
     * @return A new complex, which is the sum of both
     */
    public Complex{{ E }} add(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.add(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Adds the {{ e }} components of another complex to this one.
     *
     * @param x The x (real) component of the complex to add
     * @param y The y (imaginary) component of the complex to add
     * @return A new complex, which is the sum of both
     */
    public Complex{{ E }} add(final {{ e }} x, final {{ e }} y) {
        return new Complex{{ E }}(this.x + x, this.y + y);
    }

    /**
     * Subtracts another complex from this one.
     *
     * @param c The complex to subtract
     * @return A new complex, which is the difference of both
     */
    public Complex{{ E }} sub(final Complex{{ E }} c) {
        return this.sub(c.x, c.y);
    }

    /**
     * Subtracts the {{ EOverload }} components of another complex from this one.
     *
     * @param x The x (real) component of the complex to subtract
     * @param y The y (imaginary) component of the complex to subtract
     * @return A new complex, which is the difference of both
     */
    public Complex{{ E }} sub(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.sub(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Subtracts the {{ e }} components of another complex from this one.
     *
     * @param x The x (real) component of the complex to subtract
     * @param y The y (imaginary) component of the complex to subtract
     * @return A new complex, which is the difference of both
     */
    public Complex{{ E }} sub(final {{ e }} x, final {{ e }} y) {
        return new Complex{{ E }}(this.x - x, this.y - y);
    }

    /**
     * Multiplies the components of this complex by a {{ EOverload }} scalar.
     *
     * @param a The multiplication scalar
     * @return A new complex, which has each component multiplied by the scalar
     */
    public Complex{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    /**
     * Multiplies the components of this complex by a {{ e }} scalar.
     *
     * @param a The multiplication scalar
     * @return A new complex, which has each component multiplied by the scalar
     */
    @Override
    public Complex{{ E }} mul(final {{ e }} a) {
        return new Complex{{ E }}(this.x * a, this.y * a);
    }

    /**
     * Multiplies another complex with this one.
     *
     * @param c The complex to multiply with
     * @return A new complex, which is the product of both
     */
    public Complex{{ E }} mul(final Complex{{ E }} c) {
        return this.mul(c.x, c.y);
    }

    /**
     * Multiplies the {{ EOverload }} components of another complex with this one.
     *
     * @param x The x (real) component of the complex to multiply with
     * @param y The y (imaginary) component of the complex to multiply with
     * @return A new complex, which is the product of both
     */
    public Complex{{ E }} mul(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.mul(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Multiplies the {{ e }} components of another complex with this one.
     *
     * @param x The x (real) component of the complex to multiply with
     * @param y The y (imaginary) component of the complex to multiply with
     * @return A new complex, which is the product of both
     */
    public Complex{{ E }} mul(final {{ e }} x, final {{ e }} y) {
        return new Complex{{ E }}(
                this.x * x - this.y * y,
                this.x * y + this.y * x);
    }

    /**
     * Divides the components of this complex by a {{ EOverload }} scalar.
     *
     * @param a The division scalar
     * @return A new complex, which has each component divided by the scalar
     */
    public Complex{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    /**
     * Divides the components of this complex by a {{ e }} scalar.
     *
     * @param a The division scalar
     * @return A new complex, which has each component divided by the scalar
     */
    @Override
    public Complex{{ E }} div(final {{ e }} a) {
        return new Complex{{ E }}(this.x / a, this.y / a);
    }

    /**
     * Divides this complex by another one.
     *
     * @param c The complex to divide with
     * @return The quotient of the two complexes
     */
    public Complex{{ E }} div(final Complex{{ E }} c) {
        return this.div(c.x, c.y);
    }

    /**
     * Divides this complex by the {{ EOverload }} components of another one.
     *
     * @param x The x (real) component of the complex to divide with
     * @param y The y (imaginary) component of the complex to divide with
     * @return The quotient of the two complexes
     */
    public Complex{{ E }} div(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.div(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Divides this complex by the {{ e }} components of another one.
     *
     * @param x The x (real) component of the complex to divide with
     * @param y The y (imaginary) component of the complex to divide with
     * @return The quotient of the two complexes
     */
    public Complex{{ E }} div(final {{ e }} x, final {{ e }} y) {
        final {{ e }} d = x * x + y * y;
        return new Complex{{ E }}(
                (this.x * x + this.y * y) / d,
                (this.y * x - this.x * y) / d);
    }

    /**
     * Returns the dot product of this complex with another one.
     *
     * @param c The complex to calculate the dot product with
     * @return The dot product of the two complexes
     */
    public {{ e }} dot(final Complex{{ E }} c) {
        return this.dot(c.x, c.y);
    }

    /**
     * Returns the dot product of this complex with the {{ EOverload }} components of another one.
     *
     * @param x The x (real) component of the complex to calculate the dot product with
     * @param y The y (imaginary) component of the complex to calculate the dot product with
     * @return The dot product of the two complexes
     */
    public {{ e }} dot(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.dot(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Returns the dot product of this complex with the {{ e }} components of another one.
     *
     * @param x The x (real) component of the complex to calculate the dot product with
     * @param y The y (imaginary) component of the complex to calculate the dot product with
     * @return The dot product of the two complexes
     */
    public {{ e }} dot(final {{ e }} x, final {{ e }} y) {
        return this.x * x + this.y * y;
    }

    /**
     * Rotates a vector by this complex.
     *
     * @param v The vector to rotate
     * @return The rotated vector
     */
    public Vector2{{ E }} rotate(final Vector2{{ E }} v) {
        return this.rotate(v.x(), v.y());
    }

    /**
     * Rotates the {{ EOverload }} components of a vector by this complex.
     *
     * @param x The x component of the vector
     * @param y The y component of the vector
     * @return The rotated vector
     */
    public Vector2{{ E }} rotate(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.rotate(({{ e }}) x, ({{ e }}) y);
    }

    /**
     * Rotates the {{ e }} components of a vector by this complex.
     *
     * @param x The x component of the vector
     * @param y The y component of the vector
     * @return The rotated vector
     */
    public Vector2{{ E }} rotate(final {{ e }} x, final {{ e }} y) {
        final {{ e }} length = this.length();
        if (Math.abs(length) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot rotate by the zero complex");
        }
        final {{ e }} nx = this.x / length;
        final {{ e }} ny = this.y / length;
        return new Vector2{{ E }}(x * nx - y * ny, y * nx + x * ny);
    }

    /**
     * Returns a unit vector pointing in the same direction as this complex on the complex plane.
     *
     * @return The vector representing the direction this complex is pointing to
     */
    public Vector2{{ E }} direction() {
        return new Vector2{{ E }}(this.x, this.y).normalize();
    }

    /**
     * Returns the angle in radians formed by the direction vector of this complex on the complex plane.
     *
     * @return The angle in radians of the direction vector of this complex
     */
    public {{ e }} angleRad() {
        return ({{ e }}) TrigMath.atan2(this.y, this.x);
    }

    /**
     * Returns the angle in degrees formed by the direction vector of this complex on the complex plane.
     *
     * @return The angle in degrees of the direction vector of this complex
     */
    public {{ e }} angleDeg() {
        return ({{ e }}) Math.toDegrees(this.angleRad());
    }

    /**
     * Returns the conjugate of this complex. <br> Conjugation of a complex <code>a</code> is an operation returning complex <code>a'</code> such that <code>a' * a = a * a' = |a|<sup>2</sup></code> where
     * <code>|a|<sup>2</sup></code> is squared length of <code>a</code>.
     *
     * @return A new complex, which is the conjugate of this one
     */
    @Override
    public Complex{{ E }} conjugate() {
        return new Complex{{ E }}(this.x, -this.y);
    }

    /**
     * Returns the inverse of this complex. <br> Inversion of a complex <code>a</code> returns complex <code>a<sup>-1</sup> = a' / |a|<sup>2</sup></code> where <code>a'</code> is {@link #conjugate()
     * conjugation} of <code>a</code>, and <code>|a|<sup>2</sup></code> is squared length of <code>a</code>. <br> For any complexes <code>a, b, c</code>, such that <code>a * b = c</code> equations
     * <code>a<sup>-1</sup> * c = b</code> and <code>c * b<sup>-1</sup> = a</code> are true.
     *
     * @return A new complex, which is the inverse of this one
     */
    @Override
    public Complex{{ E }} invert() {
        final {{ e }} lengthSquared = this.lengthSquared();
        if (Math.abs(lengthSquared) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot invert a complex of length zero");
        }
        return this.conjugate().div(lengthSquared);
    }

    /**
     * Returns the square of the length of this complex.
     *
     * @return The square of the length
     */
    @Override
    public {{ e }} lengthSquared() {
        return this.x * this.x + this.y * this.y;
    }

    /**
     * Returns the length of this complex.
     *
     * @return The length
     */
    @Override
    public {{ e }} length() {
        return ({{ e }}) Math.sqrt(this.lengthSquared());
    }

    /**
     * Normalizes this complex.
     *
     * @return A new complex of unit length
     */
    @Override
    public Complex{{ E }} normalize() {
        final {{ e }} length = this.length();
        if (Math.abs(length) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot normalize the zero complex");
        }
        return new Complex{{ E }}(this.x / length, this.y / length);
    }

    /**
     * Converts this complex to a quaternion by
     * using (0, 0, 1) as a rotation axis.
     *
     * @return A quaternion of this rotation around the unit z
     */
    public Quaternion{{ E }} toQuaternion() {
        return this.toQuaternion(Vector3{{ E }}.UNIT_Z);
    }

    /**
     * Converts this complex to a quaternion by
     * using the provided vector as a rotation axis.
     *
     * @param axis The rotation axis
     * @return A quaternion of this rotation around the given axis
     */
    public Quaternion{{ E }} toQuaternion(final Vector3{{ E }} axis) {
        return this.toQuaternion(axis.x(), axis.y(), axis.z());
    }

    /**
     * Converts this complex to a quaternion by
     * using the provided {{ EOverload }} components vector
     * as a rotation axis.
     *
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return A quaternion of this rotation around the given axis
     */
    public Quaternion{{ E }} toQuaternion(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return this.toQuaternion(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    /**
     * Converts this complex to a quaternion by
     * using the provided {{ e }} components vector
     * as a rotation axis.
     *
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return A quaternion of this rotation around the given axis
     */
    public Quaternion{{ E }} toQuaternion(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return Quaternion{{ E }}.fromAngleRadAxis(this.angleRad(), x, y, z);
    }

    @Override
    public Complexf toFloat() {
        return new Complexf(this.x, this.y);
    }

    @Override
    public Complexd toDouble() {
        return new Complexd(this.x, this.y);
    }

    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Complex{{ E }})) {
            return false;
        }
        final Complex{{ E }} that = (Complex{{ E }}) other;
        if ({{ ET }}.compare(that.x, this.x) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.y, this.y) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            final int result = (this.x != +0.0f ? {{ ET }}.hashCode(this.x) : 0);
            this.hashCode = 31 * result + (this.y != +0.0f ? {{ ET }}.hashCode(this.y) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    @Override
    public int compareTo(final Complex{{ E }} that) {
        return (int) Math.signum(this.lengthSquared() - that.lengthSquared());
    }

    @Override
    public String toString() {
        return "(" + this.x + ", " + this.y + ")";
    }

    /**
     * Creates a new complex from the {{ e }} real component.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code x} is 0.</p>
     *
     * @param x The x (real) component
     * @return The complex created from the {{ e }} real component
     */
    public static Complex{{ E }} fromReal(final {{ e }} x) {
         return x == 0 ? Complex{{ E }}.ZERO : new Complex{{ E }}(x, 0);
    }

    /**
     * Creates a new complex from the {{ e }} imaginary components.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code y} is 0.</p>
     *
     * @param y The y (imaginary) component
     * @return The complex created from the {{ e }} imaginary component
     */
    public static Complex{{ E }} fromImaginary(final {{ e }} y) {
         return y == 0 ? Complex{{ E }}.ZERO : new Complex{{ E }}(0, y);
    }

    /**
     * Creates a new complex from the {{ e }} components.
     *
     * <p>The {@link #ZERO} constant is re-used when both {@code x} and {@code z} are 0.</p>
     *
     * @param x The x (real) component
     * @param y The y (imaginary) component
     * @return The complex created from the {{ e }} components
     */
    public static Complex{{ E }} from(final {{ e }} x, final {{ e }} y) {
         return x == 0 && y == 0 ? Complex{{ E }}.ZERO : new Complex{{ E }}(x, y);
    }

    /**
     * Creates a new complex from the angle defined from the first to the second vector.
     *
     * @param from The first vector
     * @param to The second vector
     * @return The complex defined by the angle between the vectors
     */
    public static Complex{{ E }} fromRotationTo(final Vector2{{ E }} from, final Vector2{{ E }} to) {
        return Complex{{ E }}.fromAngleRad(TrigMath.acos(from.dot(to) / (from.length() * to.length())));
    }

    /**
     * Creates a new complex from the angle defined from the first to the second vector.
     *
     * @param from The first vector
     * @param to The second vector
     * @return The complex defined by the angle between the vectors
     */
    public static Complex{{ E }} fromRotationTo(final Vector3{{ E }} from, final Vector3{{ E }} to) {
        return Complex{{ E }}.fromAngleRad(TrigMath.acos(from.dot(to) / (from.length() * to.length())));
    }

    /**
     * Creates a new complex from the {{ EOverload }} angle in degrees.
     *
     * @param angle The angle in degrees
     * @return The complex defined by the angle
     */
    public static Complex{{ E }} fromAngleDeg(final {{ EOverload }} angle) {
        return Complex{{ E }}.fromAngleRad(Math.toRadians(angle));
    }

    /**
     * Creates a new complex from the {{ EOverload }} angle in radians.
     *
     * @param angle The angle in radians
     * @return The complex defined by the angle
     */
    public static Complex{{ E }} fromAngleRad(final {{ EOverload }} angle) {
        return Complex{{ E }}.fromAngleRad(({{ e }}) angle);
    }

    /**
     * Creates a new complex from the {{ e }} angle in radians.
     *
     * @param angle The angle in radians
     * @return The complex defined by the angle
     */
    public static Complex{{ E }} fromAngleDeg(final {{ e }} angle) {
        return Complex{{ E }}.fromAngleRad(({{ e }}) Math.toRadians(angle));
    }

    /**
     * Creates a new complex from the {{ e }} angle in radians.
     *
     * @param angle The angle in radians
     * @return The complex defined by the angle
     */
    public static Complex{{ E }} fromAngleRad(final {{ e }} angle) {
        return new Complex{{ E }}(TrigMath.cos(angle), TrigMath.sin(angle));
    }

}
