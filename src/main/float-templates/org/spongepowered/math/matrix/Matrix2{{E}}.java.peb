package org.spongepowered.math.matrix;

import java.io.Serializable;
import java.lang.Override;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.HashFunctions;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};

/**
* A 2x2 matrix containing values of type {@code {{ e }}}.`
*/
@Immutable
public final class Matrix2{{ E }} implements Matrix{{ E }}, Serializable {

    private static final long serialVersionUID = 1;
    public static final Matrix2{{ E }} ZERO = new Matrix2{{ E }}(
        0, 0,
        0, 0
    );
    public static final Matrix2{{ E }} IDENTITY = new Matrix2{{ E }}(
        1, 0,
        0, 1
    );
    private final {{ e }} m00, m01;
    private final {{ e }} m10, m11;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    public Matrix2{{ E }}(final Matrix3{{ E }} m) {
        this(
                m.get(0, 0), m.get(0, 1),
                m.get(1, 0), m.get(1, 1));
    }

    public Matrix2{{ E }}(final Matrix4{{ E }} m) {
        this(
                m.get(0, 0), m.get(0, 1),
                m.get(1, 0), m.get(1, 1));
    }

    public Matrix2{{ E }}(final MatrixN{{ E }} m) {
        this(
                m.get(0, 0), m.get(0, 1),
                m.get(1, 0), m.get(1, 1));
    }

    public Matrix2{{ E }}(
            final {{ EOverload }} m00, final {{ EOverload }} m01,
            final {{ EOverload }} m10, final {{ EOverload }} m11
    ) {
        this(
            ({{ e }}) m00, ({{ e }}) m01,
            ({{ e }}) m10, ({{ e }}) m11
        );
    }

    public Matrix2{{ E }}(
        final {{ e }} m00, final {{ e }} m01,
        final {{ e }} m10, final {{ e }} m11
    ) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
    }

    @Override
    public {{ e }} get(final int row, final int col) {
        switch (row) {
        case 0:
            switch (col) {
            case 0:
                return this.m00;
            case 1:
                return this.m01;
            }
            break;
        case 1:
            switch (col) {
            case 0:
                return this.m10;
            case 1:
                return this.m11;
            }
            break;
        }
        throw new IllegalArgumentException(
                (row < 0 || row > 1 ? "row must be greater or equal to than zero and smaller than 2. " : "") +
                (col < 0 || col > 1 ? "col must be greater than or equal to zero and smaller than 2." : ""));
    }

    @Override
    public Vector2{{ E }} row(final int row) {
        return new Vector2{{ E }}(this.get(row, 0), this.get(row, 1));
    }

    @Override
    public Vector2{{ E }} column(final int col) {
        return new Vector2{{ E }}(this.get(0, col), this.get(1, col));
    }

    public Matrix2{{ E }} add(final Matrix2{{ E }} m) {
        return new Matrix2{{ E }}(
            this.m00 + m.m00, this.m01 + m.m01,
            this.m10 + m.m10, this.m11 + m.m11
        );
    }

    public Matrix2{{ E }} sub(final Matrix2{{ E }} m) {
        return new Matrix2{{ E }}(
            this.m00 - m.m00, this.m01 - m.m01,
            this.m10 - m.m10, this.m11 - m.m11
        );
    }

    public Matrix2{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    @Override
    public Matrix2{{ E }} mul(final {{ e }} a) {
        return new Matrix2{{ E }}(
                this.m00 * a, this.m01 * a,
                this.m10 * a, this.m11 * a
        );
    }

    public Matrix2{{ E }} mul(final Matrix2{{ E }} m) {
        return new Matrix2{{ E }}(
                this.m00 * m.m00 + this.m01 * m.m10, this.m00 * m.m01 + this.m01 * m.m11,
                this.m10 * m.m00 + this.m11 * m.m10, this.m10 * m.m01 + this.m11 * m.m11
        );
    }

    public Matrix2{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    @Override
    public Matrix2{{ E }} div(final {{ e }} a) {
        return new Matrix2{{ E }}(
            this.m00 / a, this.m01 / a,
            this.m10 / a, this.m11 / a
        );
    }

    public Matrix2{{ E }} div(final Matrix2{{ E }} m) {
        return this.mul(m.invert());
    }

    public Matrix2{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow(({{ e }}) pow);
    }

    @Override
    public Matrix2{{ E }} pow(final {{ e }} pow) {
        return new Matrix2{{ E }}(
            Math.pow(this.m00, pow), Math.pow(this.m01, pow),
            Math.pow(this.m10, pow), Math.pow(this.m11, pow)
        );
    }

    public Matrix2{{ E }} translate(final {{ EOverload }} x) {
        return this.translate(({{ e }}) x);
    }

    public Matrix2{{ E }} translate(final {{ e }} x) {
        return Matrix2{{ E }}.createTranslation(x).mul(this);
    }

    public Matrix2{{ E }} scale(final {{ EOverload }} scale) {
        return this.scale(({{ e }}) scale);
    }

    public Matrix2{{ E }} scale(final {{ e }} scale) {
        return this.scale(scale, scale);
    }

    public Matrix2{{ E }} scale(final Vector2{{ E }} v) {
        return this.scale(v.x(), v.y());
    }

    public Matrix2{{ E }} scale(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.scale(({{ e }}) x, ({{ e }}) y);
    }

    public Matrix2{{ E }} scale(final {{ e }} x, final {{ e }} y) {
        return Matrix2{{ E }}.createScaling(x, y).mul(this);
    }

    public Matrix2{{ E }} rotate(final Complex{{ E }} rot) {
        return Matrix2{{ E }}.createRotation(rot).mul(this);
    }

    public Vector2{{ E }} transform(final Vector2{{ E }} v) {
        return this.transform(v.x(), v.y());
    }

    public Vector2{{ E }} transform(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.transform(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} transform(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(
            this.m00 * x + this.m01 * y,
            this.m10 * x + this.m11 * y
        );
    }

    @Override
    public Matrix2{{ E }} floor() {
        return new Matrix2{{ E }}(
            GenericMath.floor(this.m00), GenericMath.floor(this.m01),
            GenericMath.floor(this.m10), GenericMath.floor(this.m11)
        );
    }

    @Override
    public Matrix2{{ E }} ceil() {
        return new Matrix2{{ E }}(
                Math.ceil(this.m00), Math.ceil(this.m01),
                Math.ceil(this.m10), Math.ceil(this.m11));
    }

    @Override
    public Matrix2{{ E }} round() {
        return new Matrix2{{ E }}(
                Math.round(this.m00), Math.round(this.m01),
                Math.round(this.m10), Math.round(this.m11));
    }

    @Override
    public Matrix2{{ E }} abs() {
        return new Matrix2{{ E }}(
            Math.abs(this.m00), Math.abs(this.m01),
            Math.abs(this.m10), Math.abs(this.m11)
        );
    }

    @Override
    public Matrix2{{ E }} negate() {
        return new Matrix2{{ E }}(
            -this.m00, -this.m01,
            -this.m10, -this.m11
        );
    }

    @Override
    public Matrix2{{ E }} transpose() {
        return new Matrix2{{ E }}(
            this.m00, this.m10,
            this.m01, this.m11
        );
    }

    @Override
    public {{ e }} trace() {
        return this.m00 + this.m11;
    }

    @Override
    public {{ e }} determinant() {
        return this.m00 * this.m11 - this.m01 * this.m10;
    }

    @Override
    public Matrix2{{ E }} invert() {
        final {{ e }} det = this.determinant();
        if (Math.abs(det) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot inverse a matrix with a zero determinant");
        }
        return new Matrix2{{ E }}(
            this.m11 / det, -this.m01 / det,
            -this.m10 / det, this.m00 / det
        );
    }

    public Matrix3{{ E }} toMatrix3() {
        return new Matrix3{{ E }}(this);
    }

    public Matrix4{{ E }} toMatrix4() {
        return new Matrix4{{ E }}(this);
    }

    public MatrixN{{ E }} toMatrixN() {
        return new MatrixN{{ E }}(this);
    }

    public {{ e }}[] toArray() {
        return this.toArray(false);
    }

    @Override
    public {{ e }}[] toArray(final boolean columnMajor) {
        if (columnMajor) {
            return new {{ e }}[]{
                    this.m00, this.m10,
                    this.m01, this.m11
            };
        } else {
            return new {{ e }}[]{
                    this.m00, this.m01,
                    this.m10, this.m11
            };
        }
    }

    @Override
    public Matrix2f toFloat() {
        return new Matrix2f(this.m00, this.m01, this.m10, this.m11);
    }

    @Override
    public Matrix2d toDouble() {
        return new Matrix2d(this.m00, this.m01, this.m10, this.m11);
    }

    @Override
    public String toString() {
        return this.m00 + " " + this.m01 + "\n" + this.m10 + " " + this.m11;
    }

    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Matrix2{{ E }})) {
            return false;
        }
        final Matrix2{{ E }} that = (Matrix2{{ E }}) other;
        if ({{ ET }}.compare(that.m00, this.m00) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m01, this.m01) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m10, this.m10) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m11, this.m11) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            int result = (this.m00 != +0.0f ? {{ ET }}.hashCode(this.m00) : 0);
            result = 31 * result + (this.m01 != +0.0f ? {{ ET }}.hashCode(this.m01) : 0);
            result = 31 * result + (this.m10 != +0.0f ? {{ ET }}.hashCode(this.m10) : 0);
            this.hashCode = 31 * result + (this.m11 != +0.0f ? {{ ET }}.hashCode(this.m11) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    public static Matrix2{{ E }} from(final {{ e }} n) {
         return n == 0 ? Matrix2{{ E}}.ZERO : new Matrix2{{ E }}(n, n, n, n);
    }

    public static Matrix2{{ E }} from(final {{ e }} m00, final {{ e }} m01, final {{ e }} m10, final {{ e }} m11) {
         return m00 == 0 && m01 == 0 && m10 == 0 && m11 == 0 ? Matrix2{{ E }}.ZERO : new Matrix2{{ E }}(m00, m01, m10, m11);
    }

    public static Matrix2{{ E }} fromDiagonal(final {{ e }} m00, final {{ e }} m11) {
         return m00 == 0 && m11 == 0 ? Matrix2{{ E }}.ZERO : new Matrix2{{ E }}(m00, 0, 0, m11);
    }

    public static Matrix2{{ E }} createScaling(final {{ EOverload }} scale) {
        return Matrix2{{ E }}.createScaling(({{ e }}) scale);
    }

    public static Matrix2{{ E }} createScaling(final {{ e }} scale) {
        return Matrix2{{ E }}.createScaling(scale, scale);
    }

    public static Matrix2{{ E }} createScaling(final Vector2{{ E }} v) {
        return Matrix2{{ E }}.createScaling(v.x(), v.y());
    }

    public static Matrix2{{ E }} createScaling(final {{ EOverload }} x, final {{ EOverload }} y) {
        return Matrix2{{ E }}.createScaling(({{ e }}) x, ({{ e }}) y);
    }

    public static Matrix2{{ E }} createScaling(final {{ e }} x, final {{ e }} y) {
        return new Matrix2{{ E }}(
            x, 0,
            0, y
        );
    }

    public static Matrix2{{ E }} createTranslation(final {{ EOverload }} x) {
        return Matrix2{{ E }}.createTranslation(({{ e }}) x);
    }

    public static Matrix2{{ E }} createTranslation(final {{ e }} x) {
        return new Matrix2{{ E }}(
                1, x,
                0, 1);
    }

    public static Matrix2{{ E }} createRotation(Complex{{ E }} rot) {
        rot = rot.normalize();
        return new Matrix2{{ E }}(
                rot.x(), -rot.y(),
                rot.y(), rot.x());
    }

}
