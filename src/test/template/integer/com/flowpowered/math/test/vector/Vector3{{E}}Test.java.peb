package org.spongepowered.math.test.vector;

import java.util.Random;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.test.TestUtil{{ E }};
import org.spongepowered.math.test.{{ EDecEquiTest }};
import org.spongepowered.math.test.TestUtili;
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class Vector3{{ E }}Test {

    @Test
    void testZero() {
        final Vector3{{ E }} vector = Vector3{{ E }}.ZERO;
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 0, ({{ e }}) 0);
    }

    @Test
    void testCopyVector2DefaultZConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector2{{ E }}(0, 1));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 0);
    }

    @Test
    void testCopyVector2{{ ES }}ZConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector2{{ E }}(0, 1), ({{ e }}) 3);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 3);
    }

    @Test
    void testCopyVector4Constructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new Vector4{{ E }}(0, 1, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testCopyVectorNConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(new VectorN{{ E }}(0, 1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testDoubleComponentsConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0.5, 1.7, 3.8);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 3);
    }

    @Test
    void test{{ ES }}ComponentsConstructor() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 3);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0, ({{ e }}) 1, ({{ e }}) 3);
    }

    @Test
    void testGetters() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 3);
        TestUtil{{ E }}.assertEquals(vector.x(), ({{ e }}) 0);
        TestUtil{{ E }}.assertEquals(vector.y(), ({{ e }}) 1);
        TestUtil{{ E }}.assertEquals(vector.z(), ({{ e }}) 3);
    }

    @Test
    void testVector3Addition() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 1).add(new Vector3{{ E }}(5, -2, 3));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5, ({{ e }}) -1, ({{ e }}) 4);
    }

    @Test
    void testDoubleComponentsAddition() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 5).add(5.5, -2.5, 3.8);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5, ({{ e }}) -2, ({{ e }}) 8);
    }

    @Test
    void test{{ ES }}ComponentsAddition() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(0, 1, 5).add(({{ e }}) 5, ({{ e }}) -2, ({{ e }}) 3);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 5, ({{ e }}) -1, ({{ e }}) 8);
    }

    @Test
    void testVector3Subtraction() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(10, 5, 1).sub(new Vector3{{ E }}(9, 4, 2));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) -1);
    }

    @Test
    void testDoubleComponentsSubtraction() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(10, 5, 1).sub(9, 4.5, 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) -1);
    }

    @Test
    void test{{ ES }}ComponentsSubtraction() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(10, 5, 1).sub(({{ e }}) 9, ({{ e }}) 4, ({{ e }}) 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) -1);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(2.5);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 4, ({{ e }}) 6, ({{ e }}) 8);
    }

    @Test
    void test{{ ES }}FactorMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(({{ e }}) 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 4, ({{ e }}) 6, ({{ e }}) 8);
    }

    @Test
    void testVector3Multiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(new Vector3{{ E }}(1, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 12);
    }

    @Test
    void testDoubleComponentsMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(1.1, 2.5, 3.4);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 12);
    }

    @Test
    void test{{ ES }}ComponentsMultiplication() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 4).mul(({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 12);
    }

    @Test
    void testDoubleFactorDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 5).div(2.1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void test{{ ES }}FactorDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 3, 5).div(({{ e }}) 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testVector3Division() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 20).div(new Vector3{{ E }}(2, 4, 8));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testDoubleComponentsDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 17).div(2.1, 4.5, 8.3);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void test{{ ES }}ComponentsDivision() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 17).div(({{ e }}) 2, ({{ e }}) 4, ({{ e }}) 8);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testVector3DotProduct() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).dot(new Vector3{{ E }}(4, 5, 6));
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 47);
    }

    @Test
    void testDoubleComponentsDotProduct() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).dot(4d, 5d, 6d);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 47);
    }

    @Test
    void test{{ ES }}ComponentsDotProduct() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).dot(({{ e }}) 4, ({{ e }}) 5, ({{ e }}) 6);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 47);
    }

    @Test
    void testVector3Project() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(20, 30, 40).project(new Vector3{{ E }}(10, 10, 10));
        TestUtil{{ E }}.assertEquals(vector, 30, 30, 30);
    }

    @Test
    void testDoubleComponentsProject() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(20, 30, 40).project(10d, 10d, 10d);
        TestUtil{{ E }}.assertEquals(vector, 30, 30, 30);
    }

    @Test
    void testFloatComponentsProject() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(20, 30, 40).project(10, 10, 10);
        TestUtil{{ E }}.assertEquals(vector, 30, 30, 30);
    }

    @Test
    void testVector3Cross() {
        final Vector3{{ E }} f = new Vector3{{ E }}(2, 3, 4).cross(new Vector3{{ E }}(4, 3, 6.5));
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 6, ({{ e }}) 4, ({{ e }}) -6);
    }

    @Test
    void testDoubleComponentsCross() {
        final Vector3{{ E }} f = new Vector3{{ E }}(2, 3, 4).cross(4, 3, 6.5);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 6, ({{ e }}) 4, ({{ e }}) -6);
    }

    @Test
    void test{{ ES }}ComponentsCross() {
        final Vector3{{ E }} f = new Vector3{{ E }}(2, 3, 4).cross(({{ e }}) 4, ({{ e }}) 3, ({{ e }}) 6);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 6, ({{ e }}) 4, ({{ e }}) -6);
    }

    @Test
    void testRaiseTo{{ ES }}Power() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 8).pow(({{ e }}) 2);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 4, ({{ e }}) 36, ({{ e }}) 64);
    }

    @Test
    void testRaiseToDoublePower() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 8).pow(2d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 4, ({{ e }}) 36, ({{ e }}) 64);
    }

    @Test
    void testAbsolute() {
        final Vector3{{ E }} vector1 = new Vector3{{ E }}(-2, -6, -55).abs();
        TestUtil{{ E }}.assertEquals(vector1, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 55);
        final Vector3{{ E }} vector2 = new Vector3{{ E }}(2, 6, 55).abs();
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) 2, ({{ e }}) 6, ({{ e }}) 55);
    }

    @Test
    void testNegate() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, -6, 15).negate();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) -2, ({{ e }}) 6, ({{ e }}) -15);
    }

    @Test
    void testVector3Minimum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, -1).min(new Vector3{{ E }}(3, 4, 10));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) -1);
    }

    @Test
    void testDoubleComponentsMinimum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).min(3d, 4d, -5d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) -5);
    }

    @Test
    void test{{ ES }}ComponentsMinimum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).min(({{ e }}) 3, ({{ e }}) 4, ({{ e }}) -5);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 2, ({{ e }}) 4, ({{ e }}) -5);
    }

    @Test
    void testVector3Maximum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).max(new Vector3{{ E }}(3, 4, -5));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3, ({{ e }}) 6, ({{ e }}) 10);
    }

    @Test
    void testDoubleComponentsMaximum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).max(3d, 4d, -5d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3, ({{ e }}) 6, ({{ e }}) 10);
    }

    @Test
    void test{{ ES }}ComponentsMaximum() {
        final Vector3{{ E }} vector = new Vector3{{ E }}(2, 6, 10).max(({{ e }}) 3, ({{ e }}) 4, ({{ e }}) -5);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3, ({{ e }}) 6, ({{ e }}) 10);
    }

    @Test
    void testVector3DistanceSquared() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).distanceSquared(new Vector3{{ E }}(5, 6, 7));
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 27);
    }

    @Test
    void testDoubleComponentsDistanceSquared() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).distanceSquared(5d, 6d, 7d);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 27);
    }

    @Test
    void test{{ ES }}ComponentsDistanceSquared() {
        final {{ e }} f = new Vector3{{ E }}(2, 3, 4).distanceSquared(({{ e }}) 5, ({{ e }}) 6, ({{ e }}) 7);
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 27);
    }

    @Test
    void testVector3Distance() {
        final {{ EDecEqui }} f = new Vector3{{ E }}(0, 2, 12).distance(new Vector3{{ E }}(0, 5, 16));
        {{ EDecEquiTest }}.assertEquals(f, ({{ e }}) 5);
    }

    @Test
    void testDoubleComponentsDistance() {
        final {{ EDecEqui }} f = new Vector3{{ E }}(0, 2, 12).distance(0d, 5d, 16d);
        {{ EDecEquiTest }}.assertEquals(f, ({{ e }}) 5);
    }

    @Test
    void test{{ ES }}ComponentsDistance() {
        final {{ EDecEqui }} f = new Vector3{{ E }}(0, 2, 12).distance(({{ e }}) 0, ({{ e }}) 5, ({{ e }}) 16);
        {{ EDecEquiTest }}.assertEquals(f, ({{ e }}) 5);
    }

    @Test
    void testLength() {
        final {{ EDecEqui }} f = new Vector3{{ E }}(4, 4, 7).length();
        {{ EDecEquiTest }}.assertEquals(f, ({{ e }}) 9);
    }

    @Test
    void testLengthSquared() {
        final {{ e }} f = new Vector3{{ E }}(4, 4, 7).lengthSquared();
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) 81);
    }

    @Test
    void testMinAxis() {
        final Vector3{{ E }} vector1 = new Vector3{{ E }}(1, 2, 3);
        TestUtili.assertEquals(vector1.minAxis(), 0);
        final Vector3{{ E }} vector2 = new Vector3{{ E }}(2, 1, 3);
        TestUtili.assertEquals(vector2.minAxis(), 1);
        final Vector3{{ E }} vector3 = new Vector3{{ E }}(3, 2, 1);
        TestUtili.assertEquals(vector3.minAxis(), 2);
    }

    @Test
    void testMaxAxis() {
        final Vector3{{ E }} vector1 = new Vector3{{ E }}(3, 1, 2);
        TestUtili.assertEquals(vector1.maxAxis(), 0);
        final Vector3{{ E }} vector2 = new Vector3{{ E }}(1, 3, 2);
        TestUtili.assertEquals(vector2.maxAxis(), 1);
        final Vector3{{ E }} vector3 = new Vector3{{ E }}(1, 2, 3);
        TestUtili.assertEquals(vector3.maxAxis(), 2);
    }

    @Test
    void testConvertToVector2() {
        final Vector2{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector2();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 2);
    }

    @Test
    void testConvertToVector4DefaultW() {
        final Vector4{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector4();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 0);
    }

    @Test
    void testConvertToVector4{{ ES }}W() {
        final Vector4{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector4(({{ e }}) 4);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4);
    }

    @Test
    void testConvertToVector4DoubleW() {
        final Vector4{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVector4(4d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3, ({{ e }}) 4);
    }

    @Test
    void testConvertToVectorN() {
        final VectorN{{ E }} vector = new Vector3{{ E }}(1, 2, 3).toVectorN();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3);
    }

    @Test
    void testConvertToArray() {
        final {{ e }}[] array = new Vector3{{ E }}(1, 2, 3).toArray();
        TestUtil{{ E }}.assertEquals(array, ({{ e }}) 1, ({{ e }}) 2, ({{ e }}) 3);
    }

    @Test
    void testComparison() {
        final int c1 = new Vector3{{ E }}(10, 20, 30).compareTo(new Vector3{{ E }}(20, 20, 30));
        Assertions.assertTrue(c1 < 0);
        final int c2 = new Vector3{{ E }}(10, 20, 30).compareTo(new Vector3{{ E }}(10, 20, 30));
        Assertions.assertTrue(c2 == 0);
        final int c3 = new Vector3{{ E }}(10, 20, 30).compareTo(new Vector3{{ E }}(10, 10, 30));
        Assertions.assertTrue(c3 > 0);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new Vector3{{ E }}(122, 43, 96).equals(new Vector3{{ E }}(122, 43, 96)));
        Assertions.assertFalse(new Vector3{{ E }}(122, 43, 96).equals(new Vector3{{ E }}(378, 95, 96)));
    }

}
