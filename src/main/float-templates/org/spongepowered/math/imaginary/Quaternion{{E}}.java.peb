package org.spongepowered.math.imaginary;

import java.io.Serializable;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.matrix.Matrix3{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};

/**
 * Represent a quaternion of the form <code>xi + yj + zk + w</code>.
 *
 * <p>The x, y, z and w components are stored as {@code {{ e }}}s. This class is
 * immutable.</p>
 */
@Immutable
public final class Quaternion{{ E }} implements Imaginary{{ E }}, Comparable<Quaternion{{ E }}>, Serializable {

    private static final long serialVersionUID = 1;
    /**
     * An immutable identity (0, 0, 0, 0) quaternion.
     */
    public static final Quaternion{{ E }} ZERO = new Quaternion{{ E }}(0, 0, 0, 0);
    /**
     * An immutable identity (0, 0, 0, 1) quaternion.
     */
    public static final Quaternion{{ E }} IDENTITY = new Quaternion{{ E }}(0, 0, 0, 1);
    private final {{ e }} x;
    private final {{ e }} y;
    private final {{ e }} z;
    private final {{ e }} w;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    /**
     * Constructs a new quaternion from the {{ EOverload }} components.
     *
     * @param x The x (imaginary) component
     * @param y The y (imaginary) component
     * @param z The z (imaginary) component
     * @param w The w (real) component
     */
    public Quaternion{{ E }}(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        this(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    /**
     * Constructs a new quaternion from the {{ e }} components.
     *
     * @param x The x (imaginary) component
     * @param y The y (imaginary) component
     * @param z The z (imaginary) component
     * @param w The w (real) component
     */
    public Quaternion{{ E }}(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }

    /**
     * Gets the x (imaginary) component of this quaternion.
     *
     * @return The x (imaginary) component
     */
    public {{ e }} x() {
        return this.x;
    }

    /**
     * Gets the y (imaginary) component of this quaternion.
     *
     * @return The y (imaginary) component
     */
    public {{ e }} y() {
        return this.y;
    }

    /**
     * Gets the z (imaginary) component of this quaternion.
     *
     * @return The z (imaginary) component
     */
    public {{ e }} z() {
        return this.z;
    }

    /**
     * Gets the w (real) component of this quaternion.
     *
     * @return The w (real) component
     */
    public {{ e }} w() {
        return this.w;
    }

    /**
     * Adds another quaternion to this one.
     *
     * @param q The quaternion to add
     * @return A new quaternion, which is the sum of both
     */
    public Quaternion{{ E }} add(final Quaternion{{ E }} q) {
        return this.add(q.x, q.y, q.z, q.w);
    }

    /**
     * Adds the {{ EOverload }} components of another quaternion to this one.
     *
     * @param x The x (imaginary) component of the quaternion to add
     * @param y The y (imaginary) component of the quaternion to add
     * @param z The z (imaginary) component of the quaternion to add
     * @param w The w (real) component of the quaternion to add
     * @return A new quaternion, which is the sum of both
     */
    public Quaternion{{ E }} add(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.add(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    /**
     * Adds the {{ e }} components of another quaternion to this one.
     *
     * @param x The x (imaginary) component of the quaternion to add
     * @param y The y (imaginary) component of the quaternion to add
     * @param z The z (imaginary) component of the quaternion to add
     * @param w The w (real) component of the quaternion to add
     * @return A new quaternion, which is the sum of both
     */
    public Quaternion{{ E }} add(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Quaternion{{ E }}(this.x + x, this.y + y, this.z + z, this.w + w);
    }

    /**
     * Subtracts another quaternion from this one.
     *
     * @param q The quaternion to subtract
     * @return A new quaternion, which is the difference of both
     */
    public Quaternion{{ E }} sub(final Quaternion{{ E }} q) {
        return this.sub(q.x, q.y, q.z, q.w);
    }

    /**
     * Subtracts the {{ EOverload }} components of another quaternion from this one.
     *
     * @param x The x (imaginary) component of the quaternion to subtract
     * @param y The y (imaginary) component of the quaternion to subtract
     * @param z The z (imaginary) component of the quaternion to subtract
     * @param w The w (real) component of the quaternion to subtract
     * @return A new quaternion, which is the difference of both
     */
    public Quaternion{{ E }} sub(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.sub(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    /**
     * Subtracts the {{ e }} components of another quaternion from this one.
     *
     * @param x The x (imaginary) component of the quaternion to subtract
     * @param y The y (imaginary) component of the quaternion to subtract
     * @param z The z (imaginary) component of the quaternion to subtract
     * @param w The w (real) component of the quaternion to subtract
     * @return A new quaternion, which is the difference of both
     */
    public Quaternion{{ E }} sub(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Quaternion{{ E }}(this.x - x, this.y - y, this.z - z, this.w - w);
    }

    /**
     * Multiplies the components of this quaternion by a {{ EOverload }} scalar.
     *
     * @param a The multiplication scalar
     * @return A new quaternion, which has each component multiplied by the scalar
     */
    public Quaternion{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    /**
     * Multiplies the components of this quaternion by a {{ e }} scalar.
     *
     * @param a The multiplication scalar
     * @return A new quaternion, which has each component multiplied by the scalar
     */
    @Override
    public Quaternion{{ E }} mul(final {{ e }} a) {
        return new Quaternion{{ E }}(this.x * a, this.y * a, this.z * a, this.w * a);
    }

    /**
     * Multiplies another quaternion with this one.
     *
     * @param q The quaternion to multiply with
     * @return A new quaternion, which is the product of both
     */
    public Quaternion{{ E }} mul(final Quaternion{{ E }} q) {
        return this.mul(q.x, q.y, q.z, q.w);
    }

    /**
     * Multiplies the {{ EOverload }} components of another quaternion with this one.
     *
     * @param x The x (imaginary) component of the quaternion to multiply with
     * @param y The y (imaginary) component of the quaternion to multiply with
     * @param z The z (imaginary) component of the quaternion to multiply with
     * @param w The w (real) component of the quaternion to multiply with
     * @return A new quaternion, which is the product of both
     */
    public Quaternion{{ E }} mul(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.mul(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    /**
     * Multiplies the {{ e }} components of another quaternion with this one.
     *
     * @param x The x (imaginary) component of the quaternion to multiply with
     * @param y The y (imaginary) component of the quaternion to multiply with
     * @param z The z (imaginary) component of the quaternion to multiply with
     * @param w The w (real) component of the quaternion to multiply with
     * @return A new quaternion, which is the product of both
     */
    public Quaternion{{ E }} mul(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Quaternion{{ E }}(
                this.w * x + this.x * w + this.y * z - this.z * y,
                this.w * y + this.y * w + this.z * x - this.x * z,
                this.w * z + this.z * w + this.x * y - this.y * x,
                this.w * w - this.x * x - this.y * y - this.z * z);
    }

    /**
     * Divides the components of this quaternion by a {{ EOverload }} scalar.
     *
     * @param a The division scalar
     * @return A new quaternion, which has each component divided by the scalar
     */
    public Quaternion{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    /**
     * Divides the components of this quaternion by a {{ e }} scalar.
     *
     * @param a The division scalar
     * @return A new quaternion, which has each component divided by the scalar
     */
    @Override
    public Quaternion{{ E }} div(final {{ e }} a) {
        return new Quaternion{{ E }}(this.x / a, this.y / a, this.z / a, this.w / a);
    }

    /**
     * Divides this quaternions by another one.
     *
     * @param q The quaternion to divide with
     * @return The quotient of the two quaternions
     */
    public Quaternion{{ E }} div(final Quaternion{{ E }} q) {
        return this.div(q.x, q.y, q.z, q.w);
    }

    /**
     * Divides this quaternions by the {{ EOverload }} components of another one.
     *
     * @param x The x (imaginary) component of the quaternion to divide with
     * @param y The y (imaginary) component of the quaternion to divide with
     * @param z The z (imaginary) component of the quaternion to divide with
     * @param w The w (real) component of the quaternion to divide with
     * @return The quotient of the two quaternions
     */
    public Quaternion{{ E }} div(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.div(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    /**
     * Divides this quaternions by the {{ e }} components of another one.
     *
     * @param x The x (imaginary) component of the quaternion to divide with
     * @param y The y (imaginary) component of the quaternion to divide with
     * @param z The z (imaginary) component of the quaternion to divide with
     * @param w The w (real) component of the quaternion to divide with
     * @return The quotient of the two quaternions
     */
    public Quaternion{{ E }} div(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        final {{ e }} d = x * x + y * y + z * z + w * w;
        return new Quaternion{{ E }}(
                (this.x * w - this.w * x - this.z * y + this.y * z) / d,
                (this.y * w + this.z * x - this.w * y - this.x * z) / d,
                (this.z * w - this.y * x + this.x * y - this.w * z) / d,
                (this.w * w + this.x * x + this.y * y + this.z * z) / d);
    }

    /**
     * Returns the dot product of this quaternion with another one.
     *
     * @param q The quaternion to calculate the dot product with
     * @return The dot product of the two quaternions
     */
    public {{ e }} dot(final Quaternion{{ E }} q) {
        return this.dot(q.x, q.y, q.z, q.w);
    }

    /**
     * Returns the dot product of this quaternion with the {{ EOverload }} components of another one.
     *
     * @param x The x (imaginary) component of the quaternion to calculate the dot product with
     * @param y The y (imaginary) component of the quaternion to calculate the dot product with
     * @param z The z (imaginary) component of the quaternion to calculate the dot product with
     * @param w The w (real) component of the quaternion to calculate the dot product with
     * @return The dot product of the two quaternions
     */
    public {{ e }} dot(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.dot(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    /**
     * Returns the dot product of this quaternion with the {{ e }} components of another one.
     *
     * @param x The x (imaginary) component of the quaternion to calculate the dot product with
     * @param y The y (imaginary) component of the quaternion to calculate the dot product with
     * @param z The z (imaginary) component of the quaternion to calculate the dot product with
     * @param w The w (real) component of the quaternion to calculate the dot product with
     * @return The dot product of the two quaternions
     */
    public {{ e }} dot(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return this.x * x + this.y * y + this.z * z + this.w * w;
    }

    /**
     * Rotates a vector by this quaternion.
     *
     * @param v The vector to rotate
     * @return The rotated vector
     */
    public Vector3{{ E }} rotate(final Vector3{{ E }} v) {
        return this.rotate(v.x(), v.y(), v.z());
    }

    /**
     * Rotates the {{ EOverload }} components of a vector by this quaternion.
     *
     * @param x The x component of the vector
     * @param y The y component of the vector
     * @param z The z component of the vector
     * @return The rotated vector
     */
    public Vector3{{ E }} rotate(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return this.rotate(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    /**
     * Rotates the {{ e }} components of a vector by this quaternion.
     *
     * @param x The x component of the vector
     * @param y The y component of the vector
     * @param z The z component of the vector
     * @return The rotated vector
     */
    public Vector3{{ E }} rotate(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        final {{ e }} length = this.length();
        if (Math.abs(length) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot rotate by the zero quaternion");
        }
        final {{ e }} nx = this.x / length;
        final {{ e }} ny = this.y / length;
        final {{ e }} nz = this.z / length;
        final {{ e }} nw = this.w / length;
        final {{ e }} px = nw * x + ny * z - nz * y;
        final {{ e }} py = nw * y + nz * x - nx * z;
        final {{ e }} pz = nw * z + nx * y - ny * x;
        final {{ e }} pw = -nx * x - ny * y - nz * z;
        return new Vector3{{ E }}(
                pw * -nx + px * nw - py * nz + pz * ny,
                pw * -ny + py * nw - pz * nx + px * nz,
                pw * -nz + pz * nw - px * ny + py * nx);
    }

    /**
     * Returns a unit vector representing the direction of this quaternion, which is {@link Vector3{{ E }}#FORWARD} rotated by this quaternion.
     *
     * @return The vector representing the direction this quaternion is pointing to
     */
    public Vector3{{ E }} direction() {
        return this.rotate(Vector3{{ E }}.FORWARD);
    }

    /**
     * Returns the axis of rotation for this quaternion.
     *
     * @return The axis of rotation
     */
    public Vector3{{ E }} axis() {
        final {{ e }} q = ({{ e }}) Math.sqrt(1 - this.w * this.w);
        return new Vector3{{ E }}(this.x / q, this.y / q, this.z / q);
    }

    /**
     * Returns the angles in degrees around the x, y and z axes that correspond to the rotation represented by this quaternion.
     *
     * @return The angle in degrees for each axis, stored in a vector, in the corresponding component
     */
    public Vector3{{ E }} axesAnglesDeg() {
        return this.axesAnglesRad().mul(TrigMath.RAD_TO_DEG);
    }

    /**
     * Returns the angles in radians around the x, y and z axes that correspond to the rotation represented by this quaternion.
     *
     * @return The angle in radians for each axis, stored in a vector, in the corresponding component
     */
    public Vector3{{ E }} axesAnglesRad() {
        final double roll;
        final double pitch;
        final double yaw;
        final double test = this.w * this.x - this.y * this.z;
        if (Math.abs(test) < 0.4999) {
            roll = TrigMath.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.x * this.x + this.z * this.z));
            pitch = TrigMath.asin(2 * test);
            yaw = TrigMath.atan2(2 * (this.w * this.y + this.z * this.x), 1 - 2 * (this.x * this.x + this.y * this.y));
        } else {
            final int sign = (test < 0) ? -1 : 1;
            roll = 0;
            pitch = sign * Math.PI / 2;
            yaw = -sign * 2 * TrigMath.atan2(this.z, this.w);
        }
        return new Vector3{{ E }}(pitch, yaw, roll);
    }

    /**
     * Conjugates the quaternion.
     *
     * <p>Conjugation of a quaternion {@code a} is an operation returning
     * quaternion {@code a'} such that {@code a' * a = a * a' = |a|<sup>2</sup>}
     * where {@code |a|<sup>2</sup>} is squared length of {@code a}.</p>
     *
     * @return the conjugated quaternion
     */
    @Override
    public Quaternion{{ E }} conjugate() {
        return new Quaternion{{ E }}(-this.x, -this.y, -this.z, this.w);
    }

    /**
     * Inverts the quaternion.
     *
     * <p>Inversion of a quaternion {@code a} returns quaternion
     * {@code a<sup>-1</sup> = a' / |a|<sup>2</sup>} where {@code a'} is
     * {@link #conjugate() conjugation} of {@code a}, and {@code |a|<sup>2</sup>}
     * is squared length of {@code a}.</p>
     *
     * <p>For any quaternions {@code a, b, c} such that {@code a * b = c}, the
      * equations {@code a<sup>-1</sup> * c = b}
      * and {@code c * b<sup>-1</sup> = a} are true.</p>
     *
     * @return the inverted quaternion
     */
    @Override
    public Quaternion{{ E }} invert() {
        final {{ e }} lengthSquared = this.lengthSquared();
        if (Math.abs(lengthSquared) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot invert a quaternion of length zero");
        }
        return this.conjugate().div(lengthSquared);
    }

    /**
     * Returns the square of the length of this quaternion.
     *
     * @return The square of the length
     */
    @Override
    public {{ e }} lengthSquared() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }

    /**
     * Returns the length of this quaternion.
     *
     * @return The length
     */
    @Override
    public {{ e }} length() {
        return ({{ e }}) Math.sqrt(this.lengthSquared());
    }

    /**
     * Normalizes this quaternion.
     *
     * @return A new quaternion of unit length
     */
    @Override
    public Quaternion{{ E }} normalize() {
        final {{ e }} length = this.length();
        if (Math.abs(length) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot normalize the zero quaternion");
        }
        return new Quaternion{{ E }}(this.x / length, this.y / length, this.z / length, this.w / length);
    }

    /**
     * Converts this quaternion to a complex by extracting the rotation around
     * the axis and returning it as a rotation in the plane perpendicular to the
     * rotation axis.
     *
     * @return The rotation without the axis as a complex
     */
    public Complex{{ E }} toComplex() {
        final {{ e }} w2 = this.w * this.w;
        return new Complex{{ E }}(2 * w2 - 1, 2 * this.w * ({{ e }}) Math.sqrt(1 - w2));
    }

    @Override
    public Quaternionf toFloat() {
        return new Quaternionf(this.x, this.y, this.z, this.w);
    }

    @Override
    public Quaterniond toDouble() {
        return new Quaterniond(this.x, this.y, this.z, this.w);
    }

   @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Quaternion{{ E }})) {
            return false;
        }
        final Quaternion{{ E }} that = (Quaternion{{ E }}) other;
        if ({{ ET }}.compare(that.w, this.w) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.x, this.x) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.y, this.y) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.z, this.z) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            int result = (this.x != +0.0f ? {{ ET }}.hashCode(this.x) : 0);
            result = 31 * result + (this.y != +0.0f ? {{ ET }}.hashCode(this.y) : 0);
            result = 31 * result + (this.z != +0.0f ? {{ ET }}.hashCode(this.z) : 0);
            this.hashCode = 31 * result + (this.w != +0.0f ? {{ ET }}.hashCode(this.w) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    @Override
    public int compareTo(final Quaternion{{ E }} q) {
        return (int) Math.signum(this.lengthSquared() - q.lengthSquared());
    }

    @Override
    public String toString() {
        return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
    }

    /**
     * Creates a new quaternion from the {{ e }} real component.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code w} is 0.</p>
     *
     * @param w The w (real) component
     * @return The quaternion created from the {{ e }} real component
     */
    public static Quaternion{{ E }} fromReal(final {{ e }} w) {
         return w == 0 ? Quaternion{{ E }}.ZERO : new Quaternion{{ E }}(0, 0, 0, w);
    }

    /**
     * Creates a new quaternion from the {{ e }} imaginary components.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code x}, {@code y}, and {@code z} are 0.</p>
     *
     * @param x The x (imaginary) component
     * @param y The y (imaginary) component
     * @param z The z (imaginary) component
     * @return The quaternion created from the {{ e }} imaginary components
     */
    public static Quaternion{{ E }} fromImaginary(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
         return x == 0 && y == 0 && z == 0 ? Quaternion{{ E }}.ZERO : new Quaternion{{ E }}(x, y, z, 0);
    }

    /**
     * Creates a new quaternion from the {{ e }} components.
     *
     * <p>The {@link #ZERO} constant is re-used when {@code x}, {@code y}, {@code z}, and {@code w} are 0.</p>
     *
     * @param x The x (imaginary) component
     * @param y The y (imaginary) component
     * @param z The z (imaginary) component
     * @param w The w (real) component
     * @return The quaternion created from the {{ e }} components
     */
    public static Quaternion{{ E }} from(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
         return x == 0 && y == 0 && z == 0 && w == 0 ? Quaternion{{ E }}.ZERO : new Quaternion{{ E }}(x, y, z, w);
    }

    /**
     * Creates a new quaternion from the {{ EOverload }} angles in degrees around the x, y and z axes.
     *
     * @param pitch The rotation around x
     * @param yaw The rotation around y
     * @param roll The rotation around z
     * @return The quaternion defined by the rotations around the axes
     */
    public static Quaternion{{ E }} fromAxesAnglesDeg(final {{ EOverload }} pitch, final {{ EOverload }} yaw, final {{ EOverload }} roll) {
        return Quaternion{{ E }}.fromAxesAnglesDeg(({{ e }}) pitch, ({{ e }}) yaw, ({{ e }}) roll);
    }

    /**
     * Creates a new quaternion from the {{ EOverload }} angles in radians around the x, y and z axes.
     *
     * @param pitch The rotation around x
     * @param yaw The rotation around y
     * @param roll The rotation around z
     * @return The quaternion defined by the rotations around the axes
     */
    public static Quaternion{{ E }} fromAxesAnglesRad(final {{ EOverload }} pitch, final {{ EOverload }} yaw, final {{ EOverload }} roll) {
        return Quaternion{{ E }}.fromAxesAnglesRad(({{ e }}) pitch, ({{ e }}) yaw, ({{ e }}) roll);
    }

    /**
     * Creates a new quaternion from the {{ e }} angles in degrees around the x, y and z axes.
     *
     * @param pitch The rotation around x
     * @param yaw The rotation around y
     * @param roll The rotation around z
     * @return The quaternion defined by the rotations around the axes
     */
    public static Quaternion{{ E }} fromAxesAnglesDeg(final {{ e }} pitch, final {{ e }} yaw, final {{ e }} roll) {
        return Quaternion{{ E }}.fromAngleDegAxis(yaw, Vector3{{ E }}.UNIT_Y).
                mul(Quaternion{{ E }}.fromAngleDegAxis(pitch, Vector3{{ E }}.UNIT_X)).
                mul(Quaternion{{ E }}.fromAngleDegAxis(roll, Vector3{{ E }}.UNIT_Z));
    }

    /**
     * Creates a new quaternion from the {{ e }} angles in radians around the x, y and z axes.
     *
     * @param pitch The rotation around x
     * @param yaw The rotation around y
     * @param roll The rotation around z
     * @return The quaternion defined by the rotations around the axes
     */
    public static Quaternion{{ E }} fromAxesAnglesRad(final {{ e }} pitch, final {{ e }} yaw, final {{ e }} roll) {
        return Quaternion{{ E }}.fromAngleRadAxis(yaw, Vector3{{ E }}.UNIT_Y).
                mul(Quaternion{{ E }}.fromAngleRadAxis(pitch, Vector3{{ E }}.UNIT_X)).
                mul(Quaternion{{ E }}.fromAngleRadAxis(roll, Vector3{{ E }}.UNIT_Z));
    }

    /**
     * Creates a new quaternion from the angle-axis rotation defined from the first to the second vector.
     *
     * @param from The first vector
     * @param to The second vector
     * @return The quaternion defined by the angle-axis rotation between the vectors
     */
    public static Quaternion{{ E }} fromRotationTo(final Vector3{{ E }} from, final Vector3{{ E }} to) {
        return Quaternion{{ E }}.fromAngleRadAxis(TrigMath.acos(from.dot(to) / (from.length() * to.length())), from.cross(to));
    }

    /**
     * Creates a new quaternion from the rotation {{ EOverload }} angle in degrees around the axis vector.
     *
     * @param angle The rotation angle in degrees
     * @param axis The axis of rotation
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleDegAxis(final {{ EOverload }} angle, final Vector3{{ E }} axis) {
        return Quaternion{{E}}.fromAngleRadAxis(Math.toRadians(angle), axis);
    }

    /**
     * Creates a new quaternion from the rotation {{ EOverload }} angle in radians around the axis vector.
     *
     * @param angle The rotation angle in radians
     * @param axis The axis of rotation
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleRadAxis(final {{ EOverload }} angle, final Vector3{{ E }} axis) {
        return Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) angle, axis);
    }

    /**
     * Creates a new quaternion from the rotation {{ e }} angle in degrees around the axis vector.
     *
     * @param angle The rotation angle in degrees
     * @param axis The axis of rotation
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleDegAxis(final {{ e }} angle, final Vector3{{ E }} axis) {
        return Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) Math.toRadians(angle), axis);
    }

    /**
     * Creates a new quaternion from the rotation {{ e }} angle in radians around the axis vector.
     *
     * @param angle The rotation angle in radians
     * @param axis The axis of rotation
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleRadAxis(final {{ e }} angle, final Vector3{{ E }} axis) {
        return Quaternion{{ E }}.fromAngleRadAxis(angle, axis.x(), axis.y(), axis.z());
    }

    /**
     * Creates a new quaternion from the rotation {{ EOverload }} angle in degrees around the axis vector {{ EOverload }} components.
     *
     * @param angle The rotation angle in degrees
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleDegAxis(final {{ EOverload }} angle, final {{ EOverload }} x, final {{ EOverload }} y, final {{EOverload }} z) {
        return Quaternion{{ E }}.fromAngleRadAxis(Math.toRadians(angle), x, y, z);
    }

    /**
     * Creates a new quaternion from the rotation {{ EOverload }} angle in radians around the axis vector {{ EOverload }} components.
     *
     * @param angle The rotation angle in radians
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleRadAxis(final {{ EOverload }} angle, final {{ EOverload }} x, final {{ EOverload }} y, final {{EOverload }} z) {
        return Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) angle, ({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    /**
     * Creates a new quaternion from the rotation {{ e }} angle in degrees around the axis vector {{ e }} components.
     *
     * @param angle The rotation angle in degrees
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleDegAxis(final {{ e }} angle, final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) Math.toRadians(angle), x, y, z);
    }

    /**
     * Creates a new quaternion from the rotation {{ e }} angle in radians around the axis vector {{ e }} components.
     *
     * @param angle The rotation angle in radians
     * @param x The x component of the axis vector
     * @param y The y component of the axis vector
     * @param z The z component of the axis vector
     * @return The quaternion defined by the rotation around the axis
     */
    public static Quaternion{{ E }} fromAngleRadAxis(final {{ e }} angle, final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        final {{ e }} halfAngle = angle / 2;
        final {{ e }} q = TrigMath.sin(halfAngle) / ({{ e }}) Math.sqrt(x * x + y * y + z * z);
        return new Quaternion{{ E }}(x * q, y * q, z * q, TrigMath.cos(halfAngle));
    }

    /**
     * Creates a new quaternion from the rotation matrix. The matrix will be interpreted as a rotation matrix even if it is not.
     *
     * @param matrix The rotation matrix
     * @return The quaternion defined by the rotation matrix
     */
    public static Quaternion{{ E }} fromRotationMatrix(final Matrix3{{ E }} matrix) {
        final {{ e }} trace = matrix.trace();
        if (trace < 0) {
            if (matrix.get(1, 1) > matrix.get(0, 0)) {
                if (matrix.get(2, 2) > matrix.get(1, 1)) {
                    final {{ e }} r = ({{ e }}) Math.sqrt(matrix.get(2, 2) - matrix.get(0, 0) - matrix.get(1, 1) + 1);
                    final {{ e }} s = 0.5f / r;
                    return new Quaternion{{ E }}(
                            (matrix.get(2, 0) + matrix.get(0, 2)) * s,
                            (matrix.get(1, 2) + matrix.get(2, 1)) * s,
                            0.5f * r,
                            (matrix.get(1, 0) - matrix.get(0, 1)) * s);
                } else {
                    final {{ e }} r = ({{ e }}) Math.sqrt(matrix.get(1, 1) - matrix.get(2, 2) - matrix.get(0, 0) + 1);
                    final {{ e }} s = 0.5f / r;
                    return new Quaternion{{ E }}(
                            (matrix.get(0, 1) + matrix.get(1, 0)) * s,
                            0.5f * r,
                            (matrix.get(1, 2) + matrix.get(2, 1)) * s,
                            (matrix.get(0, 2) - matrix.get(2, 0)) * s);
                }
            } else if (matrix.get(2, 2) > matrix.get(0, 0)) {
                final {{ e }} r = ({{ e }}) Math.sqrt(matrix.get(2, 2) - matrix.get(0, 0) - matrix.get(1, 1) + 1);
                final {{ e }} s = 0.5f / r;
                return new Quaternion{{ E }}(
                        (matrix.get(2, 0) + matrix.get(0, 2)) * s,
                        (matrix.get(1, 2) + matrix.get(2, 1)) * s,
                        0.5f * r,
                        (matrix.get(1, 0) - matrix.get(0, 1)) * s);
            } else {
                final {{ e }} r = ({{ e }}) Math.sqrt(matrix.get(0, 0) - matrix.get(1, 1) - matrix.get(2, 2) + 1);
                final {{ e }} s = 0.5f / r;
                return new Quaternion{{ E }}(
                        0.5f * r,
                        (matrix.get(0, 1) + matrix.get(1, 0)) * s,
                        (matrix.get(2, 0) - matrix.get(0, 2)) * s,
                        (matrix.get(2, 1) - matrix.get(1, 2)) * s);
            }
        } else {
            final {{ e }} r = ({{ e }}) Math.sqrt(trace + 1);
            final {{ e }} s = 0.5f / r;
            return new Quaternion{{ E }}(
                    (matrix.get(2, 1) - matrix.get(1, 2)) * s,
                    (matrix.get(0, 2) - matrix.get(2, 0)) * s,
                    (matrix.get(1, 0) - matrix.get(0, 1)) * s,
                    0.5f * r);
        }
    }

}
