package com.flowpowered.math.vector;

import java.io.Serializable;

import com.flowpowered.math.GenericMath;
import com.flowpowered.math.HashFunctions;

public class Vector2#E# implements Vector#E#, Comparable<Vector2#E#>, Serializable, Cloneable {
    private static final long serialVersionUID = 1;
    public static final Vector2#E# ZERO = new Vector2#E#(0, 0);
    public static final Vector2#E# UNIT_X = new Vector2#E#(1, 0);
    public static final Vector2#E# UNIT_Y = new Vector2#E#(0, 1);
    public static final Vector2#E# ONE = new Vector2#E#(1, 1);
    private final #e# x;
    private final #e# y;
    private transient volatile boolean hashed = false;
    private transient volatile int hashCode = 0;

    public Vector2#E#() {
        this(0, 0);
    }

    public Vector2#E#(Vector2#E# v) {
        this(v.x, v.y);
    }

    public Vector2#E#(Vector3#E# v) {
        this(v.getX(), v.getY());
    }

    public Vector2#E#(Vector4#E# v) {
        this(v.getX(), v.getY());
    }

    public Vector2#E#(VectorN#E# v) {
        this(v.get(0), v.get(1));
    }

    public Vector2#E#(#EOverload# x, #EOverload# y) {
        this(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E#(#e# x, #e# y) {
        this.x = x;
        this.y = y;
    }

    public #e# getX() {
        return x;
    }

    public #e# getY() {
        return y;
    }

    public Vector2#E# add(Vector2#E# v) {
        return add(v.x, v.y);
    }

    public Vector2#E# add(#EOverload# x, #EOverload# y) {
        return add(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E# add(#e# x, #e# y) {
        return new Vector2#E#(this.x + x, this.y + y);
    }

    public Vector2#E# sub(Vector2#E# v) {
        return sub(v.x, v.y);
    }

    public Vector2#E# sub(#EOverload# x, #EOverload# y) {
        return sub(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E# sub(#e# x, #e# y) {
        return new Vector2#E#(this.x - x, this.y - y);
    }

    public Vector2#E# mul(#EOverload# a) {
        return mul(#EFloorFunc#(a));
    }

    @Override
    public Vector2#E# mul(#e# a) {
        return mul(a, a);
    }

    public Vector2#E# mul(Vector2#E# v) {
        return mul(v.x, v.y);
    }

    public Vector2#E# mul(#EOverload# x, #EOverload# y) {
        return mul(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E# mul(#e# x, #e# y) {
        return new Vector2#E#(this.x * x, this.y * y);
    }

    public Vector2#E# div(#EOverload# a) {
        return div(#EFloorFunc#(a));
    }

    @Override
    public Vector2#E# div(#e# a) {
        return div(a, a);
    }

    public Vector2#E# div(Vector2#E# v) {
        return div(v.x, v.y);
    }

    public Vector2#E# div(#EOverload# x, #EOverload# y) {
        return div(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E# div(#e# x, #e# y) {
        return new Vector2#E#(this.x / x, this.y / y);
    }

    public #e# dot(Vector2#E# v) {
        return dot(v.x, v.y);
    }

    public #e# dot(#EOverload# x, #EOverload# y) {
        return dot(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public #e# dot(#e# x, #e# y) {
        return this.x * x + this.y * y;
    }

    public Vector2#E# pow(#EOverload# pow) {
        return pow(#EFloorFunc#(pow));
    }

    @Override
    public Vector2#E# pow(#e# power) {
        return new Vector2#E#(Math.pow(x, power), Math.pow(y, power));
    }

    @Override
    public Vector2#E# abs() {
        return new Vector2#E#(Math.abs(x), Math.abs(y));
    }

    @Override
    public Vector2#E# negate() {
        return new Vector2#E#(-x, -y);
    }

    public Vector2#E# min(Vector2#E# v) {
        return min(v.x, v.y);
    }

    public Vector2#E# min(#EOverload# x, #EOverload# y) {
        return min(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E# min(#e# x, #e# y) {
        return new Vector2#E#(Math.min(this.x, x), Math.min(this.y, y));
    }

    public Vector2#E# max(Vector2#E# v) {
        return max(v.x, v.y);
    }

    public Vector2#E# max(#EOverload# x, #EOverload# y) {
        return max(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public Vector2#E# max(#e# x, #e# y) {
        return new Vector2#E#(Math.max(this.x, x), Math.max(this.y, y));
    }

    public #e# distanceSquared(Vector2#E# v) {
        return distanceSquared(v.x, v.y);
    }

    public #e# distanceSquared(#EOverload# x, #EOverload# y) {
        return distanceSquared(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public #e# distanceSquared(#e# x, #e# y) {
        final #e# dx = this.x - x;
        final #e# dy = this.y - y;
        return dx * dx + dy * dy;
    }

    public #EDecEqui# distance(Vector2#E# v) {
        return distance(v.x, v.y);
    }

    public #EDecEqui# distance(#EOverload# x, #EOverload# y) {
        return distance(#EFloorFunc#(x), #EFloorFunc#(y));
    }

    public #EDecEqui# distance(#e# x, #e# y) {
        return (#EDecEqui#) Math.sqrt(distanceSquared(x, y));
    }

    @Override
    public #e# lengthSquared() {
        return x * x + y * y;
    }

    @Override
    public #EDecEqui# length() {
        return (#EDecEqui#) Math.sqrt(lengthSquared());
    }

    /**
     * Return the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int getMinAxis() {
        return x < y ? 0 : 1;
    }

    /**
     * Return the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int getMaxAxis() {
        return x > y ? 0 : 1;
    }

    public Vector3#E# toVector3() {
        return toVector3(0);
    }

    public Vector3#E# toVector3(#EOverload# z) {
        return toVector3(#EFloorFunc#(z));
    }

    public Vector3#E# toVector3(#e# z) {
        return new Vector3#E#(this, z);
    }

    public Vector4#E# toVector4() {
        return toVector4(0, 0);
    }

    public Vector4#E# toVector4(#EOverload# z, #EOverload# w) {
        return toVector4(#EFloorFunc#(z), #EFloorFunc#(w));
    }

    public Vector4#E# toVector4(#e# z, #e# w) {
        return new Vector4#E#(this, z, w);
    }

    public VectorN#E# toVectorN() {
        return new VectorN#E#(this);
    }

    @Override
    public #e#[] toArray() {
        return new #e#[]{x, y};
    }

    @Override
    public Vector2i toInt() {
        return new Vector2i(x, y);
    }

    @Override
    public Vector2l toLong() {
        return new Vector2l(x, y);
    }

    @Override
    public Vector2f toFloat() {
        return new Vector2f(x, y);
    }

    @Override
    public Vector2d toDouble() {
        return new Vector2d(x, y);
    }

    @Override
    public int compareTo(Vector2#E# v) {
        return (int) (lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Vector2#E#)) {
            return false;
        }
        final Vector2#E# vector2 = (Vector2#E#) o;
        if (vector2.x != x) {
            return false;
        }
        if (vector2.y != y) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!hashed) {
            final int result = (x != +0.0f ? HashFunctions.hash(x) : 0);
            hashCode = 31 * result + (y != +0.0f ? HashFunctions.hash(y) : 0);
            hashed = true;
        }
        return hashCode;
    }

    @Override
    public Vector2#E# clone() {
        return new Vector2#E#(this);
    }

    @Override
    public String toString() {
        return "(" + x + ", " + y + ")";
    }
}
