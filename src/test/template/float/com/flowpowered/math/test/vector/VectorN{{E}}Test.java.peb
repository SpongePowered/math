package org.spongepowered.math.test.vector;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.spongepowered.math.test.TestUtil{{ E }}.SQRT5;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.test.TestUtilf;
import org.spongepowered.math.test.TestUtild;
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class VectorN{{ E }}Test {
    @Test
    void testSizeConstructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(5);
        TestUtil{{ E }}.assertEquals(vector, 0, 0, 0, 0, 0);
    }

    @Test
    void testCopyVector2Constructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new Vector2{{ E }}(0, 1));
        TestUtil{{ E }}.assertEquals(vector, 0, 1);
    }

    @Test
    void testCopyVector3Constructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new Vector3{{ E }}(0, 1, 2));
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 2);
    }

    @Test
    void testCopyVector4Constructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new Vector4{{ E }}(0, 1, 2, 3));
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 2, 3);
    }

    @Test
    void testCopyVectorNConstructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(new VectorN{{ E }}(0, 1, 2, 3, 4, 5));
        TestUtil{{ E }}.assertEquals(vector, 0, 1, 2, 3, 4, 5);
    }

    @Test
    void testComponentsConstructor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5);
        TestUtil{{ E }}.assertEquals(vector, 0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5);
    }

    @Test
    void testSize() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5);
        assertEquals(vector.size(), 6);
    }

    @Test
    void testGetter() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5);
        TestUtil{{ E }}.assertEquals(vector.get(0), 0);
        TestUtil{{ E }}.assertEquals(vector.get(1), ({{ e }}) 1.1);
        TestUtil{{ E }}.assertEquals(vector.get(2), ({{ e }}) 2.2);
        TestUtil{{ E }}.assertEquals(vector.get(3), ({{ e }}) 3.3);
        TestUtil{{ E }}.assertEquals(vector.get(4), ({{ e }}) 4.4);
        TestUtil{{ E }}.assertEquals(vector.get(5), ({{ e }}) 5.5);
    }

    @Test
    void testFlooredGetter() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5, ({{ e }}) -6.6);
        TestUtil{{ E }}.assertEquals(vector.floored(0), 0);
        TestUtil{{ E }}.assertEquals(vector.floored(1), 1);
        TestUtil{{ E }}.assertEquals(vector.floored(2), 2);
        TestUtil{{ E }}.assertEquals(vector.floored(3), 3);
        TestUtil{{ E }}.assertEquals(vector.floored(4), 4);
        TestUtil{{ E }}.assertEquals(vector.floored(5), 5);
        TestUtil{{ E }}.assertEquals(vector.floored(6), -7);
    }

    @Test
    void testSetter{{ ES }}Value() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5);
        vector.set(0, ({{ e }}) 6.6);
        TestUtil{{ E }}.assertEquals(vector.get(0), ({{ e }}) 6.6);
    }

    @Test
    void testSetZero() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2);
        vector.setZero();
        TestUtil{{ E }}.assertEquals(vector.get(0), 0);
        TestUtil{{ E }}.assertEquals(vector.get(1), 0);
        TestUtil{{ E }}.assertEquals(vector.get(2), 0);
    }

    @Test
    void testResize() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2);
        final VectorN{{ E }} resize1 = vector1.resize(2);
        TestUtil{{ E }}.assertEquals(resize1.size(), 2);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2);
        final VectorN{{ E }} resize2 = vector2.resize(4);
        TestUtil{{ E }}.assertEquals(resize2.size(), 4);
        TestUtil{{ E }}.assertEquals(resize2.get(3), 0);
    }

    @Test
    void testVectorNAddition() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5)
            .add(new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5));
        TestUtil{{ E }}.assertEquals(vector, 0, ({{ e }}) 2.2, ({{ e }}) 4.4, ({{ e }}) 6.6, ({{ e }}) 8.8, 11);
    }

    @Test
    void testVectorNSubtraction() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5)
            .sub(new VectorN{{ E }}(0, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5));
        TestUtil{{ E }}.assertEquals(vector, 0, 0, 0, 0, 0, 0);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 0.1, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5)
            .mul(2d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.2, ({{ e }}) 2.2, ({{ e }}) 4.4, ({{ e }}) 6.6, ({{ e }}) 8.8, 11);
    }

    @Test
    void testFloatFactorMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 0.1, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5)
            .mul(2);
        TestUtil{{ E }}.assertEquals(vector, 0.2f, 2.2f, ({{ e }}) 4.4, ({{ e }}) 6.6, ({{ e }}) 8.8, 11f);
    }

    @Test
    void testVectorNMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 0.1, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5)
            .mul(new VectorN{{ E }}(1, 2, 3, 4, 5, 6));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.1, ({{ e }}) 2.2, ({{ e }}) 6.6, ({{ e }}) 13.2, 22, 33);
    }

    @Test
    void test{{ ES }}ComponentsMultiplication() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 0.1, ({{ e }}) 1.1, ({{ e }}) 2.2, ({{ e }}) 3.3, ({{ e }}) 4.4, ({{ e }}) 5.5)
            .mul(2, 2, 3, 3, 4, 4);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.2, ({{ e }}) 2.2, ({{ e }}) 6.6, ({{ e }}) 9.9, ({{ e }}) 17.6, 22);
    }

    @Test
    void testDoubleFactorDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(2d);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.5, 1, ({{ e }}) 1.5, 2, ({{ e }}) 2.5, 3);
    }

    @Test
    void testFloatFactorDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(2);
        TestUtil{{ E }}.assertEquals(vector, 0.5f, 1, 1.5f, 2, 2.5f, 3);
    }

    @Test
    void testVectorNDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(new VectorN{{ E }}(2, 1, ({{ e }}) 0.5, 8, 4, 6));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.5, 2, 6, ({{ e }}) 0.5, ({{ e }}) 1.25, 1);
    }

    @Test
    void test{{ ES }}ComponentsDivision() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4, 5, 6).div(2, 1, ({{ e }}) 0.5, 8, 4, 6);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 0.5, 2, 6, ({{ e }}) 0.5, ({{ e }}) 1.25, 1);
    }

    @Test
    void testVectorNDotProduct() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4, 5).dot(new VectorN{{ E }}(6, 7, 8, 9));
        TestUtil{{ E }}.assertEquals(f, 110);
    }

    @Test
    void testFloatComponentsDotProduct() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4, 5).dot(6, 7, 8, 9);
        TestUtil{{ E }}.assertEquals(f, 110f);
    }

    @Test
    void testVectorNProject() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 3, 4, 5).project(new VectorN{{ E }}(1, 1, 1, 1));
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3.5, ({{ e }}) 3.5, ({{ e }}) 3.5, ({{ e }}) 3.5);
    }

    @Test
    void testFloatComponentsProject() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 3, 4, 5).project(1, 1, 1, 1);
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) 3.5, ({{ e }}) 3.5, ({{ e }}) 3.5, ({{ e }}) 3.5);
    }

    @Test
    void testRaiseToDoublePower() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, 8, ({{ e }}) 5.5).pow(2d);
        TestUtil{{ E }}.assertEquals(vector, 4, 36, 64, ({{ e }}) 30.25);
    }

    @Test
    void testRaiseToFloatPower() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, 8, ({{ e }}) 5.5).pow(2);
        TestUtil{{ E }}.assertEquals(vector, 4, 36, 64, 30.25f);
    }

    @Test
    void testCeiling() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 2.5, ({{ e }}) 6.7, ({{ e }}) 7.9, ({{ e }}) 8.1).ceil();
        TestUtil{{ E }}.assertEquals(vector, 3, 7, 8, 9);
    }

    @Test
    void testFloor() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 2.5, ({{ e }}) 6.7, ({{ e }}) 7.8, ({{ e }}) 9.1).floor();
        TestUtil{{ E }}.assertEquals(vector, 2, 6, 7, 9);
    }

    @Test
    void testRound() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 2.2, ({{ e }}) 6.7, ({{ e }}) 7.8, ({{ e }}) 9.1).round();
        TestUtil{{ E }}.assertEquals(vector, 2, 7, 8, 9);
    }

    @Test
    void testAbsolute() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(({{ e }}) -2.5, ({{ e }}) -6.7, ({{ e }}) -55, 0).abs();
        TestUtil{{ E }}.assertEquals(vector1, ({{ e }}) 2.5, ({{ e }}) 6.7, 55, 0);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(({{ e }}) 2.5, ({{ e }}) 6.7, 55, 0).abs();
        TestUtil{{ E }}.assertEquals(vector2, ({{ e }}) 2.5, ({{ e }}) 6.7, 55, 0);
    }

    @Test
    void testNegate() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(({{ e }}) 2.2, ({{ e }}) -6.7, ({{ e }}) 15.8, 20).negate();
        TestUtil{{ E }}.assertEquals(vector, ({{ e }}) -2.2, ({{ e }}) 6.7, ({{ e }}) -15.8, -20);
    }

    @Test
    void testVectorNMinimum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).min(new VectorN{{ E }}(3, 4, 10, -1));
        TestUtil{{ E }}.assertEquals(vector, 2, 4, -1, -1);
    }

    @Test
    void test{{ ES }}ComponentsMinimum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).min(3, 4, 10, ({{ e }}) -1.1);
        TestUtil{{ E }}.assertEquals(vector, 2, 4, -1, ({{ e }}) -1.1);
    }

    @Test
    void testVectorNMaximum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).max(new VectorN{{ E }}(3, 4, 10, -1));
        TestUtil{{ E }}.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    void test{{ ES }}ComponentsMaximum() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(2, 6, -1, 0).max(3, 4, 10, ({{ e }}) -1.1);
        TestUtil{{ E }}.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    void testVectorNDistanceSquared() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4).distanceSquared(new VectorN{{ E }}(5, 6, 7));
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void testFloatComponentsDistanceSquared() {
        final {{ e }} f = new VectorN{{ E }}(2, 3, 4, 5).distanceSquared(5, 6, 7, 5);
        TestUtil{{ E }}.assertEquals(f, 27);
    }

    @Test
    void testVectorNDistance() {
        final {{ e }} f = new VectorN{{ E }}(0, 2, 4, 8).distance(new VectorN{{ E }}(0, 8, 16, 8));
        TestUtil{{ E }}.assertEquals(f, 6 * SQRT5);
    }

    @Test
    void test{{ ES }}ComponentsDistance() {
        final {{ e }} f = new VectorN{{ E }}(0, 2, 4, 8).distance(0, 8, 16, 8);
        TestUtil{{ E }}.assertEquals(f, 6 * SQRT5);
    }

    @Test
    void testLength() {
        final {{ e }} f = new VectorN{{ E }}(3, 4, 5, 6).length();
        TestUtil{{ E }}.assertEquals(f, ({{ e }}) Math.sqrt(86));
    }

    @Test
    void testLengthSquared() {
        final {{ e }} f = new VectorN{{ E }}(3, 4, 5, 6).lengthSquared();
        TestUtil{{ E }}.assertEquals(f, 86);
    }

    @Test
    void testNormalize() {
        final VectorN{{ E }} v1 = new VectorN{{ E }}(1, 1, 0, 0).normalize();
        TestUtil{{ E }}.assertEquals(v1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0);
        final VectorN{{ E }} v2 = new VectorN{{ E }}(0, 1, 0, 1).normalize();
        TestUtil{{ E }}.assertEquals(v2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        Assertions.assertThrows(ArithmeticException.class, () -> VectorN{{ E }}.ZERO_3.normalize());
    }

    @Test
    void testMinAxis() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector1.minAxis(), 0);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(2, 1, 3, 4);
        TestUtil{{ E }}.assertEquals(vector2.minAxis(), 1);
        final VectorN{{ E }} vector3 = new VectorN{{ E }}(3, 2, 1, 4);
        TestUtil{{ E }}.assertEquals(vector3.minAxis(), 2);
        final VectorN{{ E }} vector4 = new VectorN{{ E }}(4, 2, 3, 1);
        TestUtil{{ E }}.assertEquals(vector4.minAxis(), 3);
    }

    @Test
    void testMaxAxis() {
        final VectorN{{ E }} vector1 = new VectorN{{ E }}(4, 2, 3, 1);
        TestUtil{{ E }}.assertEquals(vector1.maxAxis(), 0);
        final VectorN{{ E }} vector2 = new VectorN{{ E }}(1, 4, 3, 2);
        TestUtil{{ E }}.assertEquals(vector2.maxAxis(), 1);
        final VectorN{{ E }} vector3 = new VectorN{{ E }}(1, 2, 4, 3);
        TestUtil{{ E }}.assertEquals(vector3.maxAxis(), 2);
        final VectorN{{ E }} vector4 = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector4.maxAxis(), 3);
    }

    @Test
    void testConvertToVector2() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector.toVector2(), 1, 2);
    }

    @Test
    void testConvertToVector3() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector.toVector3(), 1, 2, 3);
    }

    @Test
    void testConvertToVector4() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(vector.toVector4(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToVectorFloat() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtilf.assertEquals(vector.toFloat(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToVectorDouble() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3, 4);
        TestUtild.assertEquals(vector.toDouble(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToArray() {
        final {{ e }}[] array = new VectorN{{ E }}(1, 2, 3, 4).toArray();
        TestUtil{{ E }}.assertEquals(array, 1, 2, 3, 4);
    }

    @Test
    void testComparison() {
        final int c1 = new VectorN{{ E }}(10, 20, 30, 40).compareTo(new VectorN{{ E }}(20, 20, 30, 40));
        Assertions.assertTrue(c1 < 0);
        final int c2 = new VectorN{{ E }}(10, 20, 30, 40).compareTo(new VectorN{{ E }}(10, 20, 30, 40));
        Assertions.assertTrue(c2 == 0);
        final int c3 = new VectorN{{ E }}(10, 20, 30, 40).compareTo(new VectorN{{ E }}(10, 10, 30, 40));
        Assertions.assertTrue(c3 > 0);
        final int c4 = new VectorN{{ E }}(({{ e }}) 0.2, ({{ e }}) 0.2, ({{ e }}) 0.2, ({{ e }}) 0.2).compareTo(new VectorN{{ E }}(({{ e }}) 0.1, ({{ e }}) 0.1, ({{ e }}) 0.1, ({{ e }}) 0.1));
        Assertions.assertTrue(c4 > 0);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new VectorN{{ E }}(1, 2, 3).equals(new VectorN{{ E }}(1, 2, 3)));
        Assertions.assertFalse(new VectorN{{ E }}(1, 2, 3).equals(new VectorN{{ E }}(2, 2, 3)));
    }

    @Test
    void testCloning() {
        final VectorN{{ E }} vector = new VectorN{{ E }}(1, 2, 3);
        Assertions.assertEquals(vector, vector.clone());
    }

}
