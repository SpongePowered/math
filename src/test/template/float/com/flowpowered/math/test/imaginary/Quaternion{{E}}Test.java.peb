package org.spongepowered.math.test.imaginary;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.matrix.Matrix3{{ E }};
import org.spongepowered.math.test.TestUtil{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};

import static org.spongepowered.math.test.TestUtil{{ E }}.SQRT54;

public class Quaternion{{ E }}Test {
    @Test
    void testIdentity() {
        final Quaternion{{ E }} quaternion = Quaternion{{ E }}.IDENTITY;
        TestUtil{{ E }}.assertEquals(quaternion, 0, 0, 0, 1);
    }

    @Test
    void testDoubleComponentsConstructor() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(1d, 2d, 3d, 4d);
        TestUtil{{ E }}.assertEquals(quaternion, 1, 2, 3, 4);
    }

    @Test
    void testFloatComponentsConstructor() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(quaternion, 1, 2, 3, 4);
    }

    @Test
    void testGetters() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(quaternion.x(), 1);
        TestUtil{{ E }}.assertEquals(quaternion.y(), 2);
        TestUtil{{ E }}.assertEquals(quaternion.z(), 3);
        TestUtil{{ E }}.assertEquals(quaternion.w(), 4);
    }

    @Test
    void testQuaternionAddition() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(0, 1, 1, 1).add(new Quaternion{{ E }}(5.5, -0.5, 3.8, 5.5));
        TestUtil{{ E }}.assertEquals(quaternion, ({{ e }}) 5.5, ({{ e }}) 0.5, ({{ e }}) 4.8, ({{ e }}) 6.5);
    }

    @Test
    void testDoubleComponentsAddition() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(0, 1, 1, 1).add(5.5, -0.5, 3.8, 5.5);
        TestUtil{{ E }}.assertEquals(quaternion, ({{ e }}) 5.5, ({{ e }}) 0.5, ({{ e }}) 4.8, ({{ e }}) 6.5);
    }

    @Test
    void testFloatComponentsAddition() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(0, 1, 1, 1).add(5.5f, -0.5f, 3.8f, 5.5f);
        TestUtil{{ E }}.assertEquals(quaternion, 5.5f, 0.5f, ({{ e }}) 4.8, 6.5f);
    }

    @Test
    void testQuaternionSubtraction() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(10, 5, 1, 1).sub(new Quaternion{{ E }}(9, 4.5, 2, 1));
        TestUtil{{ E }}.assertEquals(quaternion, 1, ({{ e }}) 0.5, -1, 0);
    }

    @Test
    void testDoubleComponentsSubtraction() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(10, 5, 1, 1).sub(9, 4.5, 2, 1);
        TestUtil{{ E }}.assertEquals(quaternion, 1, ({{ e }}) 0.5, -1, 0);
    }

    @Test
    void testFloatComponentsSubtraction() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(10, 5, 1, 1).sub(9, 4.5f, 2f, 1f);
        TestUtil{{ E }}.assertEquals(quaternion, 1, 0.5f, -1, 0);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).mul(1.5);
        TestUtil{{ E }}.assertEquals(quaternion, 3, ({{ e }}) 4.5, 6, ({{ e }}) 7.5);
    }

    @Test
    void testFloatFactorMultiplication() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).mul(1.5f);
        TestUtil{{ E }}.assertEquals(quaternion, 3, 4.5f, 6, 7.5f);
    }

    @Test
    void testQuaternionMultiplication() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).mul(new Quaternion{{ E }}(1, 6, 7, 8));
        TestUtil{{ E }}.assertEquals(quaternion, 18, 44, 76, -8);
    }

    @Test
    void testDoubleComponentsMultiplication() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).mul(2d);
        TestUtil{{ E }}.assertEquals(quaternion, 4, 6, 8, 10);
    }

    @Test
    void testFloatComponentsMultiplication() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).mul(2);
        TestUtil{{ E }}.assertEquals(quaternion, 4, 6, 8, 10);
    }

    @Test
    void testDoubleFactorDivision() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).div(2d);
        TestUtil{{ E }}.assertEquals(quaternion, 1, ({{ e }}) 1.5, 2, ({{ e }}) 2.5);
    }

    @Test
    void testFloatFactorDivision() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).div(2);
        TestUtil{{ E }}.assertEquals(quaternion, 1, 1.5f, 2, 2.5f);
    }

    @Test
    void testQuaternionDivision() {
        final Quaternion{{ E }} quaternion1 = new Quaternion{{ E }}(7, 3, 1, 9);
        final Quaternion{{ E }} quaternion2 = new Quaternion{{ E }}(2, 3, 4, 5);
        final Quaternion{{ E }} div = quaternion1.div(quaternion2);
        final Quaternion{{ E }} invMul = quaternion2.invert().mul(quaternion1);
        TestUtil{{ E }}.assertEquals(div, invMul.x(), invMul.y(), invMul.z(), invMul.w());
    }

    @Test
    void testDoubleComponentsDivision() {
        final Quaternion{{ E }} quaternion1 = new Quaternion{{ E }}(7, 3, 1, 9);
        final Quaternion{{ E }} quaternion2 = new Quaternion{{ E }}(2, 3, 4, 5);
        final Quaternion{{ E }} div = quaternion1.div((double) quaternion2.x(), (double) quaternion2.y(), (double) quaternion2.z(), (double) quaternion2.w());
        final Quaternion{{ E }} invMul = quaternion2.invert().mul(quaternion1);
        TestUtil{{ E }}.assertEquals(div, invMul.x(), invMul.y(), invMul.z(), invMul.w());
    }

    @Test
    void testFloatComponentsDivision() {
        final Quaternion{{ E }} quaternion1 = new Quaternion{{ E }}(7, 3, 1, 9);
        final Quaternion{{ E }} quaternion2 = new Quaternion{{ E }}(2, 3, 4, 5);
        final Quaternion{{ E }} div = quaternion1.div(quaternion2.x(), quaternion2.y(), quaternion2.z(), quaternion2.w());
        final Quaternion{{ E }} invMul = quaternion2.invert().mul(quaternion1);
        TestUtil{{ E }}.assertEquals(div, invMul.x(), invMul.y(), invMul.z(), invMul.w());
    }

    @Test
    void testQuaternionDotProduct() {
        final {{ e }} f = new Quaternion{{ E }}(2, 3, 4, 5).dot(new Quaternion{{ E }}(6, 7, 8, 9));
        TestUtil{{ E }}.assertEquals(f, 110);
    }

    @Test
    void testDoubleComponentsDotProduct() {
        final {{ e }} f = new Quaternion{{ E }}(2, 3, 4, 5).dot(6d, 7d, 8d, 9d);
        TestUtil{{ E }}.assertEquals(f, 110);
    }

    @Test
    void testFloatComponentsDotProduct() {
        final {{ e }} f = new Quaternion{{ E }}(2, 3, 4, 5).dot(6, 7, 8, 9);
        TestUtil{{ E }}.assertEquals(f, 110);
    }

    @Test
    void testVectorRotate() {
        final Vector3{{ E }} vector1 = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(new Vector3{{ E }}(0, 0, 1d));
        TestUtil{{ E }}.assertEquals(vector1, 0, -1, 0);
        final Vector3{{ E }} vector2 = new Quaternion{{ E }}(0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(new Vector3{{ E }}(0, 0, 1d));
        TestUtil{{ E }}.assertEquals(vector2, 1, 0, 0);
        final Vector3{{ E }} vector3 = new Quaternion{{ E }}(0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(new Vector3{{ E }}(1d, 1d, 0));
        TestUtil{{ E }}.assertEquals(vector3, -1, 1, 0);
    }

    @Test
    void testDoubleComponentsRotate() {
        final Vector3{{ E }} vector1 = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(0, 0, 1d);
        TestUtil{{ E }}.assertEquals(vector1, 0, -1, 0);
        final Vector3{{ E }} vector2 = new Quaternion{{ E }}(0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(0, 0, 1d);
        TestUtil{{ E }}.assertEquals(vector2, 1, 0, 0);
        final Vector3{{ E }} vector3 = new Quaternion{{ E }}(0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(1d, 1d, 0);
        TestUtil{{ E }}.assertEquals(vector3, -1, 1, 0);
    }

    @Test
    void testFloatComponentsRotate() {
        final Vector3{{ E }} vector1 = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(0, 0, 1);
        TestUtil{{ E }}.assertEquals(vector1, 0, -1, 0);
        final Vector3{{ E }} vector2 = new Quaternion{{ E }}(0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(0, 0, 1);
        TestUtil{{ E }}.assertEquals(vector2, 1, 0, 0);
        final Vector3{{ E }} vector3 = new Quaternion{{ E }}(0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).rotate(1, 1, 0);
        TestUtil{{ E }}.assertEquals(vector3, -1, 1, 0);
    }

    @Test
    void testDirection() {
        final Vector3{{ E }} vector = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).direction();
        TestUtil{{ E }}.assertEquals(vector, 0, -1, 0);
    }

    @Test
    void testAxis() {
        final Vector3{{ E }} vector1 = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axis();
        TestUtil{{ E }}.assertEquals(vector1, 1, 0, 0);
        final Vector3{{ E }} vector2 = new Quaternion{{ E }}(0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axis();
        TestUtil{{ E }}.assertEquals(vector2, 0, 1, 0);
        final Vector3{{ E }} vector3 = new Quaternion{{ E }}(0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axis();
        TestUtil{{ E }}.assertEquals(vector3, 0, 0, 1);
        final Vector3{{ E }} vector4 = Quaternion{{ E }}.fromAngleDegAxis(135, Vector3{{ E }}.ONE).axis();
        final {{ e }} a4 = ({{ e }}) (1 / Math.sqrt(3));
        TestUtil{{ E }}.assertEquals(vector4, a4, a4, a4);
    }

    @Test
    void testAxesAnglesDegrees() {
        final Vector3{{ E }} vector1 = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axesAnglesDeg();
        TestUtil{{ E }}.assertEquals(vector1, 90, 0, 0);
        final Vector3{{ E }} vector2 = new Quaternion{{ E }}(0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axesAnglesDeg();
        TestUtil{{ E }}.assertEquals(vector2, 0, 90, 0);
        final Vector3{{ E }} vector3 = new Quaternion{{ E }}(0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axesAnglesDeg();
        TestUtil{{ E }}.assertEquals(vector3, 0, 0, 90);
    }

    @Test
    void testAxesAnglesRadians() {
        final Vector3{{ E }} vector1 = new Quaternion{{ E }}(({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axesAnglesRad();
        TestUtil{{ E }}.assertEquals(vector1, ({{ e }}) TrigMath.HALF_PI, 0, 0);
        final Vector3{{ E }} vector2 = new Quaternion{{ E }}(0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axesAnglesRad();
        TestUtil{{ E }}.assertEquals(vector2, 0, ({{ e }}) TrigMath.HALF_PI, 0);
        final Vector3{{ E }} vector3 = new Quaternion{{ E }}(0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO).axesAnglesRad();
        TestUtil{{ E }}.assertEquals(vector3, 0, 0, ({{ e }}) TrigMath.HALF_PI);
    }

    @Test
    void testConjugate() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).conjugate();
        TestUtil{{ E }}.assertEquals(quaternion, -2, -3, -4, 5);
    }

    @Test
    void testInvert() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).invert();
        TestUtil{{ E }}.assertEquals(quaternion, ({{ e }}) (-2/54d), ({{ e }}) (-3/54d), ({{ e }}) (-4/54d),({{ e }}) (5/54d));
        Assertions.assertThrows(ArithmeticException.class, () -> Quaternion{{ E }}.ZERO.invert());
    }

    @Test
    void testLengthSquared() {
        final {{ e }} f = new Quaternion{{ E }}(2, 3, 4, 5).lengthSquared();
        TestUtil{{ E }}.assertEquals(f, 54);
    }

    @Test
    void testLength() {
        final {{ e }} f = new Quaternion{{ E }}(2, 3, 4, 5).length();
        TestUtil{{ E }}.assertEquals(f, SQRT54);
    }

    @Test
    void testNormalize() {
        final Quaternion{{ E }} quaternion = new Quaternion{{ E }}(2, 3, 4, 5).normalize();
        TestUtil{{ E }}.assertEquals(quaternion, ({{ e }}) (2/SQRT54), ({{ e }}) (3/SQRT54), ({{ e }}) (4/SQRT54), ({{ e }}) (5/SQRT54));
        Assertions.assertThrows(ArithmeticException.class, () -> Quaternion{{ E }}.ZERO.normalize());
    }

    @Test
    void testConvertToComplex() {
        final Quaternion{{ E }} quaternion = Quaternion{{ E }}.fromAngleDegAxis(135, Vector3{{ E }}.ONE);
        final Complex{{ E }} complex = quaternion.toComplex();
        TestUtil{{ E }}.assertEquals(complex.angleDeg(), 135);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new Quaternion{{ E }}(122, 43, 96, 50).equals(new Quaternion{{ E }}(122, 43, 96, 50)));
        Assertions.assertFalse(new Quaternion{{ E }}(122, 43, 96, 50).equals(new Quaternion{{ E }}(378, 95, 96, 0)));
    }

    @Test
    void testComparison() {
        final int c1 = new Quaternion{{ E }}(10, 20, 30, 40).compareTo(new Quaternion{{ E }}(20, 20, 30, 40));
        Assertions.assertTrue(c1 < 0);
        final int c2 = new Quaternion{{ E }}(10, 20, 30, 40).compareTo(new Quaternion{{ E }}(10, 20, 30, 40));
        Assertions.assertTrue(c2 == 0);
        final int c3 = new Quaternion{{ E }}(10, 20, 30, 40).compareTo(new Quaternion{{ E }}(10, 10, 30, 40));
        Assertions.assertTrue(c3 > 0);
        final int c4 = new Quaternion{{ E }}(0.2, 0.2, 0.2, 0.2).compareTo(new Quaternion{{ E }}(0.1, 0.1, 0.1, 0.1));
        Assertions.assertTrue(c4 > 0);
    }

    @Test
    void testQuaternionFromReal() {
        final Quaternion{{ E }} quaternion = Quaternion{{ E }}.fromReal(1);
        TestUtil{{ E }}.assertEquals(quaternion, 0, 0, 0, 1);
    }

    @Test
    void testQuaternionFromImaginary() {
        final Quaternion{{ E }} quaternion = Quaternion{{ E }}.fromImaginary(1, 2, 3);
        TestUtil{{ E }}.assertEquals(quaternion, 1, 2, 3, 0);
    }

    @Test
    void testQuaternionFrom() {
        final Quaternion{{ E }} quaternion = Quaternion{{ E }}.from(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(quaternion, 1, 2, 3, 4);
    }

    @Test
    void testCreateFromAxesDoubleAnglesDegrees() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAxesAnglesDeg(90d, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAxesAnglesDeg(0, 90d, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAxesAnglesDeg(0, 0, 90d);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromAxesDoubleAnglesRadians() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAxesAnglesRad(TrigMath.HALF_PI, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAxesAnglesRad(0, TrigMath.HALF_PI, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAxesAnglesRad(0, 0, TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromAxesFloatAnglesDegrees() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAxesAnglesDeg(90, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAxesAnglesDeg(0, 90, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAxesAnglesDeg(0, 0, 90);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromAxesFloatAnglesRadians() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAxesAnglesRad(({{ e }}) TrigMath.HALF_PI, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAxesAnglesRad(0, ({{ e }}) TrigMath.HALF_PI, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAxesAnglesRad(0, 0, ({{ e }}) TrigMath.HALF_PI);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromRotationBetweenTwoVector3() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromRotationTo(new Vector3{{ E }}(0, 1, 0), new Vector3{{ E }}(0, 0, 1));
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromRotationTo(new Vector3{{ E }}(0, 0, 1), new Vector3{{ E }}(1, 0, 0));
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromRotationTo(new Vector3{{ E }}(1, 0, 0), new Vector3{{ E }}(0, 1, 0));
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromDoubleAngleDegreesVectorAxis() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleDegAxis(90d, new Vector3{{ E }}(1, 0, 0));
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleDegAxis(90d, new Vector3{{ E }}(0, 1, 0));
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleDegAxis(90d, new Vector3{{ E }}(0, 0, 1));
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromDoubleAngleRadiansVectorAxis() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleRadAxis(TrigMath.HALF_PI, new Vector3{{ E }}(1, 0, 0));
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleRadAxis(TrigMath.HALF_PI, new Vector3{{ E }}(0, 1, 0));
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleRadAxis(TrigMath.HALF_PI, new Vector3{{ E }}(0, 0, 1));
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromFloatAngleDegreesVectorAxis() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleDegAxis(90, new Vector3{{ E }}(1, 0, 0));
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleDegAxis(90, new Vector3{{ E }}(0, 1, 0));
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleDegAxis(90, new Vector3{{ E }}(0, 0, 1));
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromFloatAngleRadiansVectorAxis() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) TrigMath.HALF_PI, new Vector3{{ E }}(1, 0, 0));
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) TrigMath.HALF_PI, new Vector3{{ E }}(0, 1, 0));
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) TrigMath.HALF_PI, new Vector3{{ E }}(0, 0, 1));
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromDoubleAngleDegreesAxisDoubleComponents() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleDegAxis(90d, 1d, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleDegAxis(90d, 0, 1d, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleDegAxis(90d, 0, 0, 1d);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromDoubleAngleRadiansAxisDoubleComponents() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleRadAxis(TrigMath.HALF_PI, 1d, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleRadAxis(TrigMath.HALF_PI, 0, 1d, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleRadAxis(TrigMath.HALF_PI, 0, 0, 1d);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromFloatAngleDegreesAxisFloatComponents() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleDegAxis(90, 1, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleDegAxis(90, 0, 1, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleDegAxis(90, 0, 0, 1);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    void testCreateFromFloatAngleRadiansAxisFloatComponents() {
        final Quaternion{{ E }} quaternion1 = Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) TrigMath.HALF_PI, 1, 0, 0);
        TestUtil{{ E }}.assertEquals(quaternion1, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion2 = Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) TrigMath.HALF_PI, 0, 1, 0);
        TestUtil{{ E }}.assertEquals(quaternion2, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
        final Quaternion{{ E }} quaternion3 = Quaternion{{ E }}.fromAngleRadAxis(({{ e }}) TrigMath.HALF_PI, 0, 0, 1);
        TestUtil{{ E }}.assertEquals(quaternion3, 0, 0, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO, ({{ e }}) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Disabled("Test fails, was previously annotated. History unknown")
    @Test
    void testCreateFromRotationMatrix3() {
        final Quaternion{{ E }} quaternion = Quaternion{{ E }}.fromAngleDegAxis(45, 1, 1, -1);
        final Matrix3{{ E }} matrix = Matrix3{{ E }}.createRotation(quaternion);
        Assertions.assertEquals(quaternion, Quaternion{{ E }}.fromRotationMatrix(matrix));
    }
}
