package com.flowpowered.math.test.imaginary;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.TrigMath;
import com.flowpowered.math.imaginary.Complex#E#;
import com.flowpowered.math.imaginary.Quaternion#E#;
import com.flowpowered.math.matrix.Matrix3#E#;
import com.flowpowered.math.test.TestUtil#E#;
import com.flowpowered.math.vector.Vector2#E#;
import com.flowpowered.math.vector.Vector3#E#;

public class Complex#E#Test {
    @Test
    public void testDefaultConstructor() {
        Complex#E# complex = new Complex#E#();
        TestUtil#E#.assertEquals(complex, 1, 0);
    }

    @Test
    public void testDoubleComponentsConstructor() {
        Complex#E# complex = new Complex#E#(2d, 3d);
        TestUtil#E#.assertEquals(complex, 2, 3);
    }

    @Test
    public void testFloatComponentsConstructor() {
        Complex#E# complex = new Complex#E#(2, 3);
        TestUtil#E#.assertEquals(complex, 2, 3);
    }

    @Test
    public void testCopyConstructor() {
        Complex#E# complex = new Complex#E#(new Complex#E#(2, 3));
        TestUtil#E#.assertEquals(complex, 2, 3);
    }

    @Test
    public void testGetters() {
        Complex#E# complex = new Complex#E#(2, 3);
        TestUtil#E#.assertEquals(complex.getX(), 2);
        TestUtil#E#.assertEquals(complex.getY(), 3);
    }

    @Test
    public void testComplexAddition() {
        Complex#E# vector = new Complex#E#(0, 1).add(new Complex#E#(5.5, -0.5));
        TestUtil#E#.assertEquals(vector, (#e#) 5.5, (#e#) 0.5);
    }

    @Test
    public void testDoubleComponentsAddition() {
        Complex#E# complex = new Complex#E#(0, 1).add(5.5, -0.5);
        TestUtil#E#.assertEquals(complex, (#e#) 5.5, (#e#) 0.5);
    }

    @Test
    public void testFloatComponentsAddition() {
        Complex#E# complex = new Complex#E#(0, 1).add(5.5f, -0.5f);
        TestUtil#E#.assertEquals(complex, 5.5f, 0.5f);
    }

    @Test
    public void testComplexSubtraction() {
        Complex#E# complex = new Complex#E#(10, 5).sub(new Complex#E#(9f, 4.5));
        TestUtil#E#.assertEquals(complex, 1, (#e#) 0.5);
    }

    @Test
    public void testDoubleComponentsSubtraction() {
        Complex#E# complex = new Complex#E#(10, 5).sub(9, 4.5);
        TestUtil#E#.assertEquals(complex, 1, (#e#) 0.5);
    }

    @Test
    public void testFloatComponentsSubtraction() {
        Complex#E# complex = new Complex#E#(10, 5).sub(9f, 4.5f);
        TestUtil#E#.assertEquals(complex, 1, 0.5f);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        Complex#E# complex = new Complex#E#(2, 3).mul(1.5);
        TestUtil#E#.assertEquals(complex, 3, (#e#) 4.5);
    }

    @Test
    public void testFloatFactorMultiplication() {
        Complex#E# complex = new Complex#E#(2, 3).mul(1.5f);
        TestUtil#E#.assertEquals(complex, 3, 4.5f);
    }

    @Test
    public void testComplexMultiplication() {
        Complex#E# complex = new Complex#E#(2, 3).mul(new Complex#E#(6, 9));
        TestUtil#E#.assertEquals(complex, -15, 36);
    }

    @Test
    public void testDoubleComponentsMultiplication() {
        Complex#E# complex = new Complex#E#(2, 3).mul(6d, 9d);
        TestUtil#E#.assertEquals(complex, -15, 36);
    }

    @Test
    public void testFloatComponentsMultiplication() {
        Complex#E# complex = new Complex#E#(2, 3).mul(6, 9);
        TestUtil#E#.assertEquals(complex, -15, 36);
    }

    @Test
    public void testDoubleFactorDivision() {
        Complex#E# complex = new Complex#E#(2, 3).div(2d);
        TestUtil#E#.assertEquals(complex, 1, (#e#) 1.5);
    }

    @Test
    public void testFloatFactorDivision() {
        Complex#E# complex = new Complex#E#(2, 3).div(2);
        TestUtil#E#.assertEquals(complex, 1, (#e#) 1.5);
    }

    @Test
    public void testComplexDivision() {
        Complex#E# complex1 = new Complex#E#(7, 3);
        Complex#E# complex2 = new Complex#E#(2, 5);
        Complex#E# div = complex1.div(complex2);
        Complex#E# invMul = complex1.mul(complex2.invert());
        TestUtil#E#.assertEquals(div, invMul.getX(), invMul.getY());
    }

    @Test
    public void testDoubleComponentsDivision() {
        Complex#E# complex1 = new Complex#E#(7, 3);
        Complex#E# complex2 = new Complex#E#(2, 5);
        Complex#E# div = complex1.div((double) complex2.getX(), (double) complex2.getY());
        Complex#E# invMul = complex1.mul(complex2.invert());
        TestUtil#E#.assertEquals(div, invMul.getX(), invMul.getY());
    }

    @Test
    public void testFloatComponentsDivision() {
        Complex#E# complex1 = new Complex#E#(7, 3);
        Complex#E# complex2 = new Complex#E#(2, 5);
        Complex#E# div = complex1.div(complex2.getX(), complex2.getY());
        Complex#E# invMul = complex1.mul(complex2.invert());
        TestUtil#E#.assertEquals(div, invMul.getX(), invMul.getY());
    }

    @Test
    public void testComplexDotProduct() {
        #e# f = new Complex#E#(2, 3).dot(new Complex#E#(4, 5));
        TestUtil#E#.assertEquals(f, 23);
    }

    @Test
    public void testDoubleComponentsDotProduct() {
        #e# f = new Complex#E#(2, 3).dot(4d, 5d);
        TestUtil#E#.assertEquals(f, 23);
    }

    @Test
    public void testFloatComponentsDotProduct() {
        #e# f = new Complex#E#(2, 3).dot(4, 5);
        TestUtil#E#.assertEquals(f, 23);
    }

    @Test
    public void testVectorRotate() {
        Vector2#E# vector = new Complex#E#(0, 1).rotate(new Vector2#E#(-1, 1));
        TestUtil#E#.assertEquals(vector, -1, -1);
    }

    @Test
    public void testDoubleComponentsRotate() {
        Vector2#E# vector = new Complex#E#(0, 1).rotate(-1d, 1d);
        TestUtil#E#.assertEquals(vector, -1, -1);
    }

    @Test
    public void testFloatComponentsRotate() {
        Vector2#E# vector = new Complex#E#(0, 1).rotate(-1, 1);
        TestUtil#E#.assertEquals(vector, -1, -1);
    }

    @Test
    public void testDirection() {
        Vector2#E# vector = new Complex#E#(4, 3).getDirection();
        TestUtil#E#.assertEquals(vector, (#e#) 0.8, (#e#) 0.6);
    }

    @Test
    public void testAngleRadians() {
        #e# f1 = new Complex#E#(1, 0).getAngleRad();
        TestUtil#E#.assertEquals(f1, 0);
        #e# f2 = new Complex#E#(0, 1).getAngleRad();
        TestUtil#E#.assertEquals(f2, (#e#) TrigMath.HALF_PI);
        #e# f3 = new Complex#E#((#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO).getAngleRad();
        TestUtil#E#.assertEquals(f3, (#e#) TrigMath.QUARTER_PI);
    }

    @Test
    public void testAngleDegrees() {
        #e# f1 = new Complex#E#(1, 0).getAngleDeg();
        TestUtil#E#.assertEquals(f1, 0);
        #e# f2 = new Complex#E#(0, 1).getAngleDeg();
        TestUtil#E#.assertEquals(f2, 90);
        #e# f3 = new Complex#E#((#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO).getAngleDeg();
        TestUtil#E#.assertEquals(f3, 45);
    }

    @Test
    public void testConjugate() {
        Complex#E# complex = new Complex#E#(2, 3).conjugate();
        TestUtil#E#.assertEquals(complex, 2, -3);
    }

    @Test
    public void testInvert() {
        Complex#E# complex = new Complex#E#(2, 3).invert();
        TestUtil#E#.assertEquals(complex, (#e#) (2/13d), (#e#) (-3/13d));
        try {
            Complex#E#.ZERO.invert();
            Assert.fail();
        } catch (ArithmeticException ex) {
        }
    }

    @Test
    public void testLengthSquared() {
        #e# f = new Complex#E#(3, 4).lengthSquared();
        TestUtil#E#.assertEquals(f, 25);
    }

    @Test
    public void testLength() {
        #e# f = new Complex#E#(3, 4).length();
        TestUtil#E#.assertEquals(f, 5);
    }

    @Test
    public void testNormalize() {
        Complex#E# complex = new Complex#E#(3, 4).normalize();
        TestUtil#E#.assertEquals(complex, (#e#) 0.6, (#e#) 0.8);
        try {
            Complex#E#.ZERO.normalize();
            Assert.fail();
        } catch (ArithmeticException ex) {
        }
    }

    @Test
    public void testConvertToQuaternionDefaultAxis() {
        Complex#E# complex = new Complex#E#(3, 4);
        Vector3#E# axis = Vector3#E#.UNIT_Z;
        Vector3#E# axisPerpendicular = new Vector3#E#(axis.getZ(), -axis.getX(), 0);
        Quaternion#E# quaternion = complex.toQuaternion();
        Matrix3#E# quaternionMatrix = Matrix3#E#.createRotation(quaternion);
        Vector3#E# quaternionAxis = quaternionMatrix.transform(axis);
        Vector3#E# quaternionAxisPerpendicular = new Vector3#E#(quaternionAxis.getZ(), -quaternionAxis.getX(), 0);
        Vector3#E# rotatedAxisPerpendicular = quaternionMatrix.transform(axisPerpendicular);
        Complex#E# quaternionComplex = Complex#E#.fromRotationTo(quaternionAxisPerpendicular, rotatedAxisPerpendicular);
        complex = complex.normalize();
        TestUtil#E#.assertEquals(quaternionAxis, axis.getX(), axis.getY(), axis.getZ());
        TestUtil#E#.assertEquals(quaternionComplex, complex.getX(), complex.getY());
    }

    @Test
    public void testConvertToQuaternionAxis() {
        Complex#E# complex = new Complex#E#(3, 4);
        Vector3#E# axis = new Vector3#E#(-2, 1, 4);
        Vector3#E# axisPerpendicular = new Vector3#E#(axis.getY(), -axis.getX(), 0);
        Quaternion#E# quaternion = complex.toQuaternion(axis);
        Matrix3#E# quaternionMatrix = Matrix3#E#.createRotation(quaternion);
        Vector3#E# quaternionAxis = quaternionMatrix.transform(axis);
        Vector3#E# quaternionAxisPerpendicular = new Vector3#E#(quaternionAxis.getY(), -quaternionAxis.getX(), 0);
        Vector3#E# rotatedAxisPerpendicular = quaternionMatrix.transform(axisPerpendicular);
        Complex#E# quaternionComplex = Complex#E#.fromRotationTo(quaternionAxisPerpendicular, rotatedAxisPerpendicular);
        complex = complex.normalize();
        TestUtil#E#.assertEquals(quaternionAxis, axis.getX(), axis.getY(), axis.getZ());
        TestUtil#E#.assertEquals(quaternionComplex, complex.getX(), complex.getY());
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new Complex#E#(122, 43).equals(new Complex#E#(122, 43)));
        Assert.assertFalse(new Complex#E#(122, 43).equals(new Complex#E#(378, 95)));
    }

    @Test
    public void testComparison() {
        int c1 = new Complex#E#(10, 20).compareTo(new Complex#E#(20, 20));
        Assert.assertTrue(c1 < 0);
        int c2 = new Complex#E#(10, 20).compareTo(new Complex#E#(10, 20));
        Assert.assertTrue(c2 == 0);
        int c3 = new Complex#E#(10, 20).compareTo(new Complex#E#(10, 10));
        Assert.assertTrue(c3 > 0);
        int c4 = new Complex#E#(0.2, 0.2).compareTo(new Complex#E#(0.1, 0.1));
        Assert.assertTrue(c4 > 0);
    }

    @Test
    public void testCloning() {
        Complex#E# complex = new Complex#E#(3, 2);
        Assert.assertEquals(complex, complex.clone());
    }

    @Test
    public void testCreateFromRotationBetweenTwoVector2() {
        Complex#E# complex = Complex#E#.fromRotationTo(new Vector2#E#(0, 1), new Vector2#E#(-1, 0));
        TestUtil#E#.assertEquals(complex, 0, 1);
    }

    @Test
    public void testCreateFromRotationBetweenTwoVector3() {
        Complex#E# complex = Complex#E#.fromRotationTo(new Vector3#E#(0, 0, 1), new Vector3#E#(0, -1, 0));
        TestUtil#E#.assertEquals(complex, 0, 1);
    }

    @Test
    public void testCreateFromDoubleAngleDegrees() {
        Complex#E# complex = Complex#E#.fromAngleDeg(45d);
        TestUtil#E#.assertEquals(complex, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    public void testCreateFromFloatAngleDegrees() {
        Complex#E# complex = Complex#E#.fromAngleDeg(45);
        TestUtil#E#.assertEquals(complex, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    public void testCreateFromDoubleAngleRadians() {
        Complex#E# complex = Complex#E#.fromAngleRad(TrigMath.QUARTER_PI);
        TestUtil#E#.assertEquals(complex, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO);
    }

    @Test
    public void testCreateFromFloatAngleRadians() {
        Complex#E# complex = Complex#E#.fromAngleRad((#e#) TrigMath.QUARTER_PI);
        TestUtil#E#.assertEquals(complex, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO);
    }
}
