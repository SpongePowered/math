package org.spongepowered.math.matrix;

import java.io.Serializable;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.HashFunctions;
import org.spongepowered.math.TrigMath;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};

@Immutable
public final class Matrix4{{ E }} implements Matrix{{ E }}, Serializable {

    private static final long serialVersionUID = 1;
    public static final Matrix4{{ E }} ZERO = new Matrix4{{ E }}(
        0, 0, 0, 0,
        0, 0, 0, 0,
        0, 0, 0, 0,
        0, 0, 0, 0
    );
    public static final Matrix4{{ E }} IDENTITY = new Matrix4{{ E }}(
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    );
    private final {{ e }} m00, m01, m02, m03;
    private final {{ e }} m10, m11, m12, m13;
    private final {{ e }} m20, m21, m22, m23;
    private final {{ e }} m30, m31, m32, m33;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    public Matrix4{{ E }}(final Matrix2{{ E }} m) {
        this(
                m.get(0, 0), m.get(0, 1), 0, 0,
                m.get(1, 0), m.get(1, 1), 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0);
    }

    public Matrix4{{ E }}(final Matrix3{{ E }} m) {
        this(
                m.get(0, 0), m.get(0, 1), m.get(0, 2), 0,
                m.get(1, 0), m.get(1, 1), m.get(1, 2), 0,
                m.get(2, 0), m.get(2, 1), m.get(2, 2), 0,
                0, 0, 0, 0);
    }

    public Matrix4{{ E }}(final MatrixN{{ E }} m) {
        this.m00 = m.get(0, 0);
        this.m01 = m.get(0, 1);
        this.m10 = m.get(1, 0);
        this.m11 = m.get(1, 1);
        if (m.size() > 2) {
            this.m02 = m.get(0, 2);
            this.m12 = m.get(1, 2);
            this.m20 = m.get(2, 0);
            this.m21 = m.get(2, 1);
            this.m22 = m.get(2, 2);
            if (m.size() > 3) {
                this.m03 = m.get(0, 3);
                this.m13 = m.get(1, 3);
                this.m23 = m.get(2, 3);
                this.m30 = m.get(3, 0);
                this.m31 = m.get(3, 1);
                this.m32 = m.get(3, 2);
                this.m33 = m.get(3, 3);
            } else {
                this.m03 = 0;
                this.m13 = 0;
                this.m23 = 0;
                this.m30 = 0;
                this.m31 = 0;
                this.m32 = 0;
                this.m33 = 0;
            }
        } else {
            this.m02 = 0;
            this.m12 = 0;
            this.m20 = 0;
            this.m21 = 0;
            this.m22 = 0;
            this.m03 = 0;
            this.m13 = 0;
            this.m23 = 0;
            this.m30 = 0;
            this.m31 = 0;
            this.m32 = 0;
            this.m33 = 0;
        }
    }

    public Matrix4{{ E }}(
            final {{ EOverload }} m00, final {{ EOverload }} m01, final {{ EOverload }} m02, final {{ EOverload }} m03,
            final {{ EOverload }} m10, final {{ EOverload }} m11, final {{ EOverload }} m12, final {{ EOverload }} m13,
            final {{ EOverload }} m20, final {{ EOverload }} m21, final {{ EOverload }} m22, final {{ EOverload }} m23,
            final {{ EOverload }} m30, final {{ EOverload }} m31, final {{ EOverload }} m32, final {{ EOverload }} m33) {
        this(
            ({{ e }}) m00, ({{ e }}) m01, ({{ e }}) m02, ({{ e }}) m03,
            ({{ e }}) m10, ({{ e }}) m11, ({{ e }}) m12, ({{ e }}) m13,
            ({{ e }}) m20, ({{ e }}) m21, ({{ e }}) m22, ({{ e }}) m23,
            ({{ e }}) m30, ({{ e }}) m31, ({{ e }}) m32, ({{ e }}) m33
        );
    }

    public Matrix4{{ E }}(
        final {{ e }} m00, final {{ e }} m01, final {{ e }} m02, final {{ e }} m03,
        final {{ e }} m10, final {{ e }} m11, final {{ e }} m12, final {{ e }} m13,
        final {{ e }} m20, final {{ e }} m21, final {{ e }} m22, final {{ e }} m23,
        final {{ e }} m30, final {{ e }} m31, final {{ e }} m32, final {{ e }} m33
    ) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
    }

    @Override
    public {{ e }} get(final int row, final int col) {
        switch (row) {
        case 0:
            switch (col) {
            case 0:
                return this.m00;
            case 1:
                return this.m01;
            case 2:
                return this.m02;
            case 3:
                return this.m03;
            }
            break;
        case 1:
            switch (col) {
            case 0:
                return this.m10;
            case 1:
                return this.m11;
            case 2:
                return this.m12;
            case 3:
                return this.m13;
            }
            break;
        case 2:
            switch (col) {
            case 0:
                return this.m20;
            case 1:
                return this.m21;
            case 2:
                return this.m22;
            case 3:
                return this.m23;
            }
            break;
        case 3:
            switch (col) {
            case 0:
                return this.m30;
            case 1:
                return this.m31;
            case 2:
                return this.m32;
            case 3:
                return this.m33;
            }
            break;
        }
        throw new IllegalArgumentException(
                (row < 0 || row > 2 ? "row must be greater than or equal to zero and smaller than 3. " : "") +
                (col < 0 || col > 2 ? "col must be greater than or equal to zero and smaller than 3." : ""));
    }

    @Override
    public Vector4{{ E }} row(final int row) {
        return new Vector4{{ E }}(this.get(row, 0), this.get(row, 1), this.get(row, 2), this.get(row, 3));
    }

    @Override
    public Vector4{{ E }} column(final int col) {
        return new Vector4{{ E }}(this.get(0, col), this.get(1, col), this.get(2, col), this.get(3, col));
    }

    public Matrix4{{ E }} add(final Matrix4{{ E }} m) {
        return new Matrix4{{ E }}(
            this.m00 + m.m00, this.m01 + m.m01, this.m02 + m.m02, this.m03 + m.m03,
            this.m10 + m.m10, this.m11 + m.m11, this.m12 + m.m12, this.m13 + m.m13,
            this.m20 + m.m20, this.m21 + m.m21, this.m22 + m.m22, this.m23 + m.m23,
            this.m30 + m.m30, this.m31 + m.m31, this.m32 + m.m32, this.m33 + m.m33
        );
    }

    public Matrix4{{ E }} sub(final Matrix4{{ E }} m) {
        return new Matrix4{{ E }}(
            this.m00 - m.m00, this.m01 - m.m01, this.m02 - m.m02, this.m03 - m.m03,
            this.m10 - m.m10, this.m11 - m.m11, this.m12 - m.m12, this.m13 - m.m13,
            this.m20 - m.m20, this.m21 - m.m21, this.m22 - m.m22, this.m23 - m.m23,
            this.m30 - m.m30, this.m31 - m.m31, this.m32 - m.m32, this.m33 - m.m33
        );
    }

    public Matrix4{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    @Override
    public Matrix4{{ E }} mul(final {{ e }} a) {
        return new Matrix4{{ E }}(
            this.m00 * a, this.m01 * a, this.m02 * a, this.m03 * a,
            this.m10 * a, this.m11 * a, this.m12 * a, this.m13 * a,
            this.m20 * a, this.m21 * a, this.m22 * a, this.m23 * a,
            this.m30 * a, this.m31 * a, this.m32 * a, this.m33 * a
        );
    }

    public Matrix4{{ E }} mul(final Matrix4{{ E }} m) {
        return new Matrix4{{ E }}(
            this.m00 * m.m00 + this.m01 * m.m10 + this.m02 * m.m20 + this.m03 * m.m30,
            this.m00 * m.m01 + this.m01 * m.m11 + this.m02 * m.m21 + this.m03 * m.m31,
            this.m00 * m.m02 + this.m01 * m.m12 + this.m02 * m.m22 + this.m03 * m.m32,
            this.m00 * m.m03 + this.m01 * m.m13 + this.m02 * m.m23 + this.m03 * m.m33,
            this.m10 * m.m00 + this.m11 * m.m10 + this.m12 * m.m20 + this.m13 * m.m30,
            this.m10 * m.m01 + this.m11 * m.m11 + this.m12 * m.m21 + this.m13 * m.m31,
            this.m10 * m.m02 + this.m11 * m.m12 + this.m12 * m.m22 + this.m13 * m.m32,
            this.m10 * m.m03 + this.m11 * m.m13 + this.m12 * m.m23 + this.m13 * m.m33,
            this.m20 * m.m00 + this.m21 * m.m10 + this.m22 * m.m20 + this.m23 * m.m30,
            this.m20 * m.m01 + this.m21 * m.m11 + this.m22 * m.m21 + this.m23 * m.m31,
            this.m20 * m.m02 + this.m21 * m.m12 + this.m22 * m.m22 + this.m23 * m.m32,
            this.m20 * m.m03 + this.m21 * m.m13 + this.m22 * m.m23 + this.m23 * m.m33,
            this.m30 * m.m00 + this.m31 * m.m10 + this.m32 * m.m20 + this.m33 * m.m30,
            this.m30 * m.m01 + this.m31 * m.m11 + this.m32 * m.m21 + this.m33 * m.m31,
            this.m30 * m.m02 + this.m31 * m.m12 + this.m32 * m.m22 + this.m33 * m.m32,
            this.m30 * m.m03 + this.m31 * m.m13 + this.m32 * m.m23 + this.m33 * m.m33
        );
    }

    public Matrix4{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    @Override
    public Matrix4{{ E }} div(final {{ e }} a) {
        return new Matrix4{{ E }}(
            this.m00 / a, this.m01 / a, this.m02 / a, this.m03 / a,
            this.m10 / a, this.m11 / a, this.m12 / a, this.m13 / a,
            this.m20 / a, this.m21 / a, this.m22 / a, this.m23 / a,
            this.m30 / a, this.m31 / a, this.m32 / a, this.m33 / a
        );
    }

    public Matrix4{{ E }} div(final Matrix4{{ E }} m) {
        return this.mul(m.invert());
    }

    public Matrix4{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow(({{ e }}) pow);
    }

    @Override
    public Matrix4{{ E }} pow(final {{ e }} pow) {
        return new Matrix4{{ E }}(
            Math.pow(this.m00, pow), Math.pow(this.m01, pow), Math.pow(this.m02, pow), Math.pow(this.m03, pow),
            Math.pow(this.m10, pow), Math.pow(this.m11, pow), Math.pow(this.m12, pow), Math.pow(this.m13, pow),
            Math.pow(this.m20, pow), Math.pow(this.m21, pow), Math.pow(this.m22, pow), Math.pow(this.m23, pow),
            Math.pow(this.m30, pow), Math.pow(this.m31, pow), Math.pow(this.m32, pow), Math.pow(this.m33, pow)
        );
    }

    public Matrix4{{ E }} translate(final Vector3{{ E }} v) {
        return this.translate(v.x(), v.y(), v.z());
    }

    public Matrix4{{ E }} translate(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return this.translate(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    public Matrix4{{ E }} translate(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return Matrix4{{ E }}.createTranslation(x, y, z).mul(this);
    }

    public Matrix4{{ E }} scale(final {{ EOverload }} scale) {
        return this.scale(({{ e }}) scale);
    }

    public Matrix4{{ E }} scale(final {{ e }} scale) {
        return this.scale(scale, scale, scale, scale);
    }

    public Matrix4{{ E }} scale(final Vector4{{ E }} v) {
        return this.scale(v.x(), v.y(), v.z(), v.w());
    }

    public Matrix4{{ E }} scale(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.scale(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    public Matrix4{{ E }} scale(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return Matrix4{{ E }}.createScaling(x, y, z, w).mul(this);
    }

    public Matrix4{{ E }} rotate(final Complex{{ E }} rot) {
        return Matrix4{{ E }}.createRotation(rot).mul(this);
    }

    public Matrix4{{ E }} rotate(final Quaternion{{ E }} rot) {
        return Matrix4{{ E }}.createRotation(rot).mul(this);
    }

    public Vector4{{ E }} transform(final Vector4{{ E }} v) {
        return this.transform(v.x(), v.y(), v.z(), v.w());
    }

    public Vector4{{ E }} transform(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.transform(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    public Vector4{{ E }} transform(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(
            this.m00 * x + this.m01 * y + this.m02 * z + this.m03 * w,
            this.m10 * x + this.m11 * y + this.m12 * z + this.m13 * w,
            this.m20 * x + this.m21 * y + this.m22 * z + this.m23 * w,
            this.m30 * x + this.m31 * y + this.m32 * z + this.m33 * w
        );
    }

    @Override
    public Matrix4{{ E }} floor() {
        return new Matrix4{{ E }}(
            GenericMath.floor(this.m00), GenericMath.floor(this.m01), GenericMath.floor(this.m02), GenericMath.floor(this.m03),
            GenericMath.floor(this.m10), GenericMath.floor(this.m11), GenericMath.floor(this.m12), GenericMath.floor(this.m13),
            GenericMath.floor(this.m20), GenericMath.floor(this.m21), GenericMath.floor(this.m22), GenericMath.floor(this.m23),
            GenericMath.floor(this.m30), GenericMath.floor(this.m31), GenericMath.floor(this.m32), GenericMath.floor(this.m33)
        );
    }

    @Override
    public Matrix4{{ E }} ceil() {
        return new Matrix4{{ E }}(
            Math.ceil(this.m00), Math.ceil(this.m01), Math.ceil(this.m02), Math.ceil(this.m03),
            Math.ceil(this.m10), Math.ceil(this.m11), Math.ceil(this.m12), Math.ceil(this.m13),
            Math.ceil(this.m20), Math.ceil(this.m21), Math.ceil(this.m22), Math.ceil(this.m23),
            Math.ceil(this.m30), Math.ceil(this.m31), Math.ceil(this.m32), Math.ceil(this.m33)
        );
    }

    @Override
    public Matrix4{{ E }} round() {
        return new Matrix4{{ E }}(
            Math.round(this.m00), Math.round(this.m01), Math.round(this.m02), Math.round(this.m03),
            Math.round(this.m10), Math.round(this.m11), Math.round(this.m12), Math.round(this.m13),
            Math.round(this.m20), Math.round(this.m21), Math.round(this.m22), Math.round(this.m23),
            Math.round(this.m30), Math.round(this.m31), Math.round(this.m32), Math.round(this.m33)
        );
    }

    @Override
    public Matrix4{{ E }} abs() {
        return new Matrix4{{ E }}(
            Math.abs(this.m00), Math.abs(this.m01), Math.abs(this.m02), Math.abs(this.m03),
            Math.abs(this.m10), Math.abs(this.m11), Math.abs(this.m12), Math.abs(this.m13),
            Math.abs(this.m20), Math.abs(this.m21), Math.abs(this.m22), Math.abs(this.m23),
            Math.abs(this.m30), Math.abs(this.m31), Math.abs(this.m32), Math.abs(this.m33)
        );
    }

    @Override
    public Matrix4{{ E }} negate() {
        return new Matrix4{{ E }}(
            -this.m00, -this.m01, -this.m02, -this.m03,
            -this.m10, -this.m11, -this.m12, -this.m13,
            -this.m20, -this.m21, -this.m22, -this.m23,
            -this.m30, -this.m31, -this.m32, -this.m33
        );
    }

    @Override
    public Matrix4{{ E }} transpose() {
        return new Matrix4{{ E }}(
            this.m00, this.m10, this.m20, this.m30,
            this.m01, this.m11, this.m21, this.m31,
            this.m02, this.m12, this.m22, this.m32,
            this.m03, this.m13, this.m23, this.m33
        );
    }

    @Override
    public {{ e }} trace() {
        return this.m00 + this.m11 + this.m22 + this.m33;
    }

    @Override
    public {{ e }} determinant() {
        return this.m00 * (this.m11 * this.m22 * this.m33 + this.m21 * this.m32 * this.m13 + this.m31 * this.m12 * this.m23 - this.m31 * this.m22 * this.m13 - this.m11 * this.m32 * this.m23 - this.m21 * this.m12 * this.m33)
            - this.m10 * (this.m01 * this.m22 * this.m33 + this.m21 * this.m32 * this.m03 + this.m31 * this.m02 * this.m23 - this.m31 * this.m22 * this.m03 - this.m01 * this.m32 * this.m23 - this.m21 * this.m02 * this.m33)
            + this.m20 * (this.m01 * this.m12 * this.m33 + this.m11 * this.m32 * this.m03 + this.m31 * this.m02 * this.m13 - this.m31 * this.m12 * this.m03 - this.m01 * this.m32 * this.m13 - this.m11 * this.m02 * this.m33)
            - this.m30 * (this.m01 * this.m12 * this.m23 + this.m11 * this.m22 * this.m03 + this.m21 * this.m02 * this.m13 - this.m21 * this.m12 * this.m03 - this.m01 * this.m22 * this.m13 - this.m11 * this.m02 * this.m23);
    }

    @Override
    public Matrix4{{ E }} invert() {
        final {{ e }} det = this.determinant();
        if (Math.abs(det) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot inverse a matrix with a zero determinant");
        }
        return new Matrix4{{ E }}(
            Matrix4{{ E}}.det3(this.m11, this.m21, this.m31, this.m12, this.m22, this.m32, this.m13, this.m23, this.m33) / det,
            -Matrix4{{ E}}.det3(this.m01, this.m21, this.m31, this.m02, this.m22, this.m32, this.m03, this.m23, this.m33) / det,
            Matrix4{{ E}}.det3(this.m01, this.m11, this.m31, this.m02, this.m12, this.m32, this.m03, this.m13, this.m33) / det,
            -Matrix4{{ E}}.det3(this.m01, this.m11, this.m21, this.m02, this.m12, this.m22, this.m03, this.m13, this.m23) / det,
            -Matrix4{{ E}}.det3(this.m10, this.m20, this.m30, this.m12, this.m22, this.m32, this.m13, this.m23, this.m33) / det,
            Matrix4{{ E}}.det3(this.m00, this.m20, this.m30, this.m02, this.m22, this.m32, this.m03, this.m23, this.m33) / det,
            -Matrix4{{ E}}.det3(this.m00, this.m10, this.m30, this.m02, this.m12, this.m32, this.m03, this.m13, this.m33) / det,
            Matrix4{{ E}}.det3(this.m00, this.m10, this.m20, this.m02, this.m12, this.m22, this.m03, this.m13, this.m23) / det,
            Matrix4{{ E}}.det3(this.m10, this.m20, this.m30, this.m11, this.m21, this.m31, this.m13, this.m23, this.m33) / det,
            -Matrix4{{ E}}.det3(this.m00, this.m20, this.m30, this.m01, this.m21, this.m31, this.m03, this.m23, this.m33) / det,
            Matrix4{{ E}}.det3(this.m00, this.m10, this.m30, this.m01, this.m11, this.m31, this.m03, this.m13, this.m33) / det,
            -Matrix4{{ E}}.det3(this.m00, this.m10, this.m20, this.m01, this.m11, this.m21, this.m03, this.m13, this.m23) / det,
            -Matrix4{{ E}}.det3(this.m10, this.m20, this.m30, this.m11, this.m21, this.m31, this.m12, this.m22, this.m32) / det,
            Matrix4{{ E}}.det3(this.m00, this.m20, this.m30, this.m01, this.m21, this.m31, this.m02, this.m22, this.m32) / det,
            -Matrix4{{ E}}.det3(this.m00, this.m10, this.m30, this.m01, this.m11, this.m31, this.m02, this.m12, this.m32) / det,
            Matrix4{{ E}}.det3(this.m00, this.m10, this.m20, this.m01, this.m11, this.m21, this.m02, this.m12, this.m22) / det
        );
    }

    public Matrix2{{ E }} toMatrix2() {
        return new Matrix2{{ E }}(this);
    }

    public Matrix3{{ E }} toMatrix3() {
        return new Matrix3{{ E }}(this);
    }

    public MatrixN{{ E }} toMatrixN() {
        return new MatrixN{{ E }}(this);
    }

    public {{ e }}[] toArray() {
        return this.toArray(false);
    }

    @Override
    public {{ e }}[] toArray(final boolean columnMajor) {
        if (columnMajor) {
            return new {{ e }}[]{
                this.m00, this.m10, this.m20, this.m30,
                this.m01, this.m11, this.m21, this.m31,
                this.m02, this.m12, this.m22, this.m32,
                this.m03, this.m13, this.m23, this.m33
            };
        } else {
            return new {{ e }}[]{
                this.m00, this.m01, this.m02, this.m03,
                this.m10, this.m11, this.m12, this.m13,
                this.m20, this.m21, this.m22, this.m23,
                this.m30, this.m31, this.m32, this.m33
            };
        }
    }

    @Override
    public Matrix4f toFloat() {
        return new Matrix4f(
            this.m00, this.m01, this.m02, this.m03,
            this.m10, this.m11, this.m12, this.m13,
            this.m20, this.m21, this.m22, this.m23,
            this.m30, this.m31, this.m32, this.m33
        );
    }

    @Override
    public Matrix4d toDouble() {
        return new Matrix4d(
            this.m00, this.m01, this.m02, this.m03,
            this.m10, this.m11, this.m12, this.m13,
            this.m20, this.m21, this.m22, this.m23,
            this.m30, this.m31, this.m32, this.m33
        );
    }

    @Override
    public String toString() {
        return this.m00 + " " + this.m01 + " " + this.m02 + " " + this.m03 + "\n"
            + this.m10 + " " + this.m11 + " " + this.m12 + " " + this.m13 + "\n"
            + this.m20 + " " + this.m21 + " " + this.m22 + " " + this.m23 + "\n"
            + this.m30 + " " + this.m31 + " " + this.m32 + " " + this.m33 + "\n";
    }

    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Matrix4{{ E }})) {
            return false;
        }
        final Matrix4{{ E }} that = (Matrix4{{ E }}) other;
        if ({{ ET }}.compare(that.m00, this.m00) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m01, this.m01) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m02, this.m02) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m03, this.m03) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m10, this.m10) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m11, this.m11) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m12, this.m12) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m13, this.m13) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m20, this.m20) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m21, this.m21) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m22, this.m22) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m23, this.m23) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m30, this.m30) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m31, this.m31) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m32, this.m32) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.m33, this.m33) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            int result = (this.m00 != +0.0f ? {{ ET }}.hashCode(this.m00) : 0);
            result = 31 * result + (this.m01 != +0.0f ? {{ ET }}.hashCode(this.m01) : 0);
            result = 31 * result + (this.m02 != +0.0f ? {{ ET }}.hashCode(this.m02) : 0);
            result = 31 * result + (this.m03 != +0.0f ? {{ ET }}.hashCode(this.m03) : 0);
            result = 31 * result + (this.m10 != +0.0f ? {{ ET }}.hashCode(this.m10) : 0);
            result = 31 * result + (this.m11 != +0.0f ? {{ ET }}.hashCode(this.m11) : 0);
            result = 31 * result + (this.m12 != +0.0f ? {{ ET }}.hashCode(this.m12) : 0);
            result = 31 * result + (this.m13 != +0.0f ? {{ ET }}.hashCode(this.m13) : 0);
            result = 31 * result + (this.m20 != +0.0f ? {{ ET }}.hashCode(this.m20) : 0);
            result = 31 * result + (this.m21 != +0.0f ? {{ ET }}.hashCode(this.m21) : 0);
            result = 31 * result + (this.m22 != +0.0f ? {{ ET }}.hashCode(this.m22) : 0);
            result = 31 * result + (this.m23 != +0.0f ? {{ ET }}.hashCode(this.m23) : 0);
            result = 31 * result + (this.m30 != +0.0f ? {{ ET }}.hashCode(this.m30) : 0);
            result = 31 * result + (this.m31 != +0.0f ? {{ ET }}.hashCode(this.m31) : 0);
            result = 31 * result + (this.m32 != +0.0f ? {{ ET }}.hashCode(this.m32) : 0);
            this.hashCode = 31 * result + (this.m33 != +0.0f ? {{ ET }}.hashCode(this.m33) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    public static Matrix4{{ E }} from(final {{ e }} n) {
         return n == 0 ? Matrix4{{ E }}.ZERO : new Matrix4{{ E }}(n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n);
    }

    public static Matrix4{{ E }} from(
        final {{ e }} m00, final {{ e }} m01, final {{ e }} m02, final {{ e }} m03,
        final {{ e }} m10, final {{ e }} m11, final {{ e }} m12, final {{ e }} m13,
        final {{ e }} m20, final {{ e }} m21, final {{ e }} m22, final {{ e }} m23,
        final {{ e }} m30, final {{ e }} m31, final {{ e }} m32, final {{ e }} m33
    ) {
         return m00 == 0 && m01 == 0 && m02 == 0 && m03 == 0
             && m10 == 0 && m11 == 0 && m12 == 0 && m13 == 0
             && m20 == 0 && m21 == 0 && m22 == 0 && m23 == 0
             && m30 == 0 && m31 == 0 && m32 == 0 && m33 == 0
         ? Matrix4{{ E }}.ZERO : new Matrix4{{ E }}(
             m00, m01, m02, m03,
             m10, m11, m12, m13,
             m20, m21, m22, m23,
             m30, m31, m32, m33
         );
    }

    public static Matrix4{{ E }} fromDiagonal(final {{ e }} m00, final {{ e }} m11, final {{ e }} m22, final {{ e }} m33) {
         return m00 == 0 && m11 == 0 && m22 == 0 && m33 == 0 ? Matrix4{{ E }}.ZERO : new Matrix4{{ E }}(
             m00, 0, 0, 0,
             0, m11, 0, 0,
             0, 0, m22, 0,
             0, 0, 0, m33
         );
    }

    public static Matrix4{{ E }} createScaling(final {{ EOverload }} scale) {
        return Matrix4{{ E }}.createScaling(({{ e }}) scale);
    }

    public static Matrix4{{ E }} createScaling(final {{ e }} scale) {
        return Matrix4{{ E }}.createScaling(scale, scale, scale, scale);
    }

    public static Matrix4{{ E }} createScaling(final Vector4{{ E }} v) {
        return Matrix4{{ E }}.createScaling(v.x(), v.y(), v.z(), v.w());
    }

    public static Matrix4{{ E }} createScaling(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z, final {{ EOverload }} w) {
        return Matrix4{{ E }}.createScaling(({{ e }}) x, ({{ e }}) y, ({{ e }}) z, ({{ e }}) w);
    }

    public static Matrix4{{ E }} createScaling(final {{ e }} x, final {{ e }} y, final {{ e }} z, final {{ e }} w) {
        return new Matrix4{{ E }}(
            x, 0, 0, 0,
            0, y, 0, 0,
            0, 0, z, 0,
            0, 0, 0, w
        );
    }

    public static Matrix4{{ E }} createTranslation(final Vector3{{ E }} v) {
        return Matrix4{{ E }}.createTranslation(v.x(), v.y(), v.z());
    }

    public static Matrix4{{ E }} createTranslation(final {{ EOverload }} x, final {{ EOverload }} y, final {{ EOverload }} z) {
        return Matrix4{{ E }}.createTranslation(({{ e }}) x, ({{ e }}) y, ({{ e }}) z);
    }

    public static Matrix4{{ E }} createTranslation(final {{ e }} x, final {{ e }} y, final {{ e }} z) {
        return new Matrix4{{ E }}(
            1, 0, 0, x,
            0, 1, 0, y,
            0, 0, 1, z,
            0, 0, 0, 1
        );
    }

    public static Matrix4{{ E }} createRotation(Complex{{ E }} rot) {
        rot = rot.normalize();
        return new Matrix4{{ E }}(
            rot.x(), -rot.y(), 0, 0,
            rot.y(), rot.x(), 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        );
    }

    public static Matrix4{{ E }} createRotation(Quaternion{{ E }} rot) {
        rot = rot.normalize();
        return new Matrix4{{ E }}(
            1 - 2 * rot.y() * rot.y() - 2 * rot.z() * rot.z(),
            2 * rot.x() * rot.y() - 2 * rot.w() * rot.z(),
            2 * rot.x() * rot.z() + 2 * rot.w() * rot.y(), 0,
            2 * rot.x() * rot.y() + 2 * rot.w() * rot.z(),
            1 - 2 * rot.x() * rot.x() - 2 * rot.z() * rot.z(),
            2 * rot.y() * rot.z() - 2 * rot.w() * rot.x(), 0,
            2 * rot.x() * rot.z() - 2 * rot.w() * rot.y(),
            2 * rot.y() * rot.z() + 2 * rot.x() * rot.w(),
            1 - 2 * rot.x() * rot.x() - 2 * rot.y() * rot.y(), 0,
            0, 0, 0, 1
        );
    }

    /**
     * Creates a "look at" matrix for the given eye point.
     *
     * @param eye The position of the camera
     * @param at The point that the camera is looking at
     * @param up The "up" vector
     * @return A rotational transform that corresponds to a camera looking at the given point
     */
    public static Matrix4{{ E }} createLookAt(final Vector3{{ E }} eye, final Vector3{{ E }} at, final Vector3{{ E }} up) {
        final Vector3{{ E }} f = at.sub(eye).normalize();
        final Vector3{{ E }} s = f.cross(up).normalize();
        final Vector3{{ E }} u = s.cross(f);
        final Matrix4{{ E }} mat = new Matrix4{{ E }}(
            s.x(), s.y(), s.z(), 0,
            u.x(), u.y(), u.z(), 0,
            -f.x(), -f.y(), -f.z(), 0,
            0, 0, 0, 1
        );
        return mat.translate(eye.negate());
    }

    /**
     * Creates a perspective projection matrix with the given (x) FOV, aspect, near and far planes
     *
     * @param fov The field of view in the x direction
     * @param aspect The aspect ratio, usually width/height
     * @param near The near plane, cannot be 0
     * @param far the far plane, far cannot equal near
     * @return A perspective projection matrix built from the given values
     */
    public static Matrix4{{ E }} createPerspective(
        final {{ EOverload }} fov,
        final {{ EOverload }} aspect,
        final {{ EOverload }} near,
        final {{EOverload }} far
    ) {
        return Matrix4{{ E }}.createPerspective(({{ e }}) fov, ({{ e }}) aspect, ({{ e }}) near, ({{ e }}) far);
    }

    /**
     * Creates a perspective projection matrix with the given (x) FOV, aspect, near and far planes
     *
     * @param fov The field of view in the x direction
     * @param aspect The aspect ratio, usually width/height
     * @param near The near plane, cannot be 0
     * @param far the far plane, far cannot equal near
     * @return A perspective projection matrix built from the given values
     */
    public static Matrix4{{ E }} createPerspective(final {{ e }} fov, final {{ e }} aspect, final {{ e }} near, final {{ e }} far) {
        final {{ e }} scale = 1 / TrigMath.tan(fov * ({{ e }}) TrigMath.HALF_DEG_TO_RAD);
        return new Matrix4{{ E }}(
                scale / aspect, 0, 0, 0,
                0, scale, 0, 0,
                0, 0, (far + near) / (near - far), 2 * far * near / (near - far),
                0, 0, -1, 0);
    }

    /**
     * Creates an orthographic viewing frustum built from the provided values
     *
     * @param right the right most plane of the viewing frustum
     * @param left the left most plane of the viewing frustum
     * @param top the top plane of the viewing frustum
     * @param bottom the bottom plane of the viewing frustum
     * @param near the near plane of the viewing frustum
     * @param far the far plane of the viewing frustum
     * @return A viewing frustum built from the provided values
     */
    public static Matrix4{{ E }} createOrthographic(
        final {{ EOverload }} right,
        final {{ EOverload }} left,
        final {{ EOverload }} top,
        final {{ EOverload }} bottom,
        final {{ EOverload }} near,
        final {{ EOverload }} far
    ) {
        return Matrix4{{ E }}.createOrthographic(({{ e }}) right, ({{ e }}) left, ({{ e }}) top, ({{ e }}) bottom, ({{ e }}) near, ({{ e }}) far);
    }

    /**
     * Creates an orthographic viewing frustum built from the provided values
     *
     * @param right the right most plane of the viewing frustum
     * @param left the left most plane of the viewing frustum
     * @param top the top plane of the viewing frustum
     * @param bottom the bottom plane of the viewing frustum
     * @param near the near plane of the viewing frustum
     * @param far the far plane of the viewing frustum
     * @return A viewing frustum built from the provided values
     */
    public static Matrix4{{ E }} createOrthographic(
        final {{ e }} right,
        final {{ e }} left,
        final {{ e }} top,
        final {{ e }} bottom,
        final {{ e }} near,
        final {{ e }} far
    ) {
        return new Matrix4{{ E }}(
            2 / (right - left), 0, 0, -(right + left) / (right - left),
            0, 2 / (top - bottom), 0, -(top + bottom) / (top - bottom),
            0, 0, -2 / (far - near), -(far + near) / (far - near),
            0, 0, 0, 1
        );
    }

    private static {{ e }} det3(
        final {{ e }} m00, final {{ e }} m01, final {{ e }} m02,
        final {{ e }} m10, final {{ e }} m11, final {{ e }} m12,
        final {{ e }} m20, final {{ e }} m21, final {{ e }} m22
    ) {
        return m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m12 * m20) + m02 * (m10 * m21 - m11 * m20);
    }

}
