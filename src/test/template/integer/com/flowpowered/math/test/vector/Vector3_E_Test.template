package com.flowpowered.math.test.vector;

import java.util.Random;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.test.TestUtil#E#;
import com.flowpowered.math.test.#EDecEquiTest#;
import com.flowpowered.math.test.TestUtili;
import com.flowpowered.math.vector.Vector2#E#;
import com.flowpowered.math.vector.Vector3#E#;
import com.flowpowered.math.vector.Vector4#E#;
import com.flowpowered.math.vector.VectorN#E#;

public class Vector3#E#Test {
    @Test
    public void testEmptyConstructor() {
        Vector3#E# vector = new Vector3#E#();
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 0, (#e#) 0);
    }

    @Test
    public void testCopyVector2DefaultZConstructor() {
        Vector3#E# vector = new Vector3#E#(new Vector2#E#(0, 1));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 0);
    }

    @Test
    public void testCopyVector2#ES#ZConstructor() {
        Vector3#E# vector = new Vector3#E#(new Vector2#E#(0, 1), (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 3);
    }

    @Test
    public void testCopyVector3Constructor() {
        Vector3#E# vector = new Vector3#E#(new Vector3#E#(0, 1, 2));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testCopyVector4Constructor() {
        Vector3#E# vector = new Vector3#E#(new Vector4#E#(0, 1, 2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testCopyVectorNConstructor() {
        Vector3#E# vector = new Vector3#E#(new VectorN#E#(0, 1, 2, 3, 4));
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testDoubleComponentsConstructor() {
        Vector3#E# vector = new Vector3#E#(0.5, 1.7, 3.8);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 3);
    }

    @Test
    public void test#ES#ComponentsConstructor() {
        Vector3#E# vector = new Vector3#E#((#e#) 0, (#e#) 1, (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 0, (#e#) 1, (#e#) 3);
    }

    @Test
    public void testGetters() {
        Vector3#E# vector = new Vector3#E#(0, 1, 3);
        TestUtil#E#.assertEquals(vector.getX(), (#e#) 0);
        TestUtil#E#.assertEquals(vector.getY(), (#e#) 1);
        TestUtil#E#.assertEquals(vector.getZ(), (#e#) 3);
    }

    @Test
    public void testVector3Addition() {
        Vector3#E# vector = new Vector3#E#(0, 1, 1).add(new Vector3#E#(5, -2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 5, (#e#) -1, (#e#) 4);
    }

    @Test
    public void testDoubleComponentsAddition() {
        Vector3#E# vector = new Vector3#E#(0, 1, 5).add(5.5, -2.5, 3.8);
        TestUtil#E#.assertEquals(vector, (#e#) 5, (#e#) -2, (#e#) 8);
    }

    @Test
    public void test#ES#ComponentsAddition() {
        Vector3#E# vector = new Vector3#E#(0, 1, 5).add((#e#) 5, (#e#) -2, (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 5, (#e#) -1, (#e#) 8);
    }

    @Test
    public void testVector3Subtraction() {
        Vector3#E# vector = new Vector3#E#(10, 5, 1).sub(new Vector3#E#(9, 4, 2));
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) -1);
    }

    @Test
    public void testDoubleComponentsSubtraction() {
        Vector3#E# vector = new Vector3#E#(10, 5, 1).sub(9, 4.5, 2);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) -1);
    }

    @Test
    public void test#ES#ComponentsSubtraction() {
        Vector3#E# vector = new Vector3#E#(10, 5, 1).sub((#e#) 9, (#e#) 4, (#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) -1);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        Vector3#E# vector = new Vector3#E#(2, 3, 4).mul(2.5);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 6, (#e#) 8);
    }

    @Test
    public void test#ES#FactorMultiplication() {
        Vector3#E# vector = new Vector3#E#(2, 3, 4).mul((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 6, (#e#) 8);
    }

    @Test
    public void testVector3Multiplication() {
        Vector3#E# vector = new Vector3#E#(2, 3, 4).mul(new Vector3#E#(1, 2, 3));
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 6, (#e#) 12);
    }

    @Test
    public void testDoubleComponentsMultiplication() {
        Vector3#E# vector = new Vector3#E#(2, 3, 4).mul(1.1, 2.5, 3.4);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 6, (#e#) 12);
    }

    @Test
    public void test#ES#ComponentsMultiplication() {
        Vector3#E# vector = new Vector3#E#(2, 3, 4).mul((#e#) 1, (#e#) 2, (#e#) 3);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 6, (#e#) 12);
    }

    @Test
    public void testDoubleFactorDivision() {
        Vector3#E# vector = new Vector3#E#(2, 3, 5).div(2.1);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) 2);
    }

    @Test
    public void test#ES#FactorDivision() {
        Vector3#E# vector = new Vector3#E#(2, 3, 5).div((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testVector3Division() {
        Vector3#E# vector = new Vector3#E#(2, 6, 20).div(new Vector3#E#(2, 4, 8));
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testDoubleComponentsDivision() {
        Vector3#E# vector = new Vector3#E#(2, 6, 17).div(2.1, 4.5, 8.3);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) 2);
    }

    @Test
    public void test#ES#ComponentsDivision() {
        Vector3#E# vector = new Vector3#E#(2, 6, 17).div((#e#) 2, (#e#) 4, (#e#) 8);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testVector3DotProduct() {
        #e# f = new Vector3#E#(2, 3, 4).dot(new Vector3#E#(4, 5, 6));
        TestUtil#E#.assertEquals(f, (#e#) 47);
    }

    @Test
    public void testDoubleComponentsDotProduct() {
        #e# f = new Vector3#E#(2, 3, 4).dot(4d, 5d, 6d);
        TestUtil#E#.assertEquals(f, (#e#) 47);
    }

    @Test
    public void test#ES#ComponentsDotProduct() {
        #e# f = new Vector3#E#(2, 3, 4).dot((#e#) 4, (#e#) 5, (#e#) 6);
        TestUtil#E#.assertEquals(f, (#e#) 47);
    }

    @Test
    public void testVector3Cross() {
        Vector3#E# f = new Vector3#E#(2, 3, 4).cross(new Vector3#E#(4, 3, 6.5));
        TestUtil#E#.assertEquals(f, (#e#) 6, (#e#) 4, (#e#) -6);
    }

    @Test
    public void testDoubleComponentsCross() {
        Vector3#E# f = new Vector3#E#(2, 3, 4).cross(4, 3, 6.5);
        TestUtil#E#.assertEquals(f, (#e#) 6, (#e#) 4, (#e#) -6);
    }

    @Test
    public void test#ES#ComponentsCross() {
        Vector3#E# f = new Vector3#E#(2, 3, 4).cross((#e#) 4, (#e#) 3, (#e#) 6);
        TestUtil#E#.assertEquals(f, (#e#) 6, (#e#) 4, (#e#) -6);
    }

    @Test
    public void testRaiseTo#ES#Power() {
        Vector3#E# vector = new Vector3#E#(2, 6, 8).pow((#e#) 2);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 36, (#e#) 64);
    }

    @Test
    public void testRaiseToDoublePower() {
        Vector3#E# vector = new Vector3#E#(2, 6, 8).pow(2d);
        TestUtil#E#.assertEquals(vector, (#e#) 4, (#e#) 36, (#e#) 64);
    }

    @Test
    public void testAbsolute() {
        Vector3#E# vector1 = new Vector3#E#(-2, -6, -55).abs();
        TestUtil#E#.assertEquals(vector1, (#e#) 2, (#e#) 6, (#e#) 55);
        Vector3#E# vector2 = new Vector3#E#(2, 6, 55).abs();
        TestUtil#E#.assertEquals(vector2, (#e#) 2, (#e#) 6, (#e#) 55);
    }

    @Test
    public void testNegate() {
        Vector3#E# vector = new Vector3#E#(2, -6, 15).negate();
        TestUtil#E#.assertEquals(vector, (#e#) -2, (#e#) 6, (#e#) -15);
    }

    @Test
    public void testVector3Minimum() {
        Vector3#E# vector = new Vector3#E#(2, 6, -1).min(new Vector3#E#(3, 4, 10));
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4, (#e#) -1);
    }

    @Test
    public void testDoubleComponentsMinimum() {
        Vector3#E# vector = new Vector3#E#(2, 6, 10).min(3d, 4d, -5d);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4, (#e#) -5);
    }

    @Test
    public void test#ES#ComponentsMinimum() {
        Vector3#E# vector = new Vector3#E#(2, 6, 10).min((#e#) 3, (#e#) 4, (#e#) -5);
        TestUtil#E#.assertEquals(vector, (#e#) 2, (#e#) 4, (#e#) -5);
    }

    @Test
    public void testVector3Maximum() {
        Vector3#E# vector = new Vector3#E#(2, 6, 10).max(new Vector3#E#(3, 4, -5));
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6, (#e#) 10);
    }

    @Test
    public void testDoubleComponentsMaximum() {
        Vector3#E# vector = new Vector3#E#(2, 6, 10).max(3d, 4d, -5d);
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6, (#e#) 10);
    }

    @Test
    public void test#ES#ComponentsMaximum() {
        Vector3#E# vector = new Vector3#E#(2, 6, 10).max((#e#) 3, (#e#) 4, (#e#) -5);
        TestUtil#E#.assertEquals(vector, (#e#) 3, (#e#) 6, (#e#) 10);
    }

    @Test
    public void testVector3DistanceSquared() {
        #e# f = new Vector3#E#(2, 3, 4).distanceSquared(new Vector3#E#(5, 6, 7));
        TestUtil#E#.assertEquals(f, (#e#) 27);
    }

    @Test
    public void testDoubleComponentsDistanceSquared() {
        #e# f = new Vector3#E#(2, 3, 4).distanceSquared(5d, 6d, 7d);
        TestUtil#E#.assertEquals(f, (#e#) 27);
    }

    @Test
    public void test#ES#ComponentsDistanceSquared() {
        #e# f = new Vector3#E#(2, 3, 4).distanceSquared((#e#) 5, (#e#) 6, (#e#) 7);
        TestUtil#E#.assertEquals(f, (#e#) 27);
    }

    @Test
    public void testVector3Distance() {
        #EDecEqui# f = new Vector3#E#(0, 2, 12).distance(new Vector3#E#(0, 5, 16));
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void testDoubleComponentsDistance() {
        #EDecEqui# f = new Vector3#E#(0, 2, 12).distance(0d, 5d, 16d);
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void test#ES#ComponentsDistance() {
        #EDecEqui# f = new Vector3#E#(0, 2, 12).distance((#e#) 0, (#e#) 5, (#e#) 16);
        #EDecEquiTest#.assertEquals(f, (#e#) 5);
    }

    @Test
    public void testLength() {
        #EDecEqui# f = new Vector3#E#(4, 4, 7).length();
        #EDecEquiTest#.assertEquals(f, (#e#) 9);
    }

    @Test
    public void testLengthSquared() {
        #e# f = new Vector3#E#(4, 4, 7).lengthSquared();
        TestUtil#E#.assertEquals(f, (#e#) 81);
    }

    @Test
    public void testGetMinAxis() {
        Vector3#E# vector1 = new Vector3#E#(1, 2, 3);
        TestUtili.assertEquals(vector1.getMinAxis(), 0);
        Vector3#E# vector2 = new Vector3#E#(2, 1, 3);
        TestUtili.assertEquals(vector2.getMinAxis(), 1);
        Vector3#E# vector3 = new Vector3#E#(3, 2, 1);
        TestUtili.assertEquals(vector3.getMinAxis(), 2);
    }

    @Test
    public void testGetMaxAxis() {
        Vector3#E# vector1 = new Vector3#E#(3, 1, 2);
        TestUtili.assertEquals(vector1.getMaxAxis(), 0);
        Vector3#E# vector2 = new Vector3#E#(1, 3, 2);
        TestUtili.assertEquals(vector2.getMaxAxis(), 1);
        Vector3#E# vector3 = new Vector3#E#(1, 2, 3);
        TestUtili.assertEquals(vector3.getMaxAxis(), 2);
    }

    @Test
    public void testConvertToVector2() {
        Vector2#E# vector = new Vector3#E#(1, 2, 3).toVector2();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2);
    }

    @Test
    public void testConvertToVector4DefaultW() {
        Vector4#E# vector = new Vector3#E#(1, 2, 3).toVector4();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 0);
    }

    @Test
    public void testConvertToVector4#ES#W() {
        Vector4#E# vector = new Vector3#E#(1, 2, 3).toVector4((#e#) 4);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testConvertToVector4DoubleW() {
        Vector4#E# vector = new Vector3#E#(1, 2, 3).toVector4(4d);
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3, (#e#) 4);
    }

    @Test
    public void testConvertToVectorN() {
        VectorN#E# vector = new Vector3#E#(1, 2, 3).toVectorN();
        TestUtil#E#.assertEquals(vector, (#e#) 1, (#e#) 2, (#e#) 3);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = new Vector3#E#(1, 2, 3).toArray();
        TestUtil#E#.assertEquals(array, (#e#) 1, (#e#) 2, (#e#) 3);
    }

    @Test
    public void testComparison() {
        int c1 = new Vector3#E#(10, 20, 30).compareTo(new Vector3#E#(20, 20, 30));
        Assert.assertTrue(c1 < 0);
        int c2 = new Vector3#E#(10, 20, 30).compareTo(new Vector3#E#(10, 20, 30));
        Assert.assertTrue(c2 == 0);
        int c3 = new Vector3#E#(10, 20, 30).compareTo(new Vector3#E#(10, 10, 30));
        Assert.assertTrue(c3 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new Vector3#E#(122, 43, 96).equals(new Vector3#E#(122, 43, 96)));
        Assert.assertFalse(new Vector3#E#(122, 43, 96).equals(new Vector3#E#(378, 95, 96)));
    }

    @Test
    public void testCloning() {
        Vector3#E# vector = new Vector3#E#(3, 2, 5);
        Assert.assertEquals(vector, vector.clone());
    }
}
