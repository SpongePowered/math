package com.flowpowered.math.test.vector;

import static org.junit.Assert.assertEquals;
import static com.flowpowered.math.test.TestUtil#E#.SQRT5;

import org.junit.Assert;
import org.junit.Test;

import com.flowpowered.math.TrigMath;
import com.flowpowered.math.test.TestUtilf;
import com.flowpowered.math.test.TestUtild;
import com.flowpowered.math.vector.Vector2#E#;
import com.flowpowered.math.vector.Vector3#E#;
import com.flowpowered.math.vector.Vector4#E#;
import com.flowpowered.math.vector.VectorN#E#;

public class VectorN#E#Test {
    @Test
    public void testSizeConstructor() {
        VectorN#E# vector = new VectorN#E#(5);
        TestUtil#E#.assertEquals(vector, 0, 0, 0, 0, 0);
    }

    @Test
    public void testCopyVector2Constructor() {
        VectorN#E# vector = new VectorN#E#(new Vector2#E#(0, 1));
        TestUtil#E#.assertEquals(vector, 0, 1);
    }

    @Test
    public void testCopyVector3Constructor() {
        VectorN#E# vector = new VectorN#E#(new Vector3#E#(0, 1, 2));
        TestUtil#E#.assertEquals(vector, 0, 1, 2);
    }

    @Test
    public void testCopyVector4Constructor() {
        VectorN#E# vector = new VectorN#E#(new Vector4#E#(0, 1, 2, 3));
        TestUtil#E#.assertEquals(vector, 0, 1, 2, 3);
    }

    @Test
    public void testCopyVectorNConstructor() {
        VectorN#E# vector = new VectorN#E#(new VectorN#E#(0, 1, 2, 3, 4, 5));
        TestUtil#E#.assertEquals(vector, 0, 1, 2, 3, 4, 5);
    }

    @Test
    public void testComponentsConstructor() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5);
        TestUtil#E#.assertEquals(vector, 0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5);
    }

    @Test
    public void testSize() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5);
        assertEquals(vector.size(), 6);
    }

    @Test
    public void testGetter() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5);
        TestUtil#E#.assertEquals(vector.get(0), 0);
        TestUtil#E#.assertEquals(vector.get(1), (#e#) 1.1);
        TestUtil#E#.assertEquals(vector.get(2), (#e#) 2.2);
        TestUtil#E#.assertEquals(vector.get(3), (#e#) 3.3);
        TestUtil#E#.assertEquals(vector.get(4), (#e#) 4.4);
        TestUtil#E#.assertEquals(vector.get(5), (#e#) 5.5);
    }

    @Test
    public void testFlooredGetter() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5, (#e#) -6.6);
        TestUtil#E#.assertEquals(vector.getFloored(0), 0);
        TestUtil#E#.assertEquals(vector.getFloored(1), 1);
        TestUtil#E#.assertEquals(vector.getFloored(2), 2);
        TestUtil#E#.assertEquals(vector.getFloored(3), 3);
        TestUtil#E#.assertEquals(vector.getFloored(4), 4);
        TestUtil#E#.assertEquals(vector.getFloored(5), 5);
        TestUtil#E#.assertEquals(vector.getFloored(6), -7);
    }

    @Test
    public void testSetter#ES#Value() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5);
        vector.set(0, (#e#) 6.6);
        TestUtil#E#.assertEquals(vector.get(0), (#e#) 6.6);
    }

    @Test
    public void testSetZero() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2);
        vector.setZero();
        TestUtil#E#.assertEquals(vector.get(0), 0);
        TestUtil#E#.assertEquals(vector.get(1), 0);
        TestUtil#E#.assertEquals(vector.get(2), 0);
    }

    @Test
    public void testResize() {
        VectorN#E# vector1 = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2);
        VectorN#E# resize1 = vector1.resize(2);
        TestUtil#E#.assertEquals(resize1.size(), 2);
        VectorN#E# vector2 = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2);
        VectorN#E# resize2 = vector2.resize(4);
        TestUtil#E#.assertEquals(resize2.size(), 4);
        TestUtil#E#.assertEquals(resize2.get(3), 0);
    }

    @Test
    public void testVectorNAddition() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5).add(new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5));
        TestUtil#E#.assertEquals(vector, 0, (#e#) 2.2, (#e#) 4.4, (#e#) 6.6, (#e#) 8.8, 11);
    }

    @Test
    public void testVectorNSubtraction() {
        VectorN#E# vector = new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5).sub(new VectorN#E#(0, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5));
        TestUtil#E#.assertEquals(vector, 0, 0, 0, 0, 0, 0);
    }

    @Test
    public void testDoubleFactorMultiplication() {
        VectorN#E# vector = new VectorN#E#((#e#) 0.1, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5).mul(2d);
        TestUtil#E#.assertEquals(vector, (#e#) 0.2, (#e#) 2.2, (#e#) 4.4, (#e#) 6.6, (#e#) 8.8, 11);
    }

    @Test
    public void testFloatFactorMultiplication() {
        VectorN#E# vector = new VectorN#E#((#e#) 0.1, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5).mul(2);
        TestUtil#E#.assertEquals(vector, 0.2f, 2.2f, (#e#) 4.4, (#e#) 6.6, (#e#) 8.8, 11f);
    }

    @Test
    public void testVectorNMultiplication() {
        VectorN#E# vector = new VectorN#E#((#e#) 0.1, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5).mul(new VectorN#E#(1, 2, 3, 4, 5, 6));
        TestUtil#E#.assertEquals(vector, (#e#) 0.1, (#e#) 2.2, (#e#) 6.6, (#e#) 13.2, 22, 33);
    }

    @Test
    public void test#ES#ComponentsMultiplication() {
        VectorN#E# vector = new VectorN#E#((#e#) 0.1, (#e#) 1.1, (#e#) 2.2, (#e#) 3.3, (#e#) 4.4, (#e#) 5.5).mul(2, 2, 3, 3, 4, 4);
        TestUtil#E#.assertEquals(vector, (#e#) 0.2, (#e#) 2.2, (#e#) 6.6, (#e#) 9.9, (#e#) 17.6, 22);
    }

    @Test
    public void testDoubleFactorDivision() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4, 5, 6).div(2d);
        TestUtil#E#.assertEquals(vector, (#e#) 0.5, 1, (#e#) 1.5, 2, (#e#) 2.5, 3);
    }

    @Test
    public void testFloatFactorDivision() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4, 5, 6).div(2);
        TestUtil#E#.assertEquals(vector, 0.5f, 1, 1.5f, 2, 2.5f, 3);
    }

    @Test
    public void testVectorNDivision() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4, 5, 6).div(new VectorN#E#(2, 1, (#e#) 0.5, 8, 4, 6));
        TestUtil#E#.assertEquals(vector, (#e#) 0.5, 2, 6, (#e#) 0.5, (#e#) 1.25, 1);
    }

    @Test
    public void test#ES#ComponentsDivision() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4, 5, 6).div(2, 1, (#e#) 0.5, 8, 4, 6);
        TestUtil#E#.assertEquals(vector, (#e#) 0.5, 2, 6, (#e#) 0.5, (#e#) 1.25, 1);
    }

    @Test
    public void testVectorNDotProduct() {
        #e# f = new VectorN#E#(2, 3, 4, 5).dot(new VectorN#E#(6, 7, 8, 9));
        TestUtil#E#.assertEquals(f, 110);
    }

    @Test
    public void testFloatComponentsDotProduct() {
        #e# f = new VectorN#E#(2, 3, 4, 5).dot(6, 7, 8, 9);
        TestUtil#E#.assertEquals(f, 110f);
    }

    @Test
    public void testVectorNProject() {
        VectorN#E# vector = new VectorN#E#(2, 3, 4, 5).project(new VectorN#E#(1, 1, 1, 1));
        TestUtil#E#.assertEquals(vector, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5);
    }

    @Test
    public void testFloatComponentsProject() {
        VectorN#E# vector = new VectorN#E#(2, 3, 4, 5).project(1, 1, 1, 1);
        TestUtil#E#.assertEquals(vector, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5, (#e#) 3.5);
    }

    @Test
    public void testRaiseToDoublePower() {
        VectorN#E# vector = new VectorN#E#(2, 6, 8, (#e#) 5.5).pow(2d);
        TestUtil#E#.assertEquals(vector, 4, 36, 64, (#e#) 30.25);
    }

    @Test
    public void testRaiseToFloatPower() {
        VectorN#E# vector = new VectorN#E#(2, 6, 8, (#e#) 5.5).pow(2);
        TestUtil#E#.assertEquals(vector, 4, 36, 64, 30.25f);
    }

    @Test
    public void testCeiling() {
        VectorN#E# vector = new VectorN#E#((#e#) 2.5, (#e#) 6.7, (#e#) 7.9, (#e#) 8.1).ceil();
        TestUtil#E#.assertEquals(vector, 3, 7, 8, 9);
    }

    @Test
    public void testFloor() {
        VectorN#E# vector = new VectorN#E#((#e#) 2.5, (#e#) 6.7, (#e#) 7.8, (#e#) 9.1).floor();
        TestUtil#E#.assertEquals(vector, 2, 6, 7, 9);
    }

    @Test
    public void testRound() {
        VectorN#E# vector = new VectorN#E#((#e#) 2.2, (#e#) 6.7, (#e#) 7.8, (#e#) 9.1).round();
        TestUtil#E#.assertEquals(vector, 2, 7, 8, 9);
    }

    @Test
    public void testAbsolute() {
        VectorN#E# vector1 = new VectorN#E#((#e#) -2.5, (#e#) -6.7, (#e#) -55, 0).abs();
        TestUtil#E#.assertEquals(vector1, (#e#) 2.5, (#e#) 6.7, 55, 0);
        VectorN#E# vector2 = new VectorN#E#((#e#) 2.5, (#e#) 6.7, 55, 0).abs();
        TestUtil#E#.assertEquals(vector2, (#e#) 2.5, (#e#) 6.7, 55, 0);
    }

    @Test
    public void testNegate() {
        VectorN#E# vector = new VectorN#E#((#e#) 2.2, (#e#) -6.7, (#e#) 15.8, 20).negate();
        TestUtil#E#.assertEquals(vector, (#e#) -2.2, (#e#) 6.7, (#e#) -15.8, -20);
    }

    @Test
    public void testVectorNMinimum() {
        VectorN#E# vector = new VectorN#E#(2, 6, -1, 0).min(new VectorN#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, 2, 4, -1, -1);
    }

    @Test
    public void test#ES#ComponentsMinimum() {
        VectorN#E# vector = new VectorN#E#(2, 6, -1, 0).min(3, 4, 10, (#e#) -1.1);
        TestUtil#E#.assertEquals(vector, 2, 4, -1, (#e#) -1.1);
    }

    @Test
    public void testVectorNMaximum() {
        VectorN#E# vector = new VectorN#E#(2, 6, -1, 0).max(new VectorN#E#(3, 4, 10, -1));
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void test#ES#ComponentsMaximum() {
        VectorN#E# vector = new VectorN#E#(2, 6, -1, 0).max(3, 4, 10, (#e#) -1.1);
        TestUtil#E#.assertEquals(vector, 3, 6, 10, 0);
    }

    @Test
    public void testVectorNDistanceSquared() {
        #e# f = new VectorN#E#(2, 3, 4).distanceSquared(new VectorN#E#(5, 6, 7));
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testFloatComponentsDistanceSquared() {
        #e# f = new VectorN#E#(2, 3, 4, 5).distanceSquared(5, 6, 7, 5);
        TestUtil#E#.assertEquals(f, 27);
    }

    @Test
    public void testVectorNDistance() {
        #e# f = new VectorN#E#(0, 2, 4, 8).distance(new VectorN#E#(0, 8, 16, 8));
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void test#ES#ComponentsDistance() {
        #e# f = new VectorN#E#(0, 2, 4, 8).distance(0, 8, 16, 8);
        TestUtil#E#.assertEquals(f, 6 * SQRT5);
    }

    @Test
    public void testLength() {
        #e# f = new VectorN#E#(3, 4, 5, 6).length();
        TestUtil#E#.assertEquals(f, (#e#) Math.sqrt(86));
    }

    @Test
    public void testLengthSquared() {
        #e# f = new VectorN#E#(3, 4, 5, 6).lengthSquared();
        TestUtil#E#.assertEquals(f, 86);
    }

    @Test
    public void testNormalize() {
        VectorN#E# v1 = new VectorN#E#(1, 1, 0, 0).normalize();
        TestUtil#E#.assertEquals(v1, (#e#) TrigMath.HALF_SQRT_OF_TWO, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0, 0);
        VectorN#E# v2 = new VectorN#E#(0, 1, 0, 1).normalize();
        TestUtil#E#.assertEquals(v2, 0, (#e#) TrigMath.HALF_SQRT_OF_TWO, 0, (#e#) TrigMath.HALF_SQRT_OF_TWO);
        try {
            VectorN#E#.ZERO_3.normalize();
            Assert.fail();
        } catch (ArithmeticException ex) {
        }
    }

    @Test
    public void testGetMinAxis() {
        VectorN#E# vector1 = new VectorN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector1.getMinAxis(), 0);
        VectorN#E# vector2 = new VectorN#E#(2, 1, 3, 4);
        TestUtil#E#.assertEquals(vector2.getMinAxis(), 1);
        VectorN#E# vector3 = new VectorN#E#(3, 2, 1, 4);
        TestUtil#E#.assertEquals(vector3.getMinAxis(), 2);
        VectorN#E# vector4 = new VectorN#E#(4, 2, 3, 1);
        TestUtil#E#.assertEquals(vector4.getMinAxis(), 3);
    }

    @Test
    public void testGetMaxAxis() {
        VectorN#E# vector1 = new VectorN#E#(4, 2, 3, 1);
        TestUtil#E#.assertEquals(vector1.getMaxAxis(), 0);
        VectorN#E# vector2 = new VectorN#E#(1, 4, 3, 2);
        TestUtil#E#.assertEquals(vector2.getMaxAxis(), 1);
        VectorN#E# vector3 = new VectorN#E#(1, 2, 4, 3);
        TestUtil#E#.assertEquals(vector3.getMaxAxis(), 2);
        VectorN#E# vector4 = new VectorN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector4.getMaxAxis(), 3);
    }

    @Test
    public void testConvertToVector2() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector.toVector2(), 1, 2);
    }

    @Test
    public void testConvertToVector3() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector.toVector3(), 1, 2, 3);
    }

    @Test
    public void testConvertToVector4() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4);
        TestUtil#E#.assertEquals(vector.toVector4(), 1, 2, 3, 4);
    }

    @Test
    public void testConvertToVectorFloat() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4);
        TestUtilf.assertEquals(vector.toFloat(), 1, 2, 3, 4);
    }

    @Test
    public void testConvertToVectorDouble() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3, 4);
        TestUtild.assertEquals(vector.toDouble(), 1, 2, 3, 4);
    }

    @Test
    public void testConvertToArray() {
        #e#[] array = new VectorN#E#(1, 2, 3, 4).toArray();
        TestUtil#E#.assertEquals(array, 1, 2, 3, 4);
    }

    @Test
    public void testComparison() {
        int c1 = new VectorN#E#(10, 20, 30, 40).compareTo(new VectorN#E#(20, 20, 30, 40));
        Assert.assertTrue(c1 < 0);
        int c2 = new VectorN#E#(10, 20, 30, 40).compareTo(new VectorN#E#(10, 20, 30, 40));
        Assert.assertTrue(c2 == 0);
        int c3 = new VectorN#E#(10, 20, 30, 40).compareTo(new VectorN#E#(10, 10, 30, 40));
        Assert.assertTrue(c3 > 0);
        int c4 = new VectorN#E#((#e#) 0.2, (#e#) 0.2, (#e#) 0.2, (#e#) 0.2).compareTo(new VectorN#E#((#e#) 0.1, (#e#) 0.1, (#e#) 0.1, (#e#) 0.1));
        Assert.assertTrue(c4 > 0);
    }

    @Test
    public void testEquals() {
        Assert.assertTrue(new VectorN#E#(1, 2, 3).equals(new VectorN#E#(1, 2, 3)));
        Assert.assertFalse(new VectorN#E#(1, 2, 3).equals(new VectorN#E#(2, 2, 3)));
    }

    @Test
    public void testCloning() {
        VectorN#E# vector = new VectorN#E#(1, 2, 3);
        Assert.assertEquals(vector, vector.clone());
    }
}
