import groovy.text.SimpleTemplateEngine

import java.util.stream.Collectors

plugins {
    alias libs.plugins.spongeConvention
    alias libs.plugins.indra
    alias libs.plugins.indra.crossdoc
    alias libs.plugins.indra.licenser.spotless
    alias libs.plugins.indra.sonatype
    alias libs.plugins.errorprone
    alias libs.plugins.spotless
    alias libs.plugins.blossom
    alias libs.plugins.ideaExt
    id 'jacoco'
}

// -- General setup -- //

group = "org.spongepowered"
version = "2.1.0-SNAPSHOT"
description = "Immutable math library for Java with a focus on games and computer graphics."

// Metadata

spongeConvention {
    repository("math") {
        ci(true)
        publishing(true)
    }

    mitLicense()
    licenseParameters {
        organization = project.organization
        url = project.url
    }

    sharedManifest {
        attributes "Specification-Title": project.name,
                "Specification-Vendor": "SpongePowered - https://spongepowered.org"
    }
}

indraSpotlessLicenser.property('name', "Math")
spotless {
    java {
        // This file has its own custom header
        targetExclude 'src/main/java/org/spongepowered/math/HashFunctions.java'
    }
}

indraCrossdoc {
    baseUrl providers.gradleProperty('javadocPublishRoot')
}

def floatData = file("src/templateData/float.yaml")
def intData = file("src/templateData/integer.yaml")
def licenseText = objects.property(String)
licenseText.set(provider {
    def properties = [*: indraSpotlessLicenser.properties().get()]
    def template = new SimpleTemplateEngine().createTemplate(file("HEADER.txt")).make(properties)
    def text = template.toString()
    def lineEnding = System.getProperty("line.separator")
    Arrays.stream(text.split("\r?\n"))
            .map { if (it.isEmpty()) { " *" } else { " * $it" } }
            .collect(Collectors.joining(lineEnding, "/*$lineEnding", "$lineEnding */"))
})
licenseText.finalizeValueOnRead()

sourceSets {
    main {
        blossom.templateSets {
            register("float", net.kyori.blossom.SourceTemplateSet) {
                propertyFile(floatData)
                variants("float", "double")
            }
            register("integer", net.kyori.blossom.SourceTemplateSet) {
                propertyFile(intData)
                variants("int", "long")
            }
            // no variants
            register("floatCommon", net.kyori.blossom.SourceTemplateSet) {
                propertyFile(floatData)
            }
        }

        // Add a module-info
        multirelease {
            alternateVersions(9)
            moduleName("org.spongepowered.math")
            requireAllPackagesExported()
            applyToJavadoc(true)
        }
    }
    test {
        blossom.templateSets {
            register("float", net.kyori.blossom.SourceTemplateSet) {
                propertyFile(floatData)
                variants("float", "double")
            }
            register("integer", net.kyori.blossom.SourceTemplateSet) {
                propertyFile(intData)
                variants("int", "long")
            }
        }
    }
    configureEach {
        blossom.templateSets.withType(net.kyori.blossom.SourceTemplateSet).configureEach {
            java()
            header = licenseText
        }
    }
}


dependencies {
    compileOnlyApi libs.errorprone.annotations
    errorprone libs.errorprone

    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.api
    testRuntimeOnly libs.junit.engine
}

jar {
    from(rootProject.file("LICENSE.txt")) {
        rename { "LICENSE-spongepowered-math.txt" }
    }
}

tasks.withType(JavaCompile.class).configureEach {
    options.compilerArgs << "-Xlint:-cast" // skip cast warnings, the generated source is most likely just overly safe.
}

afterEvaluate {
    javadoc {
        options {
            addBooleanOption("-no-module-directories", false)
        }
    }
}

plugins.withId 'eclipse', {
    eclipse {
        classpath.file.whenMerged { path ->
            path.entries.each {
                if (it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
                    def extraReads = ['org.junit.jupiter.api']
                        .collect { mod -> "org.spongepowered.math=$mod" }
                        .join(':')
                    it.entryAttributes['add-reads'] = extraReads
                }
            }
        }
    }
}

// -- Publishing -- //
indra {
    javaVersions {
        minimumToolchain 17
        testWith(8, 11, 17)
    }
    configurePublications {
            pom {
                name = "Math"
                inceptionYear = "2013"

                developers {
                    developer {
                        id = "DDoS"
                        name = "Aleksi Sapon"
                        email = "qctechs@gmail.com"
                    }
                    developer {
                        id = "kitskub"
                        name = "Jack Huey"
                        email = "kitskub@gmail.com"
                    }
                    developer {
                        id = "Wolf480pl"
                        name = "Wolf480pl"
                        email = "wolf480@interia.pl"
                    }
                    developer {
                        id = "lukespragg"
                        name = "Luke Spragg"
                        email = "the@wulf.im"
                    }
                }
            }
        }
    }
