package org.spongepowered.math.test;

import org.junit.Assert;

import org.spongepowered.math.GenericMath;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.imaginary.Quaternion{{ E }};
import org.spongepowered.math.matrix.Matrix2{{ E }};
import org.spongepowered.math.matrix.Matrix3{{ E }};
import org.spongepowered.math.matrix.Matrix4{{ E }};
import org.spongepowered.math.matrix.MatrixN{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};
import org.spongepowered.math.vector.Vector3{{ E }};
import org.spongepowered.math.vector.Vector4{{ E }};
import org.spongepowered.math.vector.VectorN{{ E }};

public class TestUtil{{ E }} {
    // Constants to reduce the amount of time redundant (5+) quantities are computed:
    public static final {{ e }} SQRT2 = ({{ e }}) Math.sqrt(2);
    public static final {{ e }} SQRT5 = ({{ e }}) Math.sqrt(5);
    public static final {{ e }} SQRT13 = ({{ e }}) Math.sqrt(13);
    public static final {{ e }} SQRT54 = ({{ e }}) Math.sqrt(54);

    private static final {{ e }} EPSILON = {{ Eteps }};

    public static void assertEquals({{ e }} value, {{ e }} expected) {
        Assert.assertEquals(expected, value, EPSILON);
    }

    public static void assertEquals(Vector2{{ E }} v, {{ e }} x, {{ e }} y) {
        assertEquals(v.getX(), x);
        assertEquals(v.getY(), y);
    }

    public static void assertEquals(Vector3{{ E }} v, {{ e }} x, {{ e }} y, {{ e }} z) {
        assertEquals(v.getX(), x);
        assertEquals(v.getY(), y);
        assertEquals(v.getZ(), z);
    }

    public static void assertEquals(Vector4{{ E }} v, {{ e }} x, {{ e }} y, {{ e }} z, {{ e }} w) {
        assertEquals(v.getX(), x);
        assertEquals(v.getY(), y);
        assertEquals(v.getZ(), z);
        assertEquals(v.getW(), w);
    }

    public static void assertEquals(VectorN{{ E }} v, {{ e }}... f) {
        Assert.assertArrayEquals(f, v.toArray(), EPSILON);
    }

    public static void assertEquals(Complex{{ E }} c, {{ e }} x, {{ e }} y) {
        assertEquals(c.getX(), x);
        assertEquals(c.getY(), y);
    }

    public static void assertEquals(Quaternion{{ E }} q, {{ e }} x, {{ e }} y, {{ e }} z, {{ e }} w) {
        assertEquals(q.getX(), x);
        assertEquals(q.getY(), y);
        assertEquals(q.getZ(), z);
        assertEquals(q.getW(), w);
    }

    public static void assertEquals(Matrix2{{ E }} m, {{ e }} m00, {{ e }} m01, {{ e }} m10, {{ e }} m11) {
        assertEquals(m.get(0, 0), m00);
        assertEquals(m.get(0, 1), m01);
        assertEquals(m.get(1, 0), m10);
        assertEquals(m.get(1, 1), m11);
    }

    public static void assertEquals(Matrix3{{ E }} m, {{ e }} m00, {{ e }} m01, {{ e }} m02, {{ e }} m10, {{ e }} m11,
            {{ e }} m12, {{ e }} m20, {{ e }} m21, {{ e }} m22) {
        assertEquals(m.get(0, 0), m00);
        assertEquals(m.get(0, 1), m01);
        assertEquals(m.get(0, 2), m02);
        assertEquals(m.get(1, 0), m10);
        assertEquals(m.get(1, 1), m11);
        assertEquals(m.get(1, 2), m12);
        assertEquals(m.get(2, 0), m20);
        assertEquals(m.get(2, 1), m21);
        assertEquals(m.get(2, 2), m22);
    }

    public static void assertEquals(Matrix4{{ E }} m, {{ e }} m00, {{ e }} m01, {{ e }} m02, {{ e }} m03, {{ e }} m10,
            {{ e }} m11, {{ e }} m12, {{ e }} m13, {{ e }} m20, {{ e }} m21, {{ e }} m22,
            {{ e }} m23, {{ e }} m30, {{ e }} m31, {{ e }} m32, {{ e }} m33) {
        assertEquals(m.get(0, 0), m00);
        assertEquals(m.get(0, 1), m01);
        assertEquals(m.get(0, 2), m02);
        assertEquals(m.get(0, 3), m03);
        assertEquals(m.get(1, 0), m10);
        assertEquals(m.get(1, 1), m11);
        assertEquals(m.get(1, 2), m12);
        assertEquals(m.get(1, 3), m13);
        assertEquals(m.get(2, 0), m20);
        assertEquals(m.get(2, 1), m21);
        assertEquals(m.get(2, 2), m22);
        assertEquals(m.get(2, 3), m23);
        assertEquals(m.get(3, 0), m30);
        assertEquals(m.get(3, 1), m31);
        assertEquals(m.get(3, 2), m32);
        assertEquals(m.get(3, 3), m33);
    }

    public static void assertEquals(MatrixN{{ E }} m, {{ e }}... f) {
        Assert.assertArrayEquals(f, m.toArray(), EPSILON);
    }

    public static void assertEquals({{ e }}[] a, {{ e }}... f) {
        Assert.assertArrayEquals(f, a, EPSILON);
    }
}
