package org.spongepowered.math.vector;

import java.io.Serializable;
import java.lang.Override;
import java.util.Random;

import com.google.errorprone.annotations.Immutable;
import org.spongepowered.math.GenericMath;
import org.spongepowered.math.HashFunctions;
import org.spongepowered.math.TrigMath;

@Immutable
public final class Vector2{{ E }} implements Vector{{ E }}, Comparable<Vector2{{ E }}>, Serializable {

    private static final long serialVersionUID = 1;
    public static final Vector2{{ E }} ZERO = new Vector2{{ E }}(0, 0);
    public static final Vector2{{ E }} UNIT_X = new Vector2{{ E }}(1, 0);
    public static final Vector2{{ E }} UNIT_Y = new Vector2{{ E }}(0, 1);
    public static final Vector2{{ E }} ONE = new Vector2{{ E }}(1, 1);
    private final {{ e }} x;
    private final {{ e }} y;
    @SuppressWarnings("Immutable")
    private transient volatile boolean hashed = false;
    @SuppressWarnings("Immutable")
    private transient volatile int hashCode = 0;

    public Vector2{{ E }}(final Vector3{{ E }} v) {
        this(v.x(), v.y());
    }

    public Vector2{{ E }}(final Vector4{{ E }} v) {
        this(v.x(), v.y());
    }

    public Vector2{{ E }}(final VectorN{{ E }} v) {
        this(v.get(0), v.get(1));
    }

    public Vector2{{ E }}(final {{ EOverload }} x, final {{ EOverload }} y) {
        this(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }}(final {{ e }} x, final {{ e }} y) {
        this.x = x;
        this.y = y;
    }

    public {{ e }} x() {
        return this.x;
    }

    public {{ e }} y() {
        return this.y;
    }

    public int floorX() {
        return GenericMath.floor(this.x);
    }

    public int floorY() {
        return GenericMath.floor(this.y);
    }

    public Vector2{{ E }} add(final Vector2{{ E }} v) {
        return this.add(v.x, v.y);
    }

    public Vector2{{ E }} add(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.add(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} add(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(this.x + x, this.y + y);
    }

    public Vector2{{ E }} sub(final Vector2{{ E }} v) {
        return this.sub(v.x, v.y);
    }

    public Vector2{{ E }} sub(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.sub(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} sub(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(this.x - x, this.y - y);
    }

    public Vector2{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    @Override
    public Vector2{{ E }} mul(final {{ e }} a) {
        return this.mul(a, a);
    }

    public Vector2{{ E }} mul(final Vector2{{ E }} v) {
        return this.mul(v.x, v.y);
    }

    public Vector2{{ E }} mul(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.mul(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} mul(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(this.x * x, this.y * y);
    }

    public Vector2{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    @Override
    public Vector2{{ E }} div(final {{ e }} a) {
        return this.div(a, a);
    }

    public Vector2{{ E }} div(final Vector2{{ E }} v) {
        return this.div(v.x, v.y);
    }

    public Vector2{{ E }} div(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.div(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} div(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(this.x / x, this.y / y);
    }

    public {{ e }} dot(final Vector2{{ E }} v) {
        return this.dot(v.x, v.y);
    }

    public {{ e }} dot(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.dot(({{ e }}) x, ({{ e }}) y);
    }

    public {{ e }} dot(final {{ e }} x, final {{ e }} y) {
        return this.x * x + this.y * y;
    }

    public Vector2{{ E }} project(final Vector2{{ E }} v) {
        return this.project(v.x, v.y);
    }

    public Vector2{{ E }} project(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.project(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} project(final {{ e }} x, final {{ e }} y) {
        final {{ e }} lengthSquared = x * x + y * y;
        if (Math.abs(lengthSquared) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final {{ e }} a = this.dot(x, y) / lengthSquared;
        return new Vector2{{ E }}(a * x, a * y);
    }

    public Vector2{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow(({{ e }}) pow);
    }

    @Override
    public Vector2{{ E }} pow(final {{ e }} power) {
        return new Vector2{{ E }}(Math.pow(this.x, power), Math.pow(this.y, power));
    }

    @Override
    public Vector2{{ E }} ceil() {
        return new Vector2{{ E }}(Math.ceil(this.x), Math.ceil(this.y));
    }

    @Override
    public Vector2{{ E }} floor() {
        return new Vector2{{ E }}(GenericMath.floor(this.x), GenericMath.floor(this.y));
    }

    @Override
    public Vector2{{ E }} round() {
        return new Vector2{{ E }}(Math.round(this.x), Math.round(this.y));
    }

    @Override
    public Vector2{{ E }} abs() {
        return new Vector2{{ E }}(Math.abs(this.x), Math.abs(this.y));
    }

    @Override
    public Vector2{{ E }} negate() {
        return new Vector2{{ E }}(-this.x, -this.y);
    }

    public Vector2{{ E }} min(final Vector2{{ E }} v) {
        return this.min(v.x, v.y);
    }

    public Vector2{{ E }} min(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.min(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} min(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(Math.min(this.x, x), Math.min(this.y, y));
    }

    public Vector2{{ E }} max(final Vector2{{ E }} v) {
        return this.max(v.x, v.y);
    }

    public Vector2{{ E }} max(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.max(({{ e }}) x, ({{ e }}) y);
    }

    public Vector2{{ E }} max(final {{ e }} x, final {{ e }} y) {
        return new Vector2{{ E }}(Math.max(this.x, x), Math.max(this.y, y));
    }

    public {{ e }} distanceSquared(final Vector2{{ E }} v) {
        return this.distanceSquared(v.x, v.y);
    }

    public {{ e }} distanceSquared(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.distanceSquared(({{ e }}) x, ({{ e }}) y);
    }

    public {{ e }} distanceSquared(final {{ e }} x, final {{ e }} y) {
        final {{ e }} dx = this.x - x;
        final {{ e }} dy = this.y - y;
        return dx * dx + dy * dy;
    }

    public {{ e }} distance(final Vector2{{ E }} v) {
        return this.distance(v.x, v.y);
    }

    public {{ e }} distance(final {{ EOverload }} x, final {{ EOverload }} y) {
        return this.distance(({{ e }}) x, ({{ e }}) y);
    }

    public {{ e }} distance(final {{ e }} x, final {{ e }} y) {
        return ({{ e }}) Math.sqrt(this.distanceSquared(x, y));
    }

    @Override
    public {{ e }} lengthSquared() {
        return this.x * this.x + this.y * this.y;
    }

    @Override
    public {{ e }} length() {
        return ({{ e }}) Math.sqrt(this.lengthSquared());
    }

    @Override
    public Vector2{{ E }} normalize() {
        final {{ e }} length = this.length();
        if (Math.abs(length) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot normalize the zero vector");
        }
        return new Vector2{{ E }}(this.x / length, this.y / length);
    }

    /**
     * Return the axis with the minimal value.
     *
     * @return {@link int} axis with minimal value
     */
    @Override
    public int minAxis() {
        return this.x < this.y ? 0 : 1;
    }

    /**
     * Return the axis with the maximum value.
     *
     * @return {@link int} axis with maximum value
     */
    @Override
    public int maxAxis() {
        return this.x > this.y ? 0 : 1;
    }

    public Vector3{{ E }} toVector3() {
        return this.toVector3(0);
    }

    public Vector3{{ E }} toVector3(final {{ EOverload }} z) {
        return this.toVector3(({{ e }}) z);
    }

    public Vector3{{ E }} toVector3(final {{ e }} z) {
        return new Vector3{{ E }}(this, z);
    }

    public Vector4{{ E }} toVector4() {
        return this.toVector4(0, 0);
    }

    public Vector4{{ E }} toVector4(final {{ EOverload }} z, final {{ EOverload }} w) {
        return this.toVector4(({{ e }}) z, ({{ e }}) w);
    }

    public Vector4{{ E }} toVector4(final {{ e }} z, final {{ e }} w) {
        return new Vector4{{ E }}(this, z, w);
    }

    public VectorN{{ E }} toVectorN() {
        return new VectorN{{ E }}(this);
    }

    @Override
    public {{ e }}[] toArray() {
        return new {{ e }}[]{this.x, this.y};
    }

    @Override
    public Vector2i toInt() {
        return new Vector2i(this.x, this.y);
    }

    @Override
    public Vector2l toLong() {
        return new Vector2l(this.x, this.y);
    }

    @Override
    public Vector2f toFloat() {
        return new Vector2f(this.x, this.y);
    }

    @Override
    public Vector2d toDouble() {
        return new Vector2d(this.x, this.y);
    }

    @Override
    public int compareTo(final Vector2{{ E }} v) {
        return (int) Math.signum(this.lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof Vector2{{ E }})) {
            return false;
        }
        final Vector2{{ E }} that = (Vector2{{ E }}) other;
        if ({{ ET }}.compare(that.x, this.x) != 0) {
            return false;
        }
        if ({{ ET }}.compare(that.y, this.y) != 0) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        if (!this.hashed) {
            final int result = (this.x != +0.0f ? {{ ET }}.hashCode(this.x) : 0);
            this.hashCode = 31 * result + (this.y != +0.0f ? {{ ET }}.hashCode(this.y) : 0);
            this.hashed = true;
        }
        return this.hashCode;
    }

    @Override
    public String toString() {
        return "(" + this.x + ", " + this.y + ")";
    }

    public static Vector2{{ E }} from(final {{ e }} n) {
         return n == 0 ? Vector2{{ E }}.ZERO : new Vector2{{ E }}(n, n);
    }

    public static Vector2{{ E }} from(final {{ e }} x, final {{ e }} y) {
         return x == 0 && y == 0 ? Vector2{{ E }}.ZERO : new Vector2{{ E }}(x, y);
    }

    /**
     * Gets the direction vector of a random angle using the random specified.
     *
     * @param random to use
     * @return the random direction vector
     */
    public static Vector2{{ E }} createRandomDirection(final Random random) {
        return Vector2{{ E }}.createDirectionRad(random.next{{ ES }}() * ({{ e }}) TrigMath.TWO_PI);
    }

    /**
     * Gets the direction vector of a certain angle in degrees.
     *
     * @param angle in degrees
     * @return the direction vector
     */
    public static Vector2{{ E }} createDirectionDeg(final {{ EOverload }} angle) {
        return Vector2{{ E }}.createDirectionDeg(({{ e }}) angle);
    }

    /**
     * Gets the direction vector of a certain angle in degrees.
     *
     * @param angle in degrees
     * @return the direction vector
     */
    public static Vector2{{ E }} createDirectionDeg(final {{ e }} angle) {
        return Vector2{{ E }}.createDirectionRad(({{ e }}) Math.toRadians(angle));
    }

    /**
     * Gets the direction vector of a certain angle in radians.
     *
     * @param angle in radians
     * @return the direction vector
     */
    public static Vector2{{ E }} createDirectionRad(final {{ EOverload }} angle) {
        return Vector2{{ E }}.createDirectionRad(({{ e }}) angle);
    }

    /**
     * Gets the direction vector of a certain angle in radians.
     *
     * @param angle in radians
     * @return the direction vector
     */
    public static Vector2{{ E }} createDirectionRad(final {{ e }} angle) {
        return new Vector2{{ E }}(TrigMath.cos(angle), TrigMath.sin(angle));
    }
}
