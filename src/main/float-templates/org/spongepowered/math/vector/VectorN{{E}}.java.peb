package org.spongepowered.math.vector;

import java.io.Serializable;
import java.util.Arrays;

import org.spongepowered.math.GenericMath;

public class VectorN{{ E }} implements Vector{{ E }}, Comparable<VectorN{{ E }}>, Serializable, Cloneable {
    public static VectorN{{ E }} ZERO_2 = new ImmutableZeroVectorN(0, 0);
    public static VectorN{{ E }} ZERO_3 = new ImmutableZeroVectorN(0, 0, 0);
    public static VectorN{{ E }} ZERO_4 = new ImmutableZeroVectorN(0, 0, 0, 0);
    private static final long serialVersionUID = 1;
    private final {{ e }}[] vec;

    public VectorN{{ E }}(final int size) {
        if (size < 2) {
            throw new IllegalArgumentException("Minimum vector size is 2");
        }
        vec = new {{ e }}[size];
    }

    public VectorN{{ E }}(final Vector2{{ E }} v) {
        this(v.x(), v.y());
    }

    public VectorN{{ E }}(final Vector3{{ E }} v) {
        this(v.x(), v.y(), v.z());
    }

    public VectorN{{ E }}(final Vector4{{ E }} v) {
        this(v.x(), v.y(), v.z(), v.w());
    }

    public VectorN{{ E }}(final VectorN{{ E }} v) {
        this(v.vec);
    }

    public VectorN{{ E }}(final {{ e }}... v) {
        this.vec = v.clone();
    }

    public int size() {
        return this.vec.length;
    }

    public {{ e }} get(final int comp) {
        return this.vec[comp];
    }

    public int floored(final int comp) {
        return GenericMath.floor(this.get(comp));
    }

    public void set(final int comp, final {{ EOverload }} val) {
        this.set(comp, ({{ e }}) val);
    }

    public void set(final int comp, final {{ e }} val) {
        this.vec[comp] = val;
    }

    public void setZero() {
        Arrays.fill(this.vec, 0);
    }

    public VectorN{{ E }} resize(final int size) {
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        System.arraycopy(vec, 0, d.vec, 0, Math.min(size, this.size()));
        return d;
    }

    public VectorN{{ E }} add(final VectorN{{ E }} v) {
        return this.add(v.vec);
    }

    public VectorN{{ E }} add(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = this.vec[comp] + v[comp];
        }
        return d;
    }

    public VectorN{{ E }} sub(final VectorN{{ E }} v) {
        return this.sub(v.vec);
    }

    public VectorN{{ E }} sub(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = this.vec[comp] - v[comp];
        }
        return d;
    }

    public VectorN{{ E }} mul(final {{ EOverload }} a) {
        return this.mul(({{ e }}) a);
    }

    @Override
    public VectorN{{ E }} mul(final {{ e }} a) {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = this.vec[comp] * a;
        }
        return d;
    }

    public VectorN{{ E }} mul(final VectorN{{ E }} v) {
        return this.mul(v.vec);
    }

    public VectorN{{ E }} mul(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = this.vec[comp] * v[comp];
        }
        return d;
    }

    public VectorN{{ E }} div(final {{ EOverload }} a) {
        return this.div(({{ e }}) a);
    }

    @Override
    public VectorN{{ E }} div({{ e }} a) {
        final int size = size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] / a;
        }
        return d;
    }

    public VectorN{{ E }} div(final VectorN{{ E }} v) {
        return this.div(v.vec);
    }

    public VectorN{{ E }} div(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = vec[comp] / v[comp];
        }
        return d;
    }

    public {{ e }} dot(final VectorN{{ E }} v) {
        return this.dot(v.vec);
    }

    public {{ e }} dot(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        {{ e }} d = 0;
        for (int comp = 0; comp < size; comp++) {
            d += this.vec[comp] * v[comp];
        }
        return d;
    }

    public VectorN{{ E }} project(final VectorN{{ E }} v) {
        return this.project(v.vec);
    }

    public VectorN{{ E }} project(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        {{ e }} lengthSquared = 0;
        for (int comp = 0; comp < size; comp++) {
            lengthSquared += v[comp] * v[comp];
        }
        if (Math.abs(lengthSquared) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot project onto the zero vector");
        }
        final {{ e }} a = this.dot(v) / lengthSquared;
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = a * v[comp];
        }
        return d;
    }

    public VectorN{{ E }} pow(final {{ EOverload }} pow) {
        return this.pow(({{ e }}) pow);
    }

    @Override
    public VectorN{{ E }} pow(final {{ e }} power) {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = ({{ e }}) Math.pow(this.vec[comp], power);
        }
        return d;
    }

    @Override
    public VectorN{{ E }} ceil() {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = ({{ e }}) Math.ceil(this.vec[comp]);
        }
        return d;
    }

    @Override
    public VectorN{{ E }} floor() {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = GenericMath.floor(this.vec[comp]);
        }
        return d;
    }

    @Override
    public VectorN{{ E }} round() {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.round(this.vec[comp]);
        }
        return d;
    }

    @Override
    public VectorN{{ E }} abs() {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.abs(this.vec[comp]);
        }
        return d;
    }

    @Override
    public VectorN{{ E }} negate() {
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = -this.vec[comp];
        }
        return d;
    }

    public VectorN{{ E }} min(final VectorN{{ E }} v) {
        return this.min(v.vec);
    }

    public VectorN{{ E }} min(final {{ e }}... v) {
        final int size = size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.min(this.vec[comp], v[comp]);
        }
        return d;
    }

    public VectorN{{ E }} max(final VectorN{{ E }} v) {
        return this.max(v.vec);
    }

    public VectorN{{ E }} max(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = Math.max(this.vec[comp], v[comp]);
        }
        return d;
    }

    public {{ e }} distanceSquared(final VectorN{{ E }} v) {
        return this.distanceSquared(v.vec);
    }

    public {{ e }} distanceSquared(final {{ e }}... v) {
        final int size = this.size();
        if (size != v.length) {
            throw new IllegalArgumentException("Vector sizes must be the same");
        }
        {{ e }} d = 0;
        for (int comp = 0; comp < size; comp++) {
            final {{ e }} delta = this.vec[comp] - v[comp];
            d += delta * delta;
        }
        return d;
    }

    public {{ e }} distance(final VectorN{{ E }} v) {
        return this.distance(v.vec);
    }

    public {{ e }} distance(final {{ e }}... v) {
        return ({{ e }}) Math.sqrt(this.distanceSquared(v));
    }

    @Override
    public {{ e }} lengthSquared() {
        final int size = this.size();
        {{ e }} l = 0;
        for (int comp = 0; comp < size; comp++) {
            l += this.vec[comp] * this.vec[comp];
        }
        return l;
    }

    @Override
    public {{ e }} length() {
        return ({{ e }}) Math.sqrt(this.lengthSquared());
    }

    @Override
    public VectorN{{ E }} normalize() {
        final {{ e }} length = this.length();
        if (Math.abs(length) < {{ Eeps }}) {
            throw new ArithmeticException("Cannot normalize the zero vector");
        }
        final int size = this.size();
        final VectorN{{ E }} d = new VectorN{{ E }}(size);
        for (int comp = 0; comp < size; comp++) {
            d.vec[comp] = ({{ e }}) (this.vec[comp] / length);
        }
        return d;
    }

    @Override
    public int minAxis() {
        int axis = 0;
        {{ e }} value = this.vec[axis];
        final int size = this.size();
        for (int comp = 1; comp < size; comp++) {
            if (this.vec[comp] < value) {
                value = this.vec[comp];
                axis = comp;
            }
        }
        return axis;
    }

    @Override
    public int maxAxis() {
        int axis = 0;
        {{ e }} value = this.vec[axis];
        final int size = this.size();
        for (int comp = 1; comp < size; comp++) {
            if (this.vec[comp] > value) {
                value = this.vec[comp];
                axis = comp;
            }
        }
        return axis;
    }

    public Vector2{{ E }} toVector2() {
        return new Vector2{{ E }}(this);
    }

    public Vector3{{ E }} toVector3() {
        return new Vector3{{ E }}(this);
    }

    public Vector4{{ E }} toVector4() {
        return new Vector4{{ E }}(this);
    }

    @Override
    public {{ e }}[] toArray() {
        return vec.clone();
    }

    @Override
    public VectorNi toInt() {
        final int size = this.size();
        final int[] intVec = new int[size];
        for (int comp = 0; comp < size; comp++) {
            intVec[comp] = GenericMath.floor(this.vec[comp]);
        }
        return new VectorNi(intVec);
    }

    @Override
    public VectorNl toLong() {
        final int size = this.size();
        final long[] longVec = new long[size];
        for (int comp = 0; comp < size; comp++) {
            longVec[comp] = GenericMath.floorl(this.vec[comp]);
        }
        return new VectorNl(longVec);
    }

    @Override
    public VectorNf toFloat() {
        final int size = this.size();
        final float[] floatVec = new float[size];
        for (int comp = 0; comp < size; comp++) {
            floatVec[comp] = (float) this.vec[comp];
        }
        return new VectorNf(floatVec);
    }

    @Override
    public VectorNd toDouble() {
        final int size = this.size();
        final double[] doubleVec = new double[size];
        for (int comp = 0; comp < size; comp++) {
            doubleVec[comp] = (double) this.vec[comp];
        }
        return new VectorNd(doubleVec);
    }

    @Override
    public int compareTo(final VectorN{{ E }} v) {
        return (int) Math.signum(this.lengthSquared() - v.lengthSquared());
    }

    @Override
    public boolean equals(final Object other) {
        if (other == this) {
            return true;
        }
        if (!(other instanceof VectorN{{ E }})) {
            return false;
        }
        return Arrays.equals(this.vec, ((VectorN{{ E }}) other).vec);
    }

    @Override
    public int hashCode() {
        return 67 * 5 + Arrays.hashCode(this.vec);
    }

    @Override
    public VectorN{{ E }} clone() {
        return new VectorN{{ E }}(this);
    }

    @Override
    public String toString() {
        return Arrays.toString(this.vec).replace('[', '(').replace(']', ')');
    }

    private static class ImmutableZeroVectorN extends VectorN{{ E }} {

        private static final long serialVersionUID = 1L;

        public ImmutableZeroVectorN(final {{ e }}... v) {
            super(v);
        }

        @Override
        public void set(final int comp, final {{ e }} val) {
            throw new UnsupportedOperationException("You may not alter this vector");
        }
    }
}
