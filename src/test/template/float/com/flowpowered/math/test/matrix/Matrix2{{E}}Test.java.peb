package org.spongepowered.math.test.matrix;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.spongepowered.math.imaginary.Complex{{ E }};
import org.spongepowered.math.matrix.Matrix2{{ E }};
import org.spongepowered.math.matrix.Matrix3{{ E }};
import org.spongepowered.math.matrix.Matrix4{{ E }};
import org.spongepowered.math.matrix.MatrixN{{ E }};
import org.spongepowered.math.test.TestUtil{{ E }};
import org.spongepowered.math.vector.Vector2{{ E }};

import static org.spongepowered.math.test.TestUtil{{ E }}.SQRT13;

public class Matrix2{{ E }}Test {

    @Test
    void testDefaultConstructor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}();
        TestUtil{{ E }}.assertEquals(matrix, 1, 0, 0, 1);
    }

    @Test
    void testCopyMatrix3Constructor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(new Matrix3{{ E }}(1, 2, 3, 4, 5, 6, 7, 8, 9));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 4, 5);
    }

    @Test
    void testCopyMatrix4Constructor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(new Matrix4{{ E }}(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 5, 6);
    }

    @Test
    void testCopyMatrixNConstructor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(new MatrixN{{ E }}(1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testDoubleComponentsConstructor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1d, 2d, 3d, 4d);
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testFloatComponentsConstructor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testGetter() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.get(0, 0), 1);
        TestUtil{{ E }}.assertEquals(matrix.get(0, 1), 2);
        TestUtil{{ E }}.assertEquals(matrix.get(1, 0), 3);
        TestUtil{{ E }}.assertEquals(matrix.get(1, 1), 4);
    }

    @Test
    void testRowGetter() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.row(0), 1, 2);
        TestUtil{{ E }}.assertEquals(matrix.row(1), 3, 4);
    }

    @Test
    void testColumnGetter() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.column(0), 1, 3);
        TestUtil{{ E }}.assertEquals(matrix.column(1), 2, 4);
    }

    @Test
    void testMatrix2Addition() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).add(new Matrix2{{ E }}(1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(matrix, 2, 4, 6, 8);
    }

    @Test
    void testMatrix2Subtraction() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).sub(new Matrix2{{ E }}(1, 2, 3, 4));
        TestUtil{{ E }}.assertEquals(matrix, 0, 0, 0, 0);
    }

    @Test
    void testFloatFactorMultiplication() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).mul(2f);
        TestUtil{{ E }}.assertEquals(matrix, 2, 4, 6, 8);
    }

    @Test
    void testDoubleFactorMultiplication() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).mul(2d);
        TestUtil{{ E }}.assertEquals(matrix, 2, 4, 6, 8);
    }

    @Test
    void testMatrix2Multiplication() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).mul(new Matrix2{{ E }}(1, 0, 0, 1));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testFloatFactorDivision() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).div(0.5f);
        TestUtil{{ E }}.assertEquals(matrix, 2, 4, 6, 8);
    }

    @Test
    void testDoubleFactorDivision() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).div(0.5);
        TestUtil{{ E }}.assertEquals(matrix, 2, 4, 6, 8);
    }

    @Test
    void testMatrix2Division() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).mul(new Matrix2{{ E }}(1, 0, 0, 1));
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testRaiseToFloatPower() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).pow(2f);
        TestUtil{{ E }}.assertEquals(matrix, 1, 4, 9, 16);
    }

    @Test
    void testRaiseToDoublePower() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).pow(2d);
        TestUtil{{ E }}.assertEquals(matrix, 1, 4, 9, 16);
    }

    @Test
    void testTranslateDoubleDistance() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).translate(5d);
        TestUtil{{ E }}.assertEquals(matrix, 1, 5, 0, 1);
    }

    @Test
    void testTranslateFloatDistance() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).translate(5f);
        TestUtil{{ E }}.assertEquals(matrix, 1, 5, 0, 1);
    }

    @Test
    void testScaleDoubleFactor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).scale(2.5);
        TestUtil{{ E }}.assertEquals(matrix, ({{ e }}) 2.5, 0, 0, ({{ e }}) 2.5);
    }

    @Test
    void testScaleFloatFactor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).scale(2.5f);
        TestUtil{{ E }}.assertEquals(matrix, ({{ e }}) 2.5, 0, 0, ({{ e }}) 2.5);
    }

    @Test
    void testScaleVector2() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).scale(new Vector2{{ E }}(2, 3));
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, 3);
    }

    @Test
    void testScaleDoubleComponents() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).scale(2d, 3d);
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, 3);
    }

    @Test
    void testScaleFloatComponents() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).scale(2, 3);
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, 3);
    }

    @Test
    void testRotateComplex() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 0, 0, 1).rotate(new Complex{{ E }}(0, 1));
        TestUtil{{ E }}.assertEquals(matrix, 0, -1, 1, 0);
    }

    @Test
    void testTransformVector2() {
        final Vector2{{ E }} vector = new Matrix2{{ E }}(1, 0, 0, 1).scale(2, 1).translate(4).transform(new Vector2{{ E }}(3, 1));
        TestUtil{{ E }}.assertEquals(vector, 10, 1);
    }

    @Test
    void testTransformDoubleComponents() {
        final Vector2{{ E }} vector = new Matrix2{{ E }}(1, 0, 0, 1).scale(2, 1).translate(4).transform(3d, 1d);
        TestUtil{{ E }}.assertEquals(vector, 10, 1);
    }

    @Test
    void testTransformFloatComponents() {
        final Vector2{{ E }} vector = new Matrix2{{ E }}(1, 0, 0, 1).scale(2, 1).translate(4).transform(3, 1);
        TestUtil{{ E }}.assertEquals(vector, 10, 1);
    }

    @Test
    void testFloor() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1.1, 2.5, 3.9, -4.8).floor();
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, -5);
    }

    @Test
    void testCeiling() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1.1, 2.5, 3.9, -4.8).ceil();
        TestUtil{{ E }}.assertEquals(matrix, 2, 3, 4, -4);
    }

    @Test
    void testRound() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1.1, 2.5, 3.9, -4.8).round();
        TestUtil{{ E }}.assertEquals(matrix, 1, 3, 4, -5);
    }

    @Test
    void testAbsolute() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1.1, 2.5, 3.9, -4.8).abs();
        TestUtil{{ E }}.assertEquals(matrix, ({{ e }}) 1.1, ({{ e }}) 2.5, ({{ e }}) 3.9, ({{ e }}) 4.8);
    }

    @Test
    void testNegate() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1.1, 2.5, 3.9, -4.8).negate();
        TestUtil{{ E }}.assertEquals(matrix, ({{ e }}) -1.1, ({{ e }}) -2.5, ({{ e }}) -3.9, ({{ e }}) 4.8);
    }

    @Test
    void testTranspose() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).transpose();
        TestUtil{{ E }}.assertEquals(matrix, 1, 3, 2, 4);
    }

    @Test
    void testTrace() {
        final {{ e }} f = new Matrix2{{ E }}(1, 2, 3, 4).trace();
        TestUtil{{ E }}.assertEquals(f, 5);
    }

    @Test
    void testDeterminant() {
        final {{ e }} f = new Matrix2{{ E }}(1, 2, 3, 4).determinant();
        TestUtil{{ E }}.assertEquals(f, -2);
    }

    @Test
    void testInvert() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4).invert();
        TestUtil{{ E }}.assertEquals(matrix, -2, 1, ({{ e }}) 1.5, ({{ e }}) -0.5);
        Assertions.assertThrows(ArithmeticException.class, () -> Matrix2{{ E }}.ZERO.invert());
    }

    @Test
    void testConvertToMatrix3() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.toMatrix3(), 1, 2, 0, 3, 4, 0, 0, 0, 0);
    }

    @Test
    void testConvertToMatrix4() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.toMatrix4(), 1, 2, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    @Test
    void testConvertToMatrixN() {
        final Matrix2{{ E }} matrix = new Matrix2{{ E }}(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix.toMatrixN(), 1, 2, 3, 4);
    }

    @Test
    void testConvertToArrayRowMajorDefault() {
        final {{ e }}[] array = new Matrix2{{ E }}(1, 2, 3, 4).toArray(true);
        TestUtil{{ E }}.assertEquals(array, 1, 3, 2, 4);
    }

    @Test
    void testConvertToArray() {
        final {{ e }}[] array = new Matrix2{{ E }}(1, 2, 3, 4).toArray();
        TestUtil{{ E }}.assertEquals(array, 1, 2, 3, 4);
    }

    @Test
    void testEquals() {
        Assertions.assertTrue(new Matrix2{{ E }}(1, 2, 3, 4).equals(new Matrix2{{ E }}(1, 2, 3, 4)));
        Assertions.assertFalse(new Matrix2{{ E }}(1, 2, 3, 4).equals(new Matrix2{{ E }}(1, 2, 3, 5)));
    }

    @Test
    void testMatrixFromN() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.from(1);
        TestUtil{{ E }}.assertEquals(matrix, 1, 1, 1, 1);
    }

    @Test
    void testMatrixFromMany() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.from(1, 2, 3, 4);
        TestUtil{{ E }}.assertEquals(matrix, 1, 2, 3, 4);
    }

    @Test
    void testMatrixFromDiagonal() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.fromDiagonal(1, 2);
        TestUtil{{ E }}.assertEquals(matrix, 1, 0, 0, 2);
    }

    @Test
    void testCreateFromScalingDoubleFactor() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createScaling(2d);
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, 2);
    }

    @Test
    void testCreateFromScalingFloatFactor() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createScaling(2);
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, 2);
    }

    @Test
    void testCreateFromScalingVector2() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createScaling(new Vector2{{ E }}(2, 1.5));
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, ({{ e }}) 1.5);
    }

    @Test
    void testCreateFromScalingDoubleComponents() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createScaling(2, 1.5);
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, ({{ e }}) 1.5);
    }

    @Test
    void testCreateFromScalingFloatComponents() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createScaling(2, 1.5f);
        TestUtil{{ E }}.assertEquals(matrix, 2, 0, 0, ({{ e }}) 1.5);
    }

    @Test
    void testCreateTranslationFromDoubleDistance() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createTranslation(5d);
        TestUtil{{ E }}.assertEquals(matrix, 1, 5, 0, 1);
    }


    @Test
    void testCreateTranslationFromFloatDistance() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createTranslation(5);
        TestUtil{{ E }}.assertEquals(matrix, 1, 5, 0, 1);
    }

    @Test
    void testCreateRotationFromComplex() {
        final Matrix2{{ E }} matrix = Matrix2{{ E }}.createRotation(new Complex{{ E }}(2, 3));
        TestUtil{{ E }}.assertEquals(matrix,
                ({{ e }}) (2/SQRT13), ({{ e }}) (-3/SQRT13),
                ({{ e }}) (3/SQRT13), ({{ e }}) (2/SQRT13));
    }

}
